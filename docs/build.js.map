{"version":3,"file":"build.js","sources":["../src/utils/random.js","../src/utils/cell.js","../src/utils/rect.js","../src/utils/world.js","../src/utils/fov.js","../src/utils/entity.js","../src/utils/generator.js","../src/index.js"],"sourcesContent":["export default { get, choose }\n\nfunction get(min, max) {\n  var a = arguments.length\n  if (a === 0)\n    return Math.random()\n  else if (a === 1)\n    max = min, min = 0\n  if (min > max)\n    [min, max] = [max, min]\n  return Math.floor(get() * (max - min)) + min\n}\n\nfunction choose(array) {\n  if ( Array.isArray(array) && !array.length )\n    return null\n  if ( !isNaN(array) )\n    return !get(array)\n  if ( !Array.isArray(array) && typeof array === 'object')\n    array = Object.keys(array)\n  if (!array)\n    array = [0, 1]\n  return array[get(array.length)]\n}\n","const directions = [ [-1, 0], [-1, -1], [0, -1], [1, -1], [1, 0], [1, 1], [0, 1], [-1, 1] ]\nconst [LEFT, UP_LEFT, UP, UP_RIGHT, RIGHT, DOWN_RIGHT, DOWN, DOWN_LEFT] = directions\nconst adjacentDirections = [LEFT, UP, RIGHT, DOWN]\n\nconst constants = { LEFT, RIGHT, UP, DOWN, UP_LEFT, UP_RIGHT, DOWN_LEFT, DOWN_RIGHT, directions, adjacentDirections }\nconst methods   = { toString, fromString, toIndex, fromIndex, isEqual, isEdge, isInside, getNeighbors, getManhattan }\n\nexport default Object.assign(constants, methods)\n\nfunction toString(cell) {\n  return cell.toString()\n}\n\nfunction fromString(string) {\n  return string.split(',').map(Number)\n}\n\nfunction toIndex(cell, size) {\n  let [x, y] = cell\n  return y * size + x\n}\n\nfunction fromIndex(index, size) {\n  let x = index % size\n  let y = (index - x) / size\n  return [x, y]\n}\n\nfunction isEqual(a, b) {\n  return a[0] === b[0] && a[1] === b[1]\n}\n\nfunction isEdge(cell, size) {\n  let [x, y] = cell\n  return x === 0 || y === 0 || x === size - 1 || y === size - 1\n}\n\nfunction isInside(cell, size) {\n  let [x, y] = cell\n  return x >= 0 && y >= 0 && x < size && y < size\n}\n\nfunction getNeighbors(cell, diagonals, step) {\n  if (!cell)\n    throw new TypeError(`Cannot get neighbors of cell '${cell}'`)\n  step = step || 1\n  let [x, y] = cell\n  let neighbors = []\n  let directions = adjacentDirections\n  if (diagonals)\n    directions = directions\n  for (let direction of directions) {\n    let [dx, dy] = direction\n    let current  = [x + dx * step, y + dy * step]\n    let [cx, cy] = current\n    neighbors.push( [cx, cy] )\n  }\n  return neighbors\n}\n\nfunction getManhattan(a, b) {\n  var [ax, ay] = a\n  var [bx, by] = b\n  return Math.abs(ax - bx) + Math.abs(ay - by)\n}\n","export default { toString, fromString, isEqual, isIntersecting, getCorners, getEdges, getBorder, getCenter, getCells }\n\nfunction toString(cell) {\n  return cell.toString()\n}\n\nfunction fromString(string) {\n  return string.split(',').map(Number)\n}\n\nfunction isEqual(a, b) {\n  var i = a.length\n  while (i--)\n    if (a[i] !== b[i])\n      return false\n  return true\n}\n\nfunction isIntersecting(a, b, exclusive) {\n  let [ ax, ay, aw, ah ] = a\n  let [ bx, by, bw, bh ] = b\n  if (exclusive)\n    ax--, ay--, aw += 2, ah += 2,\n    bx--, by--, bw += 2, bh += 2\n  return ax <= bx + bw && ay <= by + bh && ax + aw >= bx && ay + ah >= by\n}\n\nfunction getCorners(rect, exclusive) {\n  var [ x, y, w, h ] = rect\n  if (exclusive)\n    x--, y--, w += 2, h += 2\n  return [ [ x, y ], [ x + w, y ], [ x, y + h ], [ x + w, y + h ] ]\n}\n\nfunction getEdges(rect, exclusive) {\n  var edges = []\n  var [ x, y, w, h ] = rect\n  var r = x + w, b = y + h, i\n  if (exclusive)\n    x--, y--, w += 2, h += 2\n  for (i = x + 1; i < r; i++)\n    edges.push( [ i, y ], [ i, b ] )\n  for (i = y + 1; i < b; i++)\n    edges.push( [ x, i ], [ r, i ] )\n  return edges\n}\n\nfunction getBorder(rect, exclusive) {\n  return getEdges(rect, exclusive).concat( getCorners(rect, exclusive) )\n}\n\nfunction getCenter(rect) {\n  var x, y, w, h\n  if ( Array.isArray(rect) ) {\n    [x, y, w, h] = rect\n    if (rect.length == 2)\n      w = x, h = y, x = 0, y = 0\n  } else if ( !isNaN(rect) )\n    x = 0, y = 0, w = rect, h = rect\n  return [ Math.floor(x + w / 2), Math.floor(y + h / 2) ]\n}\n\nfunction getCells(rect) {\n  var cells = []\n  var [ rectX, rectY, rectWidth, rectHeight ] = rect\n  var i = rectWidth * rectHeight\n  while (i--) {\n    var x = i % rectWidth\n    var y = (i - x) / rectWidth\n    cells[i] = [x + rectX, y + rectY]\n  }\n  return cells\n}\n","import { Cell, Rect } from './index'\n\nconst [FLOOR, WALL, DOOR, DOOR_OPEN, STAIRS] = [0, 1, 2, 3, 4]\nconst tiles = [\n  {\n    name: 'floor',\n    walkable: true\n  },\n  {\n    name: 'wall',\n    opaque: true\n  },\n  {\n    name: 'door',\n    opaque: true,\n    door: true\n  },\n  {\n    name: 'door_open',\n    walkable: true,\n    door: true\n  },\n  {\n    name: 'stairs',\n    walkable: true,\n    stairs: true\n  }\n]\n\nlet costs = [0, Infinity, 2, 1, 0]\n\nconst constants = { FLOOR, WALL, DOOR, DOOR_OPEN, STAIRS, tiles, costs }\nconst methods   = { create, fill, clear, getAt, setAt, getSize, findPath, openDoor, closeDoor, toggleDoor }\nconst World     = Object.assign({}, constants, methods)\n\nexport default World\n\nlet sqrt = function (cache) {\n\n  cache = cache || {}\n\n  return function sqrt(num) {\n    let cached = cache[num]\n    if (cached)\n      return cached\n    let result = cache[num] = Math.sqrt(num)\n    return result\n  }\n\n}()\n\nfunction create(size) {\n  return new Uint8ClampedArray(size * size)\n}\n\nfunction fill(data, id, rect) {\n  if (typeof id === 'undefined')\n    id = WALL\n  let size = getSize(data)\n  if (rect) {\n    let cells = Rect.getCells(rect)\n    for (let cell of cells)\n      setAt(data, cell, id)\n  } else {\n    let i = data.length\n    while (i--)\n      data[i] = id\n  }\n  return data\n}\n\nfunction clear(data) {\n  fill(data, FLOOR)\n  return data\n}\n\nfunction getAt(data, cell) {\n  let size = getSize(data)\n  if ( !Cell.isInside(cell, size) )\n    return null\n  let index = Cell.toIndex(cell, size)\n  return data[index]\n}\n\nfunction setAt(data, cell, value) {\n  let size = getSize(data)\n  if ( !Cell.isInside(cell, size) )\n    return null\n  let index = Cell.toIndex(cell, size)\n  data[index] = value\n  return value\n}\n\nfunction getSize(data) {\n  return sqrt(data.length)\n}\n\nfunction findPath(data, start, goal, costs) {\n  costs = costs || World.costs\n\n  let path = []\n\n  let size = getSize(data)\n\n  let startId = start.toString()\n  let goalId  = goal.toString()\n\n  let opened = [startId]\n  let closed = {}\n\n  let scores = { f: {}, g: {} }\n  let parent = {}\n\n  let cells = data.reduce( (cells, id, index) => cells.concat( [ Cell.fromIndex(index, size) ] ), [] )\n  for (let cell of cells) {\n    scores.g[cell] = Infinity\n    scores.f[cell] = Infinity\n  }\n\n  scores.g[start] = 0\n  scores.f[start] = Cell.getManhattan(start, goal)\n\n  while (opened.length) {\n    if (opened.length > 1)\n      opened = opened.sort( (a, b) => scores.f[b] - scores.f[a] )\n    let cellId = opened.pop()\n    let cell = Cell.fromString(cellId)\n    if (cellId === goalId) {\n      let cell = goal\n      do {\n        path.unshift(cell)\n        cell = parent[cell]\n      } while (cell)\n      return path\n    }\n    closed[cell] = true\n    for ( let neighbor of Cell.getNeighbors(cell) ) {\n      if (!Cell.isInside(neighbor, size) || neighbor in closed)\n        continue\n      let cost = costs[ getAt(data, neighbor) ] || 0\n      if (cost === Infinity)\n        continue\n      let g = scores.g[cell] + 1 + cost\n      let id = neighbor.toString()\n      if ( !opened.includes(id) )\n        opened.push(id)\n      else if ( g >= scores.g[neighbor] )\n        continue\n      parent[neighbor] = cell\n      scores.g[neighbor] = g\n      scores.f[neighbor] = g + Cell.getManhattan(neighbor, goal)\n    }\n  }\n\n  return null\n\n}\n\nfunction openDoor(data, cell) {\n  data = data.slice()\n  let id = World.getAt(data, cell)\n  if (id === DOOR || id === DOOR_OPEN)\n    World.setAt(data, cell, DOOR_OPEN)\n  return data\n}\n\nfunction closeDoor(data, cell) {\n  data = data.slice()\n  let id = World.getAt(data, cell)\n  if (id === DOOR || id === DOOR_OPEN)\n    World.setAt(data, cell, DOOR)\n  return data\n}\n\nfunction toggleDoor(data, cell) {\n  data = data.slice()\n  let id = World.getAt(data, cell)\n  if (id === DOOR)\n    World.setAt(data, cell, DOOR_OPEN)\n  if (id === DOOR_OPEN)\n    World.setAt(data, cell, DOOR)\n  return data\n}\n","import { Cell, World } from './index'\n\nexport default { get }\n\nfunction get(data, start, range) {\n  let cells = []\n  let i = 8\n  while (i--)\n    cells = cells.concat( getOctant(data, start, range, i) )\n  cells.push(start)\n  return cells\n}\n\nfunction getOctant(data, start, range, octant) {\n  range = range || Infinity\n  let size = World.getSize(data)\n  let [x, y] = start\n  let cells = []\n  let shadows = []\n  let fullShadow = false\n  for (let row = 1; row <= range; row++) {\n    let [transformX, transformY] = transformOctant(row, 0, octant)\n    let cell = [x + transformX, y + transformY]\n    if ( !Cell.isInside(cell, size) )\n      break\n    for (let col = 0; col <= row; col++) {\n      let [transformX, transformY] = transformOctant(row, col, octant)\n      let cell = [x + transformX, y + transformY]\n      if ( !Cell.isInside(cell, size) )\n        break\n      if (!fullShadow) {\n        let projection = getProjection(row, col)\n        let visible = !shadows.find( shadow => shadow.start <= projection.start && shadow.end >= projection.end )\n        if (visible) {\n          cells.push(cell)\n          let id = World.getAt(data, cell)\n          if ( World.tiles[id].opaque ) {\n            let index\n            for (index = 0; index < shadows.length; index++)\n              if (shadows[index].start >= projection.start)\n                break\n            let prev = shadows[index - 1]\n            let next = shadows[index]\n            let overPrev = index > 0 && prev.end > projection.start\n            let overNext = index < shadows.length && next.start < projection.end\n            if (overNext)\n              if (overPrev) {\n                prev.end = next.end\n                shadows.splice(index, 1)\n              } else\n                next.start = projection.start\n            else\n              if (overPrev)\n                prev.end = projection.end\n              else\n                shadows.splice(index, 0, projection)\n            let shadow = shadows[0]\n            fullShadow = shadows.length === 1 && shadow.start === 0 && shadow.end === 1\n          }\n        }\n      }\n    }\n  }\n  return cells\n}\n\nfunction getProjection(row, col) {\n  let start = col / (row + 2)\n  let end   = (col + 1) / (row + 1)\n  return {start, end}\n}\n\nfunction transformOctant(row, col, octant) {\n  switch (octant) {\n    case 0: return [ col, -row]\n    case 1: return [ row, -col]\n    case 2: return [ row,  col]\n    case 3: return [ col,  row]\n    case 4: return [-col,  row]\n    case 5: return [-row,  col]\n    case 6: return [-row, -col]\n    case 7: return [-col, -row]\n  }\n}\n","import { Cell, World, FOV } from './index'\n\nexport default { create }\n\nfunction create(sprite) {\n\n  let path = null\n\n  function look() {\n    let cells = FOV.get(entity.world.data, entity.cell)\n    entity.seeing = {}\n    for (var cell of cells) {\n      entity.known[cell] = World.tiles[ World.getAt(entity.world.data, cell) ].name\n      entity.seeing[cell] = true\n    }\n  }\n\n  function move(direction) {\n    let moved = false\n    let world = entity.world\n    let [cellX, cellY] = entity.cell\n    let [distX, distY] = direction\n    let target = [cellX + distX, cellY + distY]\n    let id = World.getAt(world.data, target)\n    let tile = World.tiles[id]\n    if (tile.walkable) {\n      entity.cell = target\n      moved = true\n      look()\n    } else if (tile.door) {\n      world.data = World.openDoor(world.data, target)\n      moved = false\n      look()\n    }\n    return moved\n  }\n\n  function moveTo(target) {\n    if ( !path || path[path.length - 1] !== target )\n      path = World.findPath(entity.world.data, entity.cell, target)\n    if (!path)\n      return false\n    let next\n    path.some(function(cell, index) {\n      if ( !Cell.isEqual(entity.cell, cell) )\n        return\n      next = path[index + 1]\n      return true\n    })\n    if (!next)\n      return false\n    let [cellX, cellY] = entity.cell\n    let [nextX, nextY] = next\n    let dist = [nextX - cellX, nextY - cellY]\n    return entity.move(dist)\n  }\n\n  let props   = { sprite, seeing: [], known: {}, world: null, cell: null }\n  let methods = { look, move, moveTo }\n  let entity  = Object.assign({}, props, methods)\n\n  return entity\n}\n","import { Random, World, Cell, Rect } from './index'\n\nconst { FLOOR, WALL, DOOR, DOOR_OPEN, MARKER } = World\n\nexport default { createDungeon }\n\nfunction findRoom(min, max, worldSize) {\n  var w = Random.get((max - min) / 2 + 1) * 2 + min\n  var h = Random.get((max - min) / 2 + 1) * 2 + min\n  var x = Random.get((worldSize - w) / 2) * 2 + 1\n  var y = Random.get((worldSize - h) / 2) * 2 + 1\n  return [x, y, w, h]\n}\n\nfunction findRooms(data, maxRatio) {\n  maxRatio = maxRatio || 0.33\n  let size = World.getSize(data)\n  let area = size * size\n  let min = Math.round(size / 5)\n  let max = Math.round(size / 4)\n  let rooms = { cells: {}, edges: {}, rects: {}, list: [] }\n  let tries = 0\n  let total = 0\n  let valid\n  do {\n    let room = { cells: {}, edges: {}, rect: null, type: 'room' }\n    do {\n      valid = true\n      room.rect = findRoom(min, max, size)\n      for (let other of rooms.list)\n        if ( Rect.isIntersecting(room.rect, other.rect) ) {\n          valid = false\n          break\n        }\n    } while (!valid && ++tries < area)\n    if (valid) {\n      let rect  = room.rect\n      let cells = Rect.getCells(rect)\n      let edges = Rect.getEdges(rect, true)\n      for (let cell of cells)\n        rooms.cells[cell] = room.cells[cell] = room\n      for (let edge of edges) {\n        let sharedEdges = rooms.edges[edge] = room.edges[edge] = room.edges[edge] || []\n        sharedEdges.push(room)\n      }\n      rooms.rects[rect] = room\n      rooms.list.push(room)\n      total += cells.length\n    }\n  } while (valid && total / area < maxRatio)\n  return rooms\n}\n\nfunction findNodes(data) {\n  let size = World.getSize(data)\n  let nodes = new Set\n  let half = (size - 1) / 2\n  let i = half * half\n  while (i--) {\n    let [nodeX, nodeY] = Cell.fromIndex(i, half)\n    let node = [nodeX * 2 + 1, nodeY * 2 + 1]\n    if (World.getAt(data, node) === WALL)\n      nodes.add( node.toString() )\n  }\n  return nodes\n}\n\nfunction findMazes(data) {\n  let size = World.getSize(data)\n  let mazes = { cells: {}, ends: {}, list: [] }\n  let nodes = findNodes(data)\n  while (nodes.size) {\n    let maze = { cells: {}, ends: {}, type: 'maze' }\n    let start = Random.choose( [...nodes] )\n    let id    = Cell.fromString(start)\n    let stack = [id]\n    let track = [id]\n    let end   = true\n    mazes.ends[start] = maze.ends[start] = maze\n    while (stack.length) {\n      let node, [nodeX, nodeY] = node = stack.pop()\n      nodes.delete( node.toString() )\n      mazes.cells[node] = maze.cells[node] = maze\n      let neighbors = Cell.getNeighbors(node, false, 2).filter( (neighbor) => World.getAt(data, neighbor) === WALL && !(neighbor.toString() in maze.cells) )\n      if (neighbors.length) {\n        let neighbor = Random.choose(neighbors)\n        let [neighborX, neighborY] = neighbor\n        let [distX, distY] = [neighborX - nodeX, neighborY - nodeY]\n        let [stepX, stepY] = [ distX / (Math.abs(distX) || 1), distY / (Math.abs(distY) || 1) ]\n        let midpoint = [nodeX + stepX, nodeY + stepY]\n        mazes.cells[midpoint] = maze.cells[midpoint] = maze\n        stack.push(neighbor)\n        track.push(neighbor)\n        end = false\n      } else {\n        if (!end) {\n          mazes.ends[node] = maze.ends[node] = maze\n          end = true\n        }\n        if (track.length)\n          stack.push( track.pop() )\n      }\n    }\n    mazes.list.push(maze)\n  }\n  return mazes\n}\n\nfunction findConnectors(data, rooms, mazes) {\n  let connectors = {}\n  for (let id in rooms.edges) {\n    let cell = Cell.fromString(id)\n    let neighbors = Cell.getNeighbors(cell)\n    let regions = []\n    for (let neighbor of neighbors) {\n      let [x, y] = neighbor\n      if (x % 2 && y % 2 && World.getAt(data, neighbor) === FLOOR) {\n        let region = rooms.cells[neighbor] || mazes.cells[neighbor]\n        if (region)\n          regions.push(region)\n      }\n    }\n    if (regions.length === 2)\n      connectors[cell] = regions\n  }\n  return connectors\n}\n\nfunction findDoors(data, rooms, mazes) {\n\n  let disconnected = new Set(rooms.list)\n\n  let connectorRegions = findConnectors(data, rooms, mazes)\n  let start = Random.choose(rooms.list)\n  let stack = [start]\n  let track = [start] // Queue for backtracking\n  let total = [start] // Total list of regions\n  let doors = []      // Resulting doors\n\n  // Connectors store the `regions` they connect; get the one that's not `node`\n  function getNext(regions, node) {\n    for (let region of regions)\n      if (region !== node)\n        return region\n    return null\n  }\n\n  // Get the valid connectors of the specified `node`\n  function getConnectors(node) {\n    let connectors = {}\n    let prospects = []\n    // Normalize based on type\n    if (node.type === 'room') {\n      for (let id in node.edges)\n        if (id in connectorRegions)\n          prospects.push(id)\n    } else if (node.type === 'maze') {\n      for (let id in node.ends) {\n        let cell = Cell.fromString(id)\n        let neighbors = Cell.getNeighbors(cell).map(Cell.toString)\n        for (let neighbor of neighbors)\n          if (neighbor in connectorRegions)\n            prospects.push(neighbor)\n      }\n    }\n    for (let id of prospects) {\n      let regions = connectorRegions[id]\n      let next = getNext(regions, node)\n      if (next) {\n        let chance = Random.choose(25)\n        if ( chance || !total.includes(next) )\n          connectors[id] = next\n      }\n    }\n    return connectors\n  }\n\n  while (stack.length) {\n    let node = stack.pop()\n    if ( node.type === 'room' && disconnected.has(node) )\n      disconnected.delete(node)\n    let connectors = getConnectors(node)\n    let connectorKeys = Object.keys(connectors)\n    if (connectorKeys.length) {\n      let connector = Random.choose(connectorKeys)\n      // console.log(connector)\n      let next = connectors[connector]\n      if (next) {\n        // Remove extraneous connectors\n        for (let id in next.cells) {\n          let cell = Cell.fromString(id)\n          let neighbors = Cell.getNeighbors(cell)\n          for (let neighbor of neighbors) {\n            if ( neighbor in connectorRegions && connectorRegions[neighbor].includes(node) )\n              delete connectorRegions[neighbor]\n          }\n        }\n        doors.push(connector)\n        stack.push(next)\n        track.push(next)\n        total.push(next)\n      }\n    } else {\n      if (track.length)\n        stack.push( track.pop() )\n    }\n  }\n\n  for (let room of disconnected) {\n    let edges = Object.keys(room.edges).filter( (edge) => edge in connectorRegions )\n    if (edges.length) {\n      let edge = Random.choose(edges)\n      doors.push(edge)\n    }\n  }\n\n  return doors\n\n}\n\nfunction fillEnds(data, ends) {\n  let stack = Object.keys(ends).map(Cell.fromString)\n  while (stack.length) {\n    let cell = stack.pop()\n    let neighbors = Cell.getNeighbors(cell)\n    let escapes = []\n    for (let neighbor of neighbors) {\n      let id = World.getAt(data, neighbor)\n      if (id === FLOOR || id === DOOR)\n        escapes.push(neighbor)\n    }\n    if (escapes.length === 1) {\n      World.setAt(data, cell, WALL)\n      stack.push( escapes[0] )\n    }\n  }\n}\n\nfunction createDungeon(size) {\n\n  if (!size % 2)\n    throw new RangeError(`Cannot create dungeon of even size ${size}`)\n\n  let data = World.fill( World.create(size) )\n  let entities = new Set\n  let spawns = []\n\n  let rooms = findRooms(data)\n  for (let room of rooms.list)\n    for (let id in room.cells)\n      World.setAt(data, Cell.fromString(id), FLOOR)\n\n  let mazes = findMazes(data)\n  for (let maze of mazes.list)\n    for (let id in maze.cells)\n      World.setAt(data, Cell.fromString(id), FLOOR)\n\n  let doors = findDoors(data, rooms, mazes)\n  for (let id of doors)\n    World.setAt(data, Cell.fromString(id), DOOR)\n\n  fillEnds(data, mazes.ends)\n\n  while (spawns.length < 10) {\n    let room = Random.choose(rooms.list)\n    let cell = Random.choose(room.cells)\n    if ( !spawns.includes(cell) )\n      spawns.push(cell)\n  }\n  spawns = spawns.map(Cell.fromString)\n\n  function spawn(item, cell) {\n    if (!cell) {\n      let room = Random.choose(world.rooms.list)\n      cell = Cell.fromString( Random.choose(room.cells) )\n    }\n    if ( !isNaN(item) ) {\n      World.setAt(world.data, cell, item)\n    } else if (typeof item === 'object') {\n      item.world = world\n      item.cell  = cell\n      item.look()\n      entities.add(item)\n    }\n    return cell\n  }\n\n  let props   = { size, data, rooms, entities, spawns }\n  let methods = { spawn }\n\n  let world = Object.assign({}, props, methods)\n  return world\n\n}\n","import { Generator, World, Entity, Cell, Rect, Random } from './utils/index'\n\nconst WORLD_SIZE = 25\nconst {FLOOR, WALL, DOOR, DOOR_OPEN, STAIRS} = World\n\nconst sprites = {\n  none: {},\n  floor: {\n    char: String.fromCharCode(183),\n    color: 'olive'\n  },\n  wall: {\n    char: '#',\n    color: 'darkslategray'\n  },\n  door: {\n    char: '+',\n    color: 'sienna'\n  },\n  door_open: {\n    char: '/',\n    color: 'sienna'\n  },\n  stairs: {\n    char: '>',\n    color: 'white'\n  },\n  hero: {\n    char: '@',\n    color: 'white'\n  }\n}\n\nfunction generate() {\n  let world = Generator.createDungeon(WORLD_SIZE)\n  let hero = Entity.create(sprites.hero)\n  world.spawn(hero)\n  world.spawn(STAIRS)\n  return {world, hero}\n}\n\nnew Vue({\n  el: '#app',\n  data: generate,\n  methods: {\n    onclick: function (index) {\n      let {world, hero} = this\n      let cell = hero.cell\n      let targetX = index % WORLD_SIZE\n      let targetY = (index - targetX) / WORLD_SIZE\n      let target = [targetX, targetY]\n\n      if ( Cell.isEqual(cell, target) ) {\n        if (World.getAt(world.data, cell) === STAIRS) {\n          this.descend()\n        }\n        return\n      }\n\n      if ( !hero.known[target] )\n        return\n\n      function move() {\n        let moved = hero.moveTo(target)\n        if (moved)\n          window.requestAnimationFrame(move)\n      }\n      move()\n\n    },\n    ascend: function () {\n\n    },\n    descend: function () {\n      let generation = generate()\n      this.world = generation.world\n      this.hero  = generation.hero\n    }\n  },\n  computed: {\n    view: function () {\n      let {world, hero} = this\n      let view = []\n      world.data.forEach((id, index) => {\n        let cell = Cell.fromIndex(index, WORLD_SIZE)\n        let char = ' '\n        let color = 'gray'\n        let tile = hero.known[cell]\n        if (tile) {\n          let sprite = sprites[tile]\n          char = sprite.char\n          if ( hero.seeing[cell] )\n            color = sprite.color\n        }\n        view.push( {char, color} )\n      })\n      for (let entity of world.entities) {\n        let index = Cell.toIndex(entity.cell, WORLD_SIZE)\n        view[index] = entity.sprite\n      }\n      return view\n    }\n  },\n  mounted: function () {\n    this.$el.style.fontSize = `calc(100vmin / ${WORLD_SIZE})`\n  },\n  components: {\n    game: {\n      template: '#game-template',\n      props: ['view', 'onclick']\n    }\n  }\n})\n"],"names":["get","choose","min","max","a","arguments","length","Math","random","floor","array","Array","isArray","isNaN","Object","keys","directions","LEFT","UP_LEFT","UP","UP_RIGHT","RIGHT","DOWN_RIGHT","DOWN","DOWN_LEFT","adjacentDirections","constants","methods","toString","fromString","toIndex","fromIndex","isEqual","isEdge","isInside","getNeighbors","getManhattan","assign","cell","string","split","map","Number","size","x","y","index","b","diagonals","step","TypeError","neighbors","direction","dx","dy","current","cx","cy","push","ax","ay","bx","by","abs","isIntersecting","getCorners","getEdges","getBorder","getCenter","getCells","i","exclusive","aw","ah","bw","bh","rect","w","h","edges","r","concat","cells","rectX","rectY","rectWidth","rectHeight","FLOOR","WALL","DOOR","DOOR_OPEN","STAIRS","tiles","costs","Infinity","create","fill","clear","getAt","setAt","getSize","findPath","openDoor","closeDoor","toggleDoor","World","sqrt","cache","num","cached","result","Uint8ClampedArray","data","id","Rect","Cell","value","start","goal","path","startId","goalId","opened","closed","scores","f","g","parent","reduce","sort","cellId","pop","unshift","neighbor","cost","includes","slice","range","getOctant","octant","shadows","fullShadow","row","transformOctant","transformX","transformY","col","projection","getProjection","visible","find","shadow","end","opaque","prev","next","overPrev","overNext","splice","sprite","look","FOV","entity","world","seeing","known","name","move","moved","cellX","cellY","distX","distY","target","tile","walkable","door","moveTo","some","nextX","nextY","dist","props","createDungeon","findRoom","worldSize","Random","findRooms","maxRatio","area","round","rooms","rects","list","tries","total","valid","room","type","other","edge","sharedEdges","findNodes","nodes","Set","half","nodeX","nodeY","node","add","findMazes","mazes","ends","maze","stack","track","delete","filter","neighborX","neighborY","stepX","stepY","midpoint","findConnectors","connectors","regions","region","findDoors","disconnected","connectorRegions","doors","getNext","getConnectors","prospects","chance","has","connectorKeys","connector","fillEnds","escapes","RangeError","entities","spawns","spawn","item","WORLD_SIZE","sprites","String","fromCharCode","generate","Generator","hero","Entity","Vue","targetX","targetY","descend","window","requestAnimationFrame","generation","view","forEach","char","color","$el","style","fontSize"],"mappings":"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"}