{"version":3,"file":"build.js","sources":["../src/utils/cell.js","../src/utils/rect.js","../src/utils/diamond.js","../src/utils/circle.js","../src/utils/world.js","../src/utils/actor.js","../src/utils/item.js","../src/utils/ai.js","../src/utils/rng.js","../src/utils/dungeon.js","../src/utils/fov.js","../src/utils/game.js","../src/utils/display.js","../src/index.js"],"sourcesContent":["const directions = {\n  LEFT:       [-1,  0],\n  UP_LEFT:    [-1, -1],\n  UP:         [ 0, -1],\n  UP_RIGHT:   [ 1, -1],\n  RIGHT:      [ 1,  0],\n  DOWN_RIGHT: [ 1,  1],\n  DOWN:       [ 0,  1],\n  DOWN_LEFT:  [-1,  1]\n}\nconst { LEFT, UP_LEFT, UP, UP_RIGHT, RIGHT, DOWN_RIGHT, DOWN, DOWN_LEFT } = directions\nconst cardinalDirections = { LEFT, UP, RIGHT, DOWN }\n\nexport default {\n  directions, cardinalDirections,\n  isCell, isEqual, isEdge, isInside, isNeighbor, toString, fromString, toIndex, fromIndex, getNeighbors, getManhattan, getDistance\n}\n\nfunction isCell(value) {\n  return value && Array.isArray(value) && value.length === 2 && !value.filter(value => isNaN(value) || typeof value !== 'number').length\n}\n\nfunction isEqual(a, b) {\n  return a[0] === b[0] && a[1] === b[1]\n}\n\nfunction isEdge(cell, size) {\n  let [x, y] = cell\n  let rect = [0, 0, size, size]\n  if (Array.isArray(size))\n    rect = size\n  let [rectX, rectY, rectWidth, rectHeight] = rect\n  return isInside(cell, size) && (x === rectX || x === rectX + rectWidth - 1 || y === rectY || y === rectY + rectHeight - 1)\n}\n\nfunction isInside(cell, size) {\n  let [x, y] = cell\n  let rect = [0, 0, size, size]\n  if (Array.isArray(size))\n    rect = size\n  let [rectX, rectY, rectWidth, rectHeight] = rect\n  return x >= rectX && y >= rectY && x < rectX + rectWidth && y < rectY + rectHeight\n}\n\nfunction isNeighbor(cell, other) {\n  let [cx, cy] = cell\n  let [ox, oy] = other\n  let dx = Math.abs(ox - cx)\n  let dy = Math.abs(oy - cy)\n  return (!dx || dx === 1) && (!dy || dy === 1)\n}\n\nfunction toString(cell) {\n  return cell.toString()\n}\n\nfunction fromString(string) {\n  return string.split(',').map(Number)\n}\n\nfunction toIndex(cell, size) {\n  let [x, y] = cell\n  return y * size + x\n}\n\nfunction fromIndex(index, size) {\n  let x = index % size\n  let y = (index - x) / size\n  return [x, y]\n}\n\nfunction getNeighbors(cell, diagonals, step) {\n  if (!isCell(cell))\n    throw new TypeError(`Cannot get neighbors of cell '${cell}'`)\n  step = step || 1\n  let [x, y] = cell\n  let neighbors = []\n  let dirs = cardinalDirections\n  if (diagonals)\n    dirs = directions\n  for (let key in dirs) {\n    let [dx, dy] = dirs[key]\n    let current  = [x + dx * step, y + dy * step]\n    let [cx, cy] = current\n    neighbors.push( [cx, cy] )\n  }\n  return neighbors\n}\n\nfunction getManhattan(a, b) {\n  let [ax, ay] = a\n  let [bx, by] = b\n  return Math.abs(ax - bx) + Math.abs(ay - by)\n}\n\nfunction getDistance(a, b, sqrt) {\n  if (typeof sqrt === 'undefined')\n    sqrt = true\n  let [ax, ay] = a\n  let [bx, by] = b\n  let [dx, dy] = [bx - ax, by - ay]\n  let squared  = dx * dx + dy * dy\n  if (sqrt)\n    return Math.sqrt(squared)\n  return squared\n}\n","export default { toString, fromString, isEqual, isIntersecting, getCorners, getEdges, getBorder, getCenter, getCells }\n\nfunction toString(cell) {\n  return cell.toString()\n}\n\nfunction fromString(string) {\n  return string.split(',').map(Number)\n}\n\nfunction isEqual(a, b) {\n  var i = a.length\n  while (i--)\n    if (a[i] !== b[i])\n      return false\n  return true\n}\n\nfunction isIntersecting(a, b, exclusive) {\n  let [ ax, ay, aw, ah ] = a\n  let [ bx, by, bw, bh ] = b\n  if (exclusive)\n    ax--, ay--, aw += 2, ah += 2,\n    bx--, by--, bw += 2, bh += 2\n  return ax <= bx + bw && ay <= by + bh && ax + aw >= bx && ay + ah >= by\n}\n\nfunction getCorners(rect, exclusive) {\n  var [ x, y, w, h ] = rect\n  if (exclusive)\n    x--, y--, w += 2, h += 2\n  return [ [x, y], [x + w - 1, y], [x, y + h - 1], [x + w - 1, y + h - 1] ]\n}\n\nfunction getEdges(rect, exclusive) {\n  var edges = []\n  var [ x, y, w, h ] = rect\n  var r = x + w, b = y + h, i\n  if (exclusive)\n    x--, y--, w += 2, h += 2\n  for (i = x + 1; i < r; i++)\n    edges.push( [ i, y ], [ i, b ] )\n  for (i = y + 1; i < b; i++)\n    edges.push( [ x, i ], [ r, i ] )\n  return edges\n}\n\nfunction getBorder(rect, exclusive) {\n  return getEdges(rect, exclusive).concat( getCorners(rect, exclusive) )\n}\n\nfunction getCenter(rect) {\n  var x, y, w, h\n  if ( Array.isArray(rect) ) {\n    [x, y, w, h] = rect\n    if (rect.length == 2)\n      w = x, h = y, x = 0, y = 0\n  } else if ( !isNaN(rect) )\n    x = 0, y = 0, w = rect, h = rect\n  return [ Math.floor(x + w / 2), Math.floor(y + h / 2) ]\n}\n\nfunction getCells(rect) {\n  var cells = []\n  var [ rectX, rectY, rectWidth, rectHeight ] = rect\n  var i = rectWidth * rectHeight\n  while (i--) {\n    var x = i % rectWidth\n    var y = (i - x) / rectWidth\n    cells[i] = [x + rectX, y + rectY]\n  }\n  return cells\n}\n","import { Cell } from './index'\n\nlet cache = {}\n\nexport default { getCells, getEdges, getCenter }\n\nfunction cellsFromObject(obj) {\n  return Object.keys(obj).map( key => key.split(',').map(Number) )\n}\n\nfunction cacheDiamond(diamond) {\n\n  let [x, y, radius] = diamond\n\n  let start = [x, y]\n  let stack = [start]\n  let cells = { [start]: 0 }\n  let edges = {}\n  let doors = {}\n\n  while (stack.length) {\n    let node = stack.pop()\n    let nexts = Cell.getNeighbors(node).filter( neighbor => !(neighbor.toString() in cells) )\n    for (let next of nexts) {\n      let steps = cells[node] + 1\n      if (steps <= radius) {\n        cells[next] = steps\n        stack.unshift(next)\n      } else\n        edges[next] = steps\n    }\n  }\n\n  cells = cellsFromObject(cells)\n  edges = cellsFromObject(edges)\n\n  return { cells, edges, center: start }\n\n}\n\nfunction getCached(diamond) {\n  let cached = cache[diamond]\n  if (!cached)\n    cached = cache[diamond] = cacheDiamond(diamond)\n  return cached\n}\n\nfunction getCells(diamond) {\n  return getCached(diamond).cells\n}\n\nfunction getEdges(diamond) {\n  return getCached(diamond).edges\n}\n\nfunction getCenter(diamond) {\n  return getCached(diamond).center\n}\n","import { Cell } from './index'\n\nlet cache = {}\n\nexport default { getCells, getEdges, getCenter }\n\nfunction parse(circle) {\n\n  let [x, y, radius] = circle\n  let start = [x, y]\n\n  let cells = {}\n  let edges = {}\n\n  let edgeRadius = radius + 1\n  let edgeMax = edgeRadius * edgeRadius\n\n  let max  = radius * radius\n  let size = edgeRadius * 2 + 1\n  let area = size * size\n  let i = area\n  while (i--) {\n    let [cx, cy] = Cell.fromIndex(i, size)\n    let cell = [cx + x - edgeRadius, cy + y - edgeRadius]\n    let dist = Cell.getDistance(cell, start, false)\n    if (dist > max) {\n      if (dist > edgeMax && !(cell in cells))\n        continue\n      edges[cell] = true\n      continue\n    }\n    cells[cell] = true\n  }\n\n  cells = Object.keys(cells).map(Cell.fromString)\n  edges = Object.keys(edges).map(Cell.fromString)\n\n  return { cells, edges, center: start }\n\n}\n\nfunction getCached(circle) {\n  let cached = cache[circle]\n  if (!cached)\n    cached = cache[circle] = parse(circle)\n  return cached\n}\n\nfunction getCells(circle) {\n  return getCached(circle).cells\n}\n\nfunction getEdges(circle) {\n  return getCached(circle).edges\n}\n\nfunction getCenter(circle) {\n  return getCached(circle).center\n}\n","import { Cell } from './index'\n\nconst tileData = [\n  'floor walkable',\n  'wall opaque',\n  'door opaque door',\n  'doorOpen walkable door',\n  'doorSecret opaque door secret',\n  'entrance walkable stairs',\n  'exit walkable stairs'\n]\n\nconst tiles = function (tileData) {\n  let tiles = []\n  let i = tileData.length\n  while (i--) {\n    let tile = tiles[i] = { type: 'tile', id: i }\n    let [kind, ...props] = tileData[i].split(' ')\n    tile.kind = kind\n    for (let prop of props)\n      tile[prop] = true\n  }\n  return tiles\n}(tileData)\n\nconst tileNames = Object.keys(tiles)\n\nconst tileIds = function (tiles) {\n  let tileIds = {}\n  let i = 0\n  for (let tile of tiles) {\n    let id = tile.kind.split('').reduce((result, char, index) => {\n      let CHAR = char.toUpperCase()\n      if (char === CHAR || !index)\n        result[result.length] = ''\n      result[result.length - 1] += CHAR\n      return result\n    }, []).join('_')\n    tileIds[id] = i\n    i++\n  }\n  return tileIds\n}(tiles)\n\nconst tileCosts = function (tiles) {\n  let tileCosts = []\n  for (let tile of tiles) {\n    let cost = 0\n    if (!tile.walkable && !tile.door)\n      cost = Infinity\n    if (tile.secret)\n      cost = 1000\n    if (tile.door) {\n      cost++\n      if (!tile.walkable)\n        cost++\n    }\n    tileCosts.push(cost)\n  }\n  return tileCosts\n}(tiles)\n\nconst { FLOOR, WALL, DOOR, DOOR_OPEN, DOOR_SECRET, ENTRANCE, EXIT } = tileIds\n\nexport default {\n  tiles, tileNames, tileIds, tileCosts,\n  create\n}\n\nfunction create(size) {\n\n  let area = size * size\n  let data = new Uint8ClampedArray(area)\n\n  let world = {\n    size, data, elements: new Set, entrance: null, exit: null,\n    getAt, tileAt, elementsAt, setAt, fill, clear, spawn, kill, findPath, findStep\n  }\n\n  return world\n\n  function getAt(cell) {\n    if (!Cell.isInside(cell, size))\n      return null\n    let index = Cell.toIndex(cell, size)\n    return data[index]\n  }\n\n  function tileAt(cell) {\n    return tiles[getAt(cell)]\n  }\n\n  function elementsAt(cell) {\n    return [...world.elements].filter(element => Cell.isEqual(cell, element.cell))\n  }\n\n  function setAt(cell, value) {\n    if (!Cell.isInside(cell, size))\n      return null\n    let index = Cell.toIndex(cell, size)\n    data[index] = value\n    return value\n  }\n\n  function fill(rect, value) {\n\n    if (!Array.isArray(rect))\n      rect = [0, 0, size, size]\n\n    if (isNaN(value))\n      value = WALL\n\n    let [rectX, rectY, rectWidth, rectHeight] = rect\n\n    let area = rectWidth * rectHeight\n\n    let i = area\n    while (i--) {\n      let [x, y] = Cell.fromIndex(i, rectWidth)\n      let index  = Cell.toIndex([x + rectX, y + rectY], size)\n      data[index] = value\n    }\n\n    return world\n\n  }\n\n  function clear(rect) {\n    return world\n  }\n\n  function spawn(element, cell) {\n    element.world = world\n    element.cell  = cell\n    world.elements.add(element)\n  }\n\n  function kill(element) {\n    return world.elements.delete(element)\n  }\n\n  function findPath(start, goal, costs, diagonals) {\n\n    if (!costs)\n      costs = {}\n\n    if (!costs.tiles)\n      costs.tiles = tileCosts\n\n    if (!costs.cells)\n      costs.cells = {}\n\n    let path = []\n\n    let startKey = start.toString()\n    let goalKey  = goal.toString()\n\n    let opened = [startKey]\n    let closed = {}\n\n    let scores = { f: {}, g: {} }\n    let parent = {}\n\n    let cells = data.map((id, index) => Cell.fromIndex(index, size))\n    for (let cell of cells) {\n      scores.g[cell] = Infinity\n      scores.f[cell] = Infinity\n    }\n\n    scores.g[start] = 0\n    scores.f[start] = Cell.getManhattan(start, goal)\n\n    while (opened.length) {\n      if (opened.length > 1)\n        opened = opened.sort( (a, b) => scores.f[b] - scores.f[a] )\n      let cellKey = opened.pop()\n      let cell = Cell.fromString(cellKey)\n      if (cellKey === goalKey) {\n        let cell = goal\n        do {\n          path.unshift(cell)\n          cell = parent[cell]\n        } while (cell)\n        return path\n      }\n      closed[cell] = true\n      for ( let neighbor of Cell.getNeighbors(cell, diagonals) ) {\n        if (!Cell.isInside(neighbor, size) || neighbor in closed)\n          continue\n        let key = neighbor.toString()\n        let tileCost = costs.tiles[getAt(neighbor)] || 0\n        let cellCost = costs.cells[neighbor] || 0\n        let cost = tileCost + cellCost\n        if (cost === Infinity && key !== goalKey)\n          continue\n        let g = scores.g[cell] + 1 + cost\n        if ( !opened.includes(key) )\n          opened.push(key)\n        else if ( g >= scores.g[neighbor] )\n          continue\n        parent[neighbor] = cell\n        scores.g[neighbor] = g\n        scores.f[neighbor] = g + Cell.getManhattan(neighbor, goal)\n      }\n    }\n\n    return null\n\n  }\n\n  function findStep(path, cell) {\n    if (!path)\n      return null\n    let next, index = 0\n    do {\n      next = path[index++]\n    } while (next && !Cell.isEqual(cell, next))\n    next = path[index]\n    if (!next)\n      return null\n    let [cx, cy] = cell\n    let [nx, ny] = next\n    let step = [nx - cx, ny - cy]\n    return step\n  }\n\n}\n","import { Cell, FOV, World } from './index'\n\nconst { DOOR, DOOR_OPEN, ENTRANCE, EXIT } = World.tileIds\n\nexport default { create }\n\nfunction create(options) {\n\n  let actor = {\n    kind: null,\n    faction: null,\n    speed: 1 / 2,\n    intel: 1 / 2,\n    vision: 7\n  }\n\n  Object.assign(actor, options, {\n    type: 'actor', world: null, cell: null, path: null, energy: 0, health: 1, known: {}, seeing: {},\n    perform, move, attack, collect, open, descend, ascend, look\n  })\n\n  return actor\n\n  function perform(action) {\n    let { kind, data } = action\n    switch (kind) {\n      case 'move':    return move(...data)\n      case 'attack':  return attack(...data)\n      case 'collect': return collect(...data)\n      case 'open':    return open(...data)\n      case 'close':   return close(...data)\n      case 'descend': return descend(...data)\n      case 'ascend':  return ascend(...data)\n      case 'wait':    return true\n    }\n    throw new TypeError(`Unrecognized action kind: ${kind}`)\n    return null\n  }\n\n  function move(direction) {\n    if (!actor.cell)\n      throw new TypeError(`Cannot move actor ${actor.kind} of cell ${actor.cell}`)\n    let [cx, cy] = actor.cell\n    let [dx, dy] = direction\n    let target = [cx + dx, cy + dy]\n    let tile = actor.world.tileAt(target)\n    if (!tile.walkable)\n      if (tile.door && actor.intel >= 1 / 2)\n        return target // Tile is a door\n      else\n        return false // Can't move to that tile\n    let elements = actor.world.elementsAt(target)\n    let other = elements.find(element => element.type === 'actor')\n    if (other)\n      return other // There's another actor in the way (sort?)\n    actor.cell = target\n    let item = elements.find(element => element.type === 'item')\n    if (item)\n      return item // There's an item on the ground.\n    return true // Successfully moved with no complications\n  }\n\n  function attack(target) {\n    if (!target || target.type !== 'actor' || !Cell.isNeighbor(actor.cell, target.cell))\n      return false\n    target.health--\n    if (target.health <= 0) {\n      target.health = 0\n      target.world.kill(target)\n      target.world.spawn({\n        type: 'sprite',\n        kind: 'corpse',\n        origin: target.kind\n      }, target.cell)\n    }\n    return true // This action cannot fail\n  }\n\n  function collect(target) {\n    target.world.kill(target)\n  }\n\n  function open(target) {\n    if (!Cell.isCell(target) || !Cell.isNeighbor(actor.cell, target))\n      return false\n    let tile = actor.world.tileAt(target)\n    if (!tile.door)\n      return false\n    actor.world.setAt(target, DOOR_OPEN)\n    return true\n  }\n\n  function close(target) {\n    if (!target) {\n      let neighbors = Cell.getNeighbors(actor.cell, true).filter(neighbor => actor.world.getAt(neighbor) === DOOR_OPEN)\n      if (!neighbors.length)\n        return false\n      for (let neighbor of neighbors)\n        actor.world.setAt(neighbor, DOOR)\n      return true\n    } else {\n      if (!Cell.isCell(target) || !Cell.isNeighbor(actor.cell, target))\n        return false\n      let tile = actor.world.tileAt(target)\n      if (!tile.door)\n        return false\n      actor.world.setAt(target, DOOR)\n      return true\n    }\n  }\n\n  function descend() {\n    let id = actor.world.getAt(actor.cell)\n    if (id === EXIT)\n      return true\n    return false\n  }\n\n  function ascend() {\n    let id = actor.world.getAt(actor.cell)\n    if (id === ENTRANCE)\n      return true\n    return false\n  }\n\n  function look() {\n    let cells = FOV.get(actor.world, actor.cell, actor.vision)\n    actor.seeing = {}\n    if (!actor.known[actor.worldId])\n      actor.known[actor.worldId] = {}\n    for (var cell of cells) {\n      let kind = actor.world.tileAt(cell).kind\n      let other = actor.world.elementsAt(cell)[0]\n      if (other)\n        kind = other.kind\n      actor.known[actor.worldId][cell] = kind\n      actor.seeing[cell] = true\n    }\n  }\n\n}\n","export default { create }\n\nfunction create(options) {\n\n  let item = {\n    kind: null,\n    value: 0\n  }\n\n  Object.assign(item, options, {\n    type: 'item'\n  })\n\n  return item\n\n}\n","import { Cell } from './index'\n\nexport default { create }\n\nfunction create(rng) {\n\n  return { getAction }\n\n  function getAction(actor) {\n    if (!actor.goal || Cell.isEqual(actor.cell, actor.goal)) {\n      let cells = [...actor.world.rooms.list].filter(room => !room.secret).reduce((cells, room) => cells.concat(room.cells), []).filter(cell => !Cell.isEqual(actor.cell, cell))\n      actor.goal = rng.choose(cells)\n      actor.path = actor.world.findPath(actor.cell, actor.goal)\n    }\n    let step = actor.world.findStep(actor.path, actor.cell)\n    if (!step)\n      return null\n    return { type: 'action', kind: 'move', data: [step] }\n  }\n\n}\n","let RNG = create()\nRNG.create = create\n\nexport default RNG\n\nfunction create(initialSeed) {\n\n  if (isNaN(initialSeed))\n    initialSeed = Math.random() * 10000\n\n  let currentSeed = initialSeed\n\n  return { get, choose, seed }\n\n  function get(min, max) {\n    var a = arguments.length\n    if (a === 0) {\n      let x = Math.sin(currentSeed++) * 10000\n      return x - Math.floor(x)\n    } else if (a === 1) {\n      if (!isNaN(min))\n        max = min, min = 0\n      else if (Array.isArray(min))\n        [min, max] = min\n    }\n    if (min > max)\n      [min, max] = [max, min]\n    return Math.floor(get() * (max - min)) + min\n  }\n\n  function choose(array) {\n    if (Array.isArray(array) && !array.length)\n      return null\n    if (!isNaN(array))\n      return !get(array)\n    if (!array)\n      array = [0, 1]\n    return array[get(array.length)]\n  }\n\n  function seed(newSeed) {\n    if (!isNaN(newSeed))\n      initialSeed = currentSeed = newSeed\n    return currentSeed\n  }\n\n}\n","import { RNG, Cell, Rect, Diamond, Circle, World, Actor, Item } from './index'\n\nlet rng = RNG.create()\n\nconst { FLOOR, WALL, DOOR, DOOR_OPEN, DOOR_SECRET, ENTRANCE, EXIT } = World.tileIds\n\nexport default { create }\n\nfunction create(size, seed, hero) {\n\n  if (size % 2 === 0)\n    throw new RangeError(`Cannot create dungeon of even size '${size}'`)\n\n  if (!isNaN(seed)) {\n    rng.seed(seed)\n  } else {\n    rng = seed\n    seed = rng.seed()\n  }\n\n  let world = World.create(size).fill()\n\n  let cells = []\n  let rooms = findRooms(size)\n  let mazes = findMazes(size, rooms)\n  let doors = findDoors(rooms, mazes)\n  fillEnds(mazes)\n\n  for (let room of rooms.list)\n    for (let cell of room.cells) {\n      cells.push(cell)\n      world.setAt(cell, FLOOR)\n    }\n\n  for (let maze of mazes.list)\n    for (let cell of maze.cells) {\n      cells.push(cell)\n      world.setAt(cell, FLOOR)\n    }\n\n  for (let cellId in doors.regions) {\n    let cell = Cell.fromString(cellId)\n    let type = DOOR\n    let regions = doors.regions[cellId]\n    let room = regions.sort((a, b) => a.neighbors.size - b.neighbors.size)[0]\n    let neighbors = Cell.getNeighbors(cell).filter(neighbor => neighbor in mazes.ends)\n    if (!neighbors.length && room.neighbors.size === 1 && rng.choose()) {\n      type = DOOR_SECRET\n      room.secret = true\n    } else if (rng.choose())\n      type = FLOOR\n    world.setAt(cell, type)\n  }\n\n  let entrance = spawn(ENTRANCE, 'center')\n  let exit     = spawn(EXIT, 'center')\n\n  let enemies = rng.get(3, 5 + 1)\n  while (enemies--)\n    spawn(Actor.create({ kind: 'beast', faction: 'monsters', speed: 3 / 8 }))\n\n  let items = rng.get(6, 10 + 1)\n  while (items--)\n    spawn(Item.create({ kind: 'item' }))\n\n  let secretRooms = rooms.list.filter(room => room.secret)\n  for (let room of secretRooms) {\n    let cells = new Set(room.cells.filter(cell => world.getAt(cell) === FLOOR && !world.elementsAt(cell).length).map(Cell.toString))\n    if (!cells.size)\n      continue\n    while (cells.size) {\n      let cellId = rng.choose([...cells])\n      cells.delete(cellId)\n      if (rng.choose(3)) {\n        let cell = Cell.fromString(cellId)\n        let item = Item.create({ kind: 'item' })\n        spawn(item, cell)\n      }\n    }\n  }\n\n  Object.assign(world, { cells, rooms, entrance, exit })\n\n  return world\n\n  function spawn(element, cell) {\n    let center\n    if (cell === 'center') {\n      cell = null\n      center = true\n    }\n    if (!cell) {\n      let valid = rooms.list.filter(room => !room.secret)\n      let cells\n      if (center)\n        cells = valid.map(room => room.center)\n      else\n        cells = valid.reduce((cells, room) => cells.concat(room.cells), [])\n      cells = cells.filter(cell => world.getAt(cell) === FLOOR && !world.elementsAt(cell).length)\n      cell = rng.choose(cells)\n    }\n    if (element) {\n      if (!isNaN(element))\n        world.setAt(cell, element)\n      else\n        world.spawn(element, cell)\n    }\n    return cell\n  }\n\n}\n\nfunction findNodes(size, invalid, cells) {\n\n  let nodes = []\n\n  function isInvalid(cell) {\n    return invalid && (cell in invalid || Cell.getNeighbors(cell, true).filter(neighbor => neighbor in invalid).length)\n  }\n\n  let i = size * size\n  while (i--) {\n    let cell, [x, y] = cell = Cell.fromIndex(i, size)\n    if (x % 2 === 0 || y % 2 === 0 || isInvalid(cell))\n      continue\n    if (cells) {\n      let translated = cells.map(cell => [cell[0] + x, cell[1] + y])\n      let intersecting = translated.filter(cell => !Cell.isInside(cell, size) || Cell.isEdge(cell, size) || isInvalid(cell))\n      if (intersecting.length)\n        continue\n    }\n    nodes.push(cell)\n  }\n\n  return nodes\n}\n\nfunction findRooms(size) {\n\n  let area = size * size\n\n  let rooms = { cells: {}, edges: {}, list: [] }\n\n  let min = 3, max = 7\n  let total = 0\n  let ratio\n\n  do {\n\n    let kind, matrix, cells, edges, nodes\n    let fails = 0\n    let failsMax = size\n\n    do {\n\n      kind = 'rect'\n      if (rng.choose(10))\n        kind = 'diamond'\n      else if (rng.choose(20))\n        kind = 'circle'\n\n      if (kind === 'rect') {\n        let size, [width, height] = size = [rng.get((max - min) / 2 + 1) * 2 + min, rng.get((max - min) / 2 + 1) * 2 + min]\n        matrix = [0, 0, ...size]\n        cells = Rect.getCells(matrix)\n      } else if (kind === 'diamond') {\n        let radius = rng.choose([2, 3, 4])\n        matrix = [radius, radius, radius]\n        cells = Diamond.getCells(matrix)\n      } else if (kind === 'circle') {\n        let radius = rng.choose([3, 4])\n        matrix = [radius, radius, radius]\n        cells = Circle.getCells(matrix)\n      }\n\n      nodes = findNodes(size, Object.assign({}, rooms.cells, rooms.edges), cells)\n\n      if (nodes.length)\n        break\n\n      fails++\n\n    } while (fails < failsMax)\n\n    if (!nodes.length)\n      break\n\n    let [x, y] = rng.choose(nodes)\n    matrix[0] += x\n    matrix[1] += y\n\n    let center\n    if (kind === 'rect') {\n      cells  = Rect.getCells(matrix)\n      edges  = Rect.getEdges(matrix, true)\n      center = Rect.getCenter(matrix)\n    } else if (kind === 'diamond') {\n      cells  = Diamond.getCells(matrix)\n      edges  = Diamond.getEdges(matrix)\n      center = [x, y] = matrix\n    } else if (kind === 'circle') {\n      cells  = Circle.getCells(matrix)\n      edges  = Circle.getEdges(matrix)\n      center = [x, y] = matrix\n    }\n\n    let room = { type: 'room', kind, matrix, cells, edges, center }\n\n    for (let cell of cells)\n      rooms.cells[cell] = room\n\n    for (let cell of edges)\n      rooms.edges[cell] = room\n\n    rooms.list.push(room)\n\n    total += cells.length\n    ratio = total / area\n\n  } while (ratio < 0.33)\n\n  return rooms\n\n}\n\nfunction findMazes(size, rooms) {\n\n  let mazes = { cells: {}, ends: {}, list: [] }\n  let nodes = new Set(findNodes(size, rooms.cells).map(Cell.toString))\n\n  let step = 2\n\n  while (nodes.size) {\n\n    let maze = { type: 'maze', cells: [], ends: [] }\n\n    let start = Cell.fromString(rng.choose([...nodes]))\n    let stack = [start]\n    let backtracking = false\n\n    while (stack.length) {\n\n      let cell = stack[stack.length - 1]\n      mazes.cells[cell] = maze\n      maze.cells.push(cell)\n      nodes.delete(cell.toString())\n\n      let neighbors = Cell.getNeighbors(cell, false, step).filter(neighbor => nodes.has(neighbor.toString()))\n\n      if (neighbors.length) {\n        let neighbor = rng.choose(neighbors)\n        let [cx, cy] = cell\n        let [nx, ny] = neighbor\n        let midpoint = [cx + (nx - cx) / step, cy + (ny - cy) / step]\n        mazes.cells[midpoint] = maze\n        maze.cells.push(midpoint)\n        stack.push(neighbor)\n        if (cell === start && !backtracking) {\n          mazes.ends[cell] = maze\n          maze.ends.push(cell)\n        }\n        backtracking = false\n      } else {\n        if (!backtracking) {\n          mazes.ends[cell] = maze\n          maze.ends.push(cell)\n        }\n        backtracking = true\n        stack.pop()\n      }\n\n    }\n\n    mazes.list.push(maze)\n\n  }\n\n  return mazes\n\n}\n\nfunction findDoors(rooms, mazes) {\n  let connectorRegions = getConnectors(rooms, mazes)\n\n  let start = rng.choose(rooms.list)\n  let stack = [start]\n  let doors = {}\n  let main  = new Set\n  let dead  = new Set\n\n  let regions = rooms.list.concat(mazes.list)\n  for (let region of regions) {\n    region.neighbors = new Map\n    region.doors = {}\n  }\n\n  while (stack.length) {\n    let node = stack[stack.length - 1]\n    main.add(node)\n\n    let connectors\n    if (node.type === 'room')\n      connectors = node.edges.filter(cell => {\n        if (!(cell in connectorRegions))\n          return false\n        let next = connectorRegions[cell].find(region => region !== node)\n        return !dead.has(next) && next.cells.length > 1\n      })\n    else if (node.type === 'maze')\n      connectors = node.cells.reduce((result, cell) => {\n        return result.concat(Cell.getNeighbors(cell).filter(neighbor => neighbor in connectorRegions))\n      }, [])\n\n    connectors = connectors.filter(cell => {\n      let next = connectorRegions[cell].find(region => region !== node)\n      let nearby = Cell.getNeighbors(cell, true).filter(neighbor => neighbor in doors)\n      return !(cell in doors) && !node.neighbors.has(next) && (!main.has(next) || rng.choose(3)) && !nearby.length\n    })\n\n    let connectorIds = connectors.map(Cell.toString)\n\n    if (connectors.length) {\n      let door = rng.choose(connectors)\n      let regions = connectorRegions[door]\n      let next = regions.find(region => region !== node)\n      for (let cell of next.cells) {\n        Cell.getNeighbors(cell).forEach(neighbor => {\n          if (connectorIds.includes(neighbor.toString())) {\n            delete connectorRegions[neighbor]\n          }\n        })\n      }\n      stack.push(next)\n      doors[door] = regions\n      main.add(node)\n      connect(node, next, door)\n    } else {\n      stack.pop()\n      if (node.type === 'maze' && node.neighbors.size === 1) {\n        let next = node.neighbors.entries().next().value[0]\n        let cell = node.neighbors.get(next)\n        delete doors[cell]\n        disconnect(node, next)\n        main.delete(node)\n        dead.add(node)\n      }\n    }\n  }\n\n  doors = {\n    regions: doors,\n    list: Object.keys(doors).map(Cell.fromString)\n  }\n\n  return doors\n\n}\n\nfunction getConnectors(rooms, mazes) {\n  let connectorRegions = {}\n  Object.keys(rooms.edges)\n    .map(Cell.fromString)\n    .forEach(edge => {\n      let regions = new Set(Cell.getNeighbors(edge)\n        .filter(neighbor => neighbor in rooms.cells || neighbor in mazes.cells)\n           .map(neighbor =>   rooms.cells[neighbor] || mazes.cells[neighbor]  ))\n      if (regions.size >= 2)\n        connectorRegions[edge] = [...regions]\n    })\n  return connectorRegions\n}\n\nfunction connect(node, next, door) {\n  connectOne(node, next, door)\n  connectOne(next, node, door)\n}\n\nfunction connectOne(node, next, door) {\n  node.neighbors.set(next, door)\n  node.doors[door] = next\n}\n\nfunction disconnect(node, next) {\n  disconnectOne(node, next)\n  disconnectOne(next, node)\n}\n\nfunction disconnectOne(node, next) {\n  let connector = node.neighbors.get(next)\n  delete node.doors[connector]\n}\n\nfunction fillEnds(mazes) {\n  mazes.ends = {}\n  for (let maze of mazes.list) {\n    let cells = new Set(maze.cells.map(Cell.toString))\n    let ends  = []\n    let stack = maze.ends\n    while (stack.length) {\n      let cell = stack.pop()\n      let neighbors = Cell.getNeighbors(cell).filter(neighbor => neighbor in mazes.cells || neighbor in maze.doors)\n      if (neighbors.length > 1) {\n        ends.push(cell)\n        continue\n      }\n      cells.delete(cell.toString())\n      delete mazes.cells[cell]\n      let next = neighbors[0]\n      if (next)\n        stack.unshift(next)\n    }\n    maze.cells = [...cells].map(Cell.fromString)\n    maze.ends  = ends = ends\n      .filter(cell => cell in mazes.cells && Cell.getNeighbors(cell).filter(neighbor => neighbor in mazes.cells).length === 1)\n    ends.forEach(cell => mazes.ends[cell] = maze)\n  }\n}\n","import { Cell } from './index'\n\nexport default { get }\n\nfunction get(world, start, range) {\n  let cells = []\n  let i = 8\n  while (i--)\n    cells = cells.concat(getOctant(world, start, range, i))\n  cells.push(start)\n  return cells\n}\n\nfunction getOctant(world, start, range, octant) {\n  range = range || Infinity\n  let size = world.size\n  let [x, y] = start\n  let cells = []\n  let shadows = []\n  let fullShadow = false\n  for (let row = 1; row <= range; row++) {\n    let [transformX, transformY] = transformOctant(row, 0, octant)\n    let cell = [x + transformX, y + transformY]\n    if (!Cell.isInside(cell, size))\n      break\n    for (let col = 0; col <= row; col++) {\n      let [transformX, transformY] = transformOctant(row, col, octant)\n      let cell = [x + transformX, y + transformY]\n      if (!Cell.isInside(cell, size) || transformX * transformX + transformY * transformY > range * range)\n        break\n      if (!fullShadow) {\n        let projection = getProjection(row, col)\n        let visible = !shadows.find(shadow => shadow.start <= projection.start && shadow.end >= projection.end)\n        if (visible) {\n          cells.push(cell)\n          if (world.tileAt(cell).opaque) {\n            let index\n            for (index = 0; index < shadows.length; index++)\n              if (shadows[index].start >= projection.start)\n                break\n            let prev = shadows[index - 1]\n            let next = shadows[index]\n            let overPrev = index > 0 && prev.end > projection.start\n            let overNext = index < shadows.length && next.start < projection.end\n            if (overNext)\n              if (overPrev) {\n                prev.end = next.end\n                shadows.splice(index, 1)\n              } else\n                next.start = projection.start\n            else\n              if (overPrev)\n                prev.end = projection.end\n              else\n                shadows.splice(index, 0, projection)\n            let shadow = shadows[0]\n            fullShadow = shadows.length === 1 && shadow.start === 0 && shadow.end === 1\n          }\n        }\n      }\n    }\n  }\n  return cells\n}\n\nfunction getProjection(row, col) {\n  let start =  col      / (row + 2)\n  let end   = (col + 1) / (row + 1)\n  return {start, end}\n}\n\nfunction transformOctant(row, col, octant) {\n  switch (octant) {\n    case 0: return [ col, -row]\n    case 1: return [ row, -col]\n    case 2: return [ row,  col]\n    case 3: return [ col,  row]\n    case 4: return [-col,  row]\n    case 5: return [-row,  col]\n    case 6: return [-row, -col]\n    case 7: return [-col, -row]\n  }\n}\n","import { RNG, Actor, AI, Dungeon, Cell } from './index'\n\nlet eventCallbacks = {}\n\nconst SUCCESS = true\nconst FAILURE = false\n\nexport default { create }\n\nfunction create(size, seed) {\n\n  let rng = RNG.create(seed)\n  let ai = AI.create(rng)\n\n  let index = 0\n\n  let game = {\n    rng, world: {}, floor: null, hero: null,\n    start, on, off, input\n  }\n\n  return game\n\n  function start() {\n    game.world = {}\n    game.floor = 0\n    game.hero = Actor.create({ kind: 'human', faction: 'hero' })\n    descend()\n    output('start')\n    return game\n  }\n\n  function tick() {\n    let actor, actors = [...game.world[game.floor].elements].filter(element => element.type === 'actor')\n    if (!actors.length)\n      return null\n    while (game.hero.health) {\n      index = index % actors.length\n      actor = actors[index]\n      if (actor.health) {\n        if (actor.energy < 1)\n          actor.energy += actor.speed\n        while (actor.energy >= 1) {\n          actor.look()\n          let action = actor.action\n          if (!action) {\n            if (actor === game.hero)\n              return output('tick')\n            action = ai.getAction(actor)\n            if (!action)\n              return output('tick')\n          }\n          let { kind, data } = action\n          let result = actor.perform(action)\n          if (result !== SUCCESS) {\n            if (!result || result === FAILURE) {\n              if (actor === game.hero)\n                return output(`${kind}-fail`, actor, ...data)\n            }\n            if (result.type === 'actor') {\n              actor.attack(result)\n              kind = 'attack'\n              data = [result]\n            } else if (result.type === 'item') {\n              output(kind, actor, ...data)\n              actor.collect(result)\n              kind = 'item'\n              data = [result]\n            } else if (Cell.isCell(result)) {\n              actor.open(result)\n              kind = 'open'\n              data = [result]\n            }\n          } else {\n            if (kind === 'descend' || kind === 'ascend') {\n              actor.action = null\n              if (kind === 'descend')\n                result = descend()\n              else if (kind === 'ascend')\n                result = ascend()\n              if (result === FAILURE) {\n                output(`${kind}-fail`, actor, ...data)\n                return\n              }\n            }\n          }\n          actor.action = null\n          actor.energy--\n          if (result !== FAILURE)\n            output(kind, actor, ...data)\n        }\n      }\n      index++\n    }\n    game.hero.look()\n    return output('tick')\n  }\n\n  function descend() {\n    if (game.hero.world)\n      game.hero.world.kill(game.hero)\n    game.floor++\n    let floor\n    if (game.world[game.floor])\n      floor = game.world[game.floor]\n    else {\n      floor = Dungeon.create(size, rng)\n      game.world[game.floor] = floor\n    }\n    floor.spawn(game.hero, floor.entrance)\n    game.hero.worldId = game.floor\n    tick()\n    return true\n  }\n\n  function ascend() {\n    if (!game.world[game.floor - 1])\n      return false\n    game.hero.world.kill(game.hero)\n    game.floor--\n    let floor = game.world[game.floor]\n    floor.spawn(game.hero, floor.exit)\n    game.hero.worldId = game.floor\n    tick()\n    return true\n  }\n\n  function on(event, callback) {\n    let events = event\n    if (!Array.isArray(event))\n      events = [event]\n    for (let event of events) {\n      let callbacks = eventCallbacks[event]\n      if (!callbacks)\n        callbacks = eventCallbacks[event] = new Set\n      callbacks.add(callback)\n    }\n    return game\n  }\n\n  function off(event, callback) {\n    let callbacks = eventCallbacks[event]\n    if (!callbacks)\n      return false\n    callbacks.delete(callback)\n    return true\n  }\n\n  function input(kind, ...data) {\n    if (!game.hero.health)\n      return false\n    game.hero.action = { type: 'action', kind, data }\n    tick()\n    return true\n  }\n\n  function output(event, ...data) {\n    let callbacks = eventCallbacks[event]\n    if (!callbacks)\n      return false\n    for (let callback of callbacks)\n      callback(...data)\n    return true\n  }\n\n}\n","import { Cell } from './index'\n\nexport default { create }\n\nfunction create(size) {\n\n  let canvas = document.createElement('canvas')\n  canvas.width = canvas.height = size\n\n  let context = canvas.getContext('2d')\n\n  let display = {\n    size, context,\n    mount, render\n  }\n\n  return display\n\n  function mount(element) {\n\n    if (typeof element === 'string')\n      element = document.querySelector(element)\n\n    if (!element)\n      throw new TypeError(`Cannot mount display on element '${element}'`)\n\n    element.appendChild(canvas)\n\n    return display\n\n  }\n\n  function render(worldData) {\n\n    let cells = Object.keys(worldData).map(Cell.fromString)\n\n    let imageData = context.createImageData(size, size)\n    let data = imageData.data\n\n    for (let cell of cells) {\n      let index = Cell.toIndex(cell, size)\n      let i = index * 4\n      let color = worldData[cell]\n      if (!color)\n        continue\n      let [red, green, blue] = color\n      data[i]     = red\n      data[i + 1] = green\n      data[i + 2] = blue\n      data[i + 3] = 255\n    }\n\n    context.putImageData(imageData, 0, 0)\n\n  }\n\n}\n","import { Game, Display, Cell, World } from './utils/index'\n\nconst WORLD_SIZE = 25\n\nconst { LEFT, UP, RIGHT, DOWN } = Cell.directions\nconst { ENTRANCE, EXIT } = World.tileIds\n\nconst BLACK  = [  0,   0,   0]\nconst GRAY   = [128, 128, 128]\nconst SILVER = [192, 192, 192]\nconst WHITE  = [255, 255, 255]\n\nconst RED    = [255,   0,   0]\nconst MAROON = [128,   0,   0]\n\nconst YELLOW = [255, 255,   0]\nconst OLIVE  = [128, 128,   0]\n\nconst LIME   = [  0, 255,   0]\nconst GREEN  = [  0, 128,   0]\n\nconst BLUE   = [  0,   0, 255]\nconst NAVY   = [  0,   0, 128]\n\nfunction darken(color) {\n  switch (color) {\n    case BLACK:  return BLACK\n    case GRAY:   return GRAY\n    case SILVER: return GRAY\n    case WHITE:  return GRAY\n    case RED:    return MAROON\n    case MAROON: return MAROON\n    case YELLOW: return OLIVE\n    case OLIVE:  return OLIVE\n    case LIME:   return GREEN\n    case GREEN:  return GREEN\n    case BLUE:   return NAVY\n    case NAVY:   return NAVY\n  }\n  return null\n}\n\nfunction lighten(color) {\n  switch (color) {\n    case BLACK:  return GRAY\n    case GRAY:   return SILVER\n    case SILVER: return WHITE\n    case WHITE:  return WHITE\n    case RED:    return RED\n    case MAROON: return RED\n    case YELLOW: return YELLOW\n    case OLIVE:  return YELLOW\n    case LIME:   return LIME\n    case GREEN:  return LIME\n    case BLUE:   return BLUE\n    case NAVY:   return BLUE\n  }\n  return null\n}\n\nconst sprites = {\n  floor:      BLACK,\n  wall:       WHITE,\n  door:       YELLOW,\n  doorOpen:   OLIVE,\n  doorSecret: WHITE,\n  entrance:   GRAY,\n  exit:       GREEN,\n  human:      LIME,\n  beast:      RED,\n  item:       BLUE,\n  corpse:     MAROON\n}\n\nlet game = Game.create(WORLD_SIZE)\nlet display = Display.create(WORLD_SIZE).mount('#app')\n\nconsole.log(game.rng.seed())\n\ngame\n  .on(['start', 'tick'], render)\n\n  .on('move', actor => {\n    if (actor === game.hero)\n      if (path)\n        window.requestAnimationFrame(step)\n  })\n\n  .on('move-fail', actor => {\n    if (actor === game.hero)\n      if (path)\n        path = null\n  })\n\n  .on('open', actor => {\n    if (actor === game.hero)\n      interrupted = true, path = null\n  })\n\n  .start()\n\nlet inputDirections = {\n\n  KeyW:    UP,\n  ArrowUp: UP,\n\n  KeyA:      LEFT,\n  ArrowLeft: LEFT,\n\n  KeyS:      DOWN,\n  ArrowDown: DOWN,\n\n  KeyD:       RIGHT,\n  ArrowRight: RIGHT\n\n}\n\nlet interrupted = false // Door hack\nwindow.addEventListener('keydown', event => {\n  let { key, code } = event\n  if (!interrupted && !path) {\n    let direction = inputDirections[code]\n    if (direction)\n      game.input('move', direction)\n    else if (key === 'c')\n      game.input('close')\n    else if (code === 'Space')\n      game.input('wait')\n    else if (key === '>')\n      game.input('descend')\n    else if (key === '<')\n      game.input('ascend')\n    else if (key === 'r')\n      game.start()\n  }\n})\n\nwindow.addEventListener('keyup', event => {\n  interrupted = false\n})\n\nlet canvas = display.context.canvas\nlet mouse = null\ncanvas.addEventListener('mousemove', event => {\n  let { width, height } = canvas.getBoundingClientRect()\n  let { offsetX, offsetY } = event\n  mouse = [offsetX / width * canvas.width, offsetY / height * canvas.height].map(Math.floor)\n  render(mouse)\n})\n\nlet path = null\ncanvas.addEventListener('click', event => {\n  if (!mouse)\n    return\n  if (path) {\n    path = null\n    return\n  }\n  let { world, cell, known } = game.hero\n  if (Cell.isEqual(cell, mouse)) {\n    let id = world.getAt(cell)\n    if (id === ENTRANCE)\n      game.input('ascend')\n    else if (id === EXIT)\n      game.input('descend')\n    return\n  }\n  let cells = {}\n  world.data.forEach((id, index) => {\n    let cell = Cell.fromIndex(index, world.size)\n    if (!known[game.floor][cell])\n      cells[cell] = Infinity\n  })\n  path = world.findPath(cell, mouse, { cells })\n  if (path)\n    step()\n})\n\ncanvas.addEventListener('mouseout', event => {\n  mouse = null\n})\n\nfunction getView(actor) {\n  let view = {}\n  let { known, seeing } = actor\n  known = known[game.floor]\n  let cells = Object.keys(known).map(Cell.fromString)\n  for (let cell of cells) {\n    let name = known[cell]\n    let color = sprites[name]\n    if (!(cell in seeing))\n      color = darken(color)\n    view[cell] = color\n  }\n  return view\n}\n\nfunction render() {\n  let view = getView(game.hero)\n  if (mouse)\n    view[mouse] = lighten(view[mouse])\n  display.render(view)\n}\n\nfunction step() {\n  let step = game.hero.world.findStep(path, game.hero.cell)\n  if (!step) {\n    path = null\n    return false\n  }\n  game.input('move', step)\n  return true\n}\n"],"names":["directions","LEFT","UP","RIGHT","DOWN","cardinalDirections","isEqual","isEdge","isInside","isNeighbor","toString","fromString","toIndex","fromIndex","getNeighbors","getManhattan","getDistance","isCell","value","Array","isArray","length","filter","isNaN","a","b","cell","size","x","y","rect","rectX","rectY","rectWidth","rectHeight","other","cx","cy","ox","oy","dx","Math","abs","dy","string","split","map","Number","index","diagonals","step","TypeError","neighbors","dirs","key","current","push","ax","ay","bx","by","sqrt","squared","isIntersecting","getCorners","getEdges","getBorder","getCenter","getCells","i","exclusive","aw","ah","bw","bh","w","h","edges","r","concat","floor","cells","cache","cellsFromObject","obj","Object","keys","cacheDiamond","diamond","radius","start","stack","doors","node","pop","nexts","Cell","neighbor","next","steps","unshift","center","getCached","cached","parse","circle","edgeRadius","edgeMax","max","area","dist","tileData","tiles","tile","type","id","kind","props","prop","tileNames","tileIds","reduce","result","char","CHAR","toUpperCase","join","tileCosts","cost","walkable","door","Infinity","secret","WALL","ENTRANCE","EXIT","create","data","Uint8ClampedArray","world","elements","Set","entrance","exit","tileAt","elementsAt","setAt","fill","clear","spawn","kill","findPath","findStep","getAt","element","add","delete","goal","costs","path","startKey","goalKey","opened","closed","scores","f","g","parent","sort","cellKey","tileCost","cellCost","includes","nx","ny","World","DOOR","DOOR_OPEN","options","actor","assign","energy","health","known","seeing","move","attack","collect","open","descend","ascend","look","perform","action","close","direction","target","intel","find","item","FOV","get","vision","worldId","rng","getAction","rooms","list","room","choose","RNG","initialSeed","random","currentSeed","seed","min","arguments","sin","array","newSeed","FLOOR","DOOR_SECRET","hero","RangeError","findRooms","mazes","findMazes","findDoors","maze","cellId","regions","ends","enemies","Actor","faction","speed","items","Item","secretRooms","valid","findNodes","invalid","nodes","isInvalid","translated","intersecting","total","ratio","matrix","fails","failsMax","width","height","Rect","Diamond","Circle","backtracking","has","midpoint","connectorRegions","getConnectors","main","dead","region","Map","connectors","nearby","connectorIds","forEach","entries","edge","connect","connectOne","set","disconnect","disconnectOne","connector","fillEnds","range","getOctant","octant","shadows","fullShadow","row","transformOctant","transformX","transformY","col","projection","getProjection","visible","shadow","end","opaque","prev","overPrev","overNext","splice","eventCallbacks","SUCCESS","FAILURE","ai","AI","game","on","off","input","tick","actors","output","Dungeon","event","callback","events","callbacks","canvas","document","createElement","context","getContext","display","render","mount","querySelector","appendChild","worldData","imageData","createImageData","color","red","green","blue","putImageData","WORLD_SIZE","BLACK","GRAY","SILVER","WHITE","RED","MAROON","YELLOW","OLIVE","LIME","GREEN","BLUE","NAVY","darken","lighten","sprites","Game","Display","console","log","window","requestAnimationFrame","interrupted","inputDirections","addEventListener","code","mouse","getBoundingClientRect","offsetX","offsetY","getView","view","name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,aAAa;QACL,CAAC,CAAC,CAAF,EAAM,CAAN,CADK;WAEL,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAFK;MAGL,CAAE,CAAF,EAAK,CAAC,CAAN,CAHK;YAIL,CAAE,CAAF,EAAK,CAAC,CAAN,CAJK;SAKL,CAAE,CAAF,EAAM,CAAN,CALK;cAML,CAAE,CAAF,EAAM,CAAN,CANK;QAOL,CAAE,CAAF,EAAM,CAAN,CAPK;aAQL,CAAC,CAAC,CAAF,EAAM,CAAN;CARd;IAUQC,SAAoED,WAApEC;IAAeC,OAAqDF,WAArDE;IAAcC,UAAuCH,WAAvCG;IAAmBC,SAAoBJ,WAApBI;;AACxD,IAAMC,qBAAqB,EAAEJ,YAAF,EAAQC,QAAR,EAAYC,cAAZ,EAAmBC,YAAnB,EAA3B;;AAEA,WAAe;wBAAA,EACDC,sCADC;gBAAA,EAELC,gBAFK,EAEIC,cAFJ,EAEYC,kBAFZ,EAEsBC,sBAFtB,EAEkCC,kBAFlC,EAE4CC,sBAF5C,EAEwDC,gBAFxD,EAEiEC,oBAFjE,EAE4EC,0BAF5E,EAE0FC,0BAF1F,EAEwGC;CAFvH;;AAKA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;SACdA,SAASC,MAAMC,OAAN,CAAcF,KAAd,CAAT,IAAiCA,MAAMG,MAAN,KAAiB,CAAlD,IAAuD,CAACH,MAAMI,MAAN,CAAa;WAASC,MAAML,KAAN,KAAgB,OAAOA,KAAP,KAAiB,QAA1C;GAAb,EAAiEG,MAAhI;;;AAGF,SAASf,OAAT,CAAiBkB,CAAjB,EAAoBC,CAApB,EAAuB;SACdD,EAAE,CAAF,MAASC,EAAE,CAAF,CAAT,IAAiBD,EAAE,CAAF,MAASC,EAAE,CAAF,CAAjC;;;AAGF,SAASlB,MAAT,CAAgBmB,IAAhB,EAAsBC,IAAtB,EAA4B;4BACbD,IADa;MACrBE,CADqB;MAClBC,CADkB;;MAEtBC,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAOH,IAAP,EAAaA,IAAb,CAAX;MACIR,MAAMC,OAAN,CAAcO,IAAd,CAAJ,EACEG,OAAOH,IAAP;;cAC0CG,IALlB;;MAKrBC,KALqB;MAKdC,KALc;MAKPC,SALO;MAKIC,UALJ;;SAMnB1B,SAASkB,IAAT,EAAeC,IAAf,MAAyBC,MAAMG,KAAN,IAAeH,MAAMG,QAAQE,SAAR,GAAoB,CAAzC,IAA8CJ,MAAMG,KAApD,IAA6DH,MAAMG,QAAQE,UAAR,GAAqB,CAAjH,CAAP;;;AAGF,SAAS1B,QAAT,CAAkBkB,IAAlB,EAAwBC,IAAxB,EAA8B;6BACfD,IADe;MACvBE,CADuB;MACpBC,CADoB;;MAExBC,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAOH,IAAP,EAAaA,IAAb,CAAX;MACIR,MAAMC,OAAN,CAAcO,IAAd,CAAJ,EACEG,OAAOH,IAAP;;eAC0CG,IALhB;;MAKvBC,KALuB;MAKhBC,KALgB;MAKTC,SALS;MAKEC,UALF;;SAMrBN,KAAKG,KAAL,IAAcF,KAAKG,KAAnB,IAA4BJ,IAAIG,QAAQE,SAAxC,IAAqDJ,IAAIG,QAAQE,UAAxE;;;AAGF,SAASzB,UAAT,CAAoBiB,IAApB,EAA0BS,KAA1B,EAAiC;6BAChBT,IADgB;MAC1BU,EAD0B;MACtBC,EADsB;;6BAEhBF,KAFgB;MAE1BG,EAF0B;MAEtBC,EAFsB;;MAG3BC,KAAKC,KAAKC,GAAL,CAASJ,KAAKF,EAAd,CAAT;MACIO,KAAKF,KAAKC,GAAL,CAASH,KAAKF,EAAd,CAAT;SACO,CAAC,CAACG,EAAD,IAAOA,OAAO,CAAf,MAAsB,CAACG,EAAD,IAAOA,OAAO,CAApC,CAAP;;;AAGF,SAASjC,QAAT,CAAkBgB,IAAlB,EAAwB;SACfA,KAAKhB,QAAL,EAAP;;;AAGF,SAASC,UAAT,CAAoBiC,MAApB,EAA4B;SACnBA,OAAOC,KAAP,CAAa,GAAb,EAAkBC,GAAlB,CAAsBC,MAAtB,CAAP;;;AAGF,SAASnC,OAAT,CAAiBc,IAAjB,EAAuBC,IAAvB,EAA6B;6BACdD,IADc;MACtBE,CADsB;MACnBC,CADmB;;SAEpBA,IAAIF,IAAJ,GAAWC,CAAlB;;;AAGF,SAASf,SAAT,CAAmBmC,KAAnB,EAA0BrB,IAA1B,EAAgC;MAC1BC,IAAIoB,QAAQrB,IAAhB;MACIE,IAAI,CAACmB,QAAQpB,CAAT,IAAcD,IAAtB;SACO,CAACC,CAAD,EAAIC,CAAJ,CAAP;;;AAGF,SAASf,YAAT,CAAsBY,IAAtB,EAA4BuB,SAA5B,EAAuCC,IAAvC,EAA6C;MACvC,CAACjC,OAAOS,IAAP,CAAL,EACE,MAAM,IAAIyB,SAAJ,qCAA+CzB,IAA/C,QAAN;SACKwB,QAAQ,CAAf;;6BACaxB,IAJ8B;MAItCE,CAJsC;MAInCC,CAJmC;;MAKvCuB,YAAY,EAAhB;MACIC,OAAOhD,kBAAX;MACI4C,SAAJ,EACEI,OAAOrD,UAAP;OACG,IAAIsD,GAAT,IAAgBD,IAAhB,EAAsB;kCACLA,KAAKC,GAAL,CADK;QACfd,EADe;QACXG,EADW;;QAEhBY,UAAW,CAAC3B,IAAIY,KAAKU,IAAV,EAAgBrB,IAAIc,KAAKO,IAAzB,CAAf;QACKd,EAHe,GAGLmB,OAHK;QAGXlB,EAHW,GAGLkB,OAHK;;cAIVC,IAAV,CAAgB,CAACpB,EAAD,EAAKC,EAAL,CAAhB;;SAEKe,SAAP;;;AAGF,SAASrC,YAAT,CAAsBS,CAAtB,EAAyBC,CAAzB,EAA4B;yBACXD,CADW;MACrBiC,EADqB;MACjBC,EADiB;;yBAEXjC,CAFW;MAErBkC,EAFqB;MAEjBC,EAFiB;;SAGnBnB,KAAKC,GAAL,CAASe,KAAKE,EAAd,IAAoBlB,KAAKC,GAAL,CAASgB,KAAKE,EAAd,CAA3B;;;AAGF,SAAS5C,WAAT,CAAqBQ,CAArB,EAAwBC,CAAxB,EAA2BoC,IAA3B,EAAiC;MAC3B,OAAOA,IAAP,KAAgB,WAApB,EACEA,OAAO,IAAP;;0BACarC,CAHgB;MAG1BiC,EAH0B;MAGtBC,EAHsB;;0BAIhBjC,CAJgB;MAI1BkC,EAJ0B;MAItBC,EAJsB;;MAK1BpB,EAL0B,GAKfmB,KAAKF,EALU;MAKtBd,EALsB,GAKNiB,KAAKF,EALC;;MAM3BI,UAAWtB,KAAKA,EAAL,GAAUG,KAAKA,EAA9B;MACIkB,IAAJ,EACE,OAAOpB,KAAKoB,IAAL,CAAUC,OAAV,CAAP;SACKA,OAAP;;;ACxGF,WAAe,EAAEpD,oBAAF,EAAYC,wBAAZ,EAAwBL,kBAAxB,EAAiCyD,8BAAjC,EAAiDC,sBAAjD,EAA6DC,kBAA7D,EAAuEC,oBAAvE,EAAkFC,oBAAlF,EAA6FC,kBAA7F,EAAf;;AAEA,SAAS1D,UAAT,CAAkBgB,IAAlB,EAAwB;SACfA,KAAKhB,QAAL,EAAP;;;AAGF,SAASC,YAAT,CAAoBiC,MAApB,EAA4B;SACnBA,OAAOC,KAAP,CAAa,GAAb,EAAkBC,GAAlB,CAAsBC,MAAtB,CAAP;;;AAGF,SAASzC,SAAT,CAAiBkB,CAAjB,EAAoBC,CAApB,EAAuB;MACjB4C,IAAI7C,EAAEH,MAAV;SACOgD,GAAP;QACM7C,EAAE6C,CAAF,MAAS5C,EAAE4C,CAAF,CAAb,EACE,OAAO,KAAP;GACJ,OAAO,IAAP;;;AAGF,SAASN,cAAT,CAAwBvC,CAAxB,EAA2BC,CAA3B,EAA8B6C,SAA9B,EAAyC;yBACd9C,CADc;MACjCiC,EADiC;MAC7BC,EAD6B;MACzBa,EADyB;MACrBC,EADqB;;yBAEd/C,CAFc;MAEjCkC,EAFiC;MAE7BC,EAF6B;MAEzBa,EAFyB;MAErBC,EAFqB;;MAGnCJ,SAAJ,EACEb,MAAMC,IAAN,EAAYa,MAAM,CAAlB,EAAqBC,MAAM,CAA3B,EACAb,IADA,EACMC,IADN,EACYa,MAAM,CADlB,EACqBC,MAAM,CAD3B;SAEKjB,MAAME,KAAKc,EAAX,IAAiBf,MAAME,KAAKc,EAA5B,IAAkCjB,KAAKc,EAAL,IAAWZ,EAA7C,IAAmDD,KAAKc,EAAL,IAAWZ,EAArE;;;AAGF,SAASI,UAAT,CAAoBlC,IAApB,EAA0BwC,SAA1B,EAAqC;4BACdxC,IADc;MAC7BF,CAD6B;MAC1BC,CAD0B;MACvB8C,CADuB;MACpBC,CADoB;;MAE/BN,SAAJ,EACE1C,KAAKC,GAAL,EAAU8C,KAAK,CAAf,EAAkBC,KAAK,CAAvB;SACK,CAAE,CAAChD,CAAD,EAAIC,CAAJ,CAAF,EAAU,CAACD,IAAI+C,CAAJ,GAAQ,CAAT,EAAY9C,CAAZ,CAAV,EAA0B,CAACD,CAAD,EAAIC,IAAI+C,CAAJ,GAAQ,CAAZ,CAA1B,EAA0C,CAAChD,IAAI+C,CAAJ,GAAQ,CAAT,EAAY9C,IAAI+C,CAAJ,GAAQ,CAApB,CAA1C,CAAP;;;AAGF,SAASX,QAAT,CAAkBnC,IAAlB,EAAwBwC,SAAxB,EAAmC;MAC7BO,QAAQ,EAAZ;;6BACqB/C,IAFY;MAE3BF,CAF2B;MAExBC,CAFwB;MAErB8C,CAFqB;MAElBC,CAFkB;;MAG7BE,IAAIlD,IAAI+C,CAAZ;MAAelD,IAAII,IAAI+C,CAAvB;MAA0BP,CAA1B;MACIC,SAAJ,EACE1C,KAAKC,GAAL,EAAU8C,KAAK,CAAf,EAAkBC,KAAK,CAAvB;OACGP,IAAIzC,IAAI,CAAb,EAAgByC,IAAIS,CAApB,EAAuBT,GAAvB;UACQb,IAAN,CAAY,CAAEa,CAAF,EAAKxC,CAAL,CAAZ,EAAsB,CAAEwC,CAAF,EAAK5C,CAAL,CAAtB;GACF,KAAK4C,IAAIxC,IAAI,CAAb,EAAgBwC,IAAI5C,CAApB,EAAuB4C,GAAvB;UACQb,IAAN,CAAY,CAAE5B,CAAF,EAAKyC,CAAL,CAAZ,EAAsB,CAAES,CAAF,EAAKT,CAAL,CAAtB;GACF,OAAOQ,KAAP;;;AAGF,SAASX,SAAT,CAAmBpC,IAAnB,EAAyBwC,SAAzB,EAAoC;SAC3BL,SAASnC,IAAT,EAAewC,SAAf,EAA0BS,MAA1B,CAAkCf,WAAWlC,IAAX,EAAiBwC,SAAjB,CAAlC,CAAP;;;AAGF,SAASH,SAAT,CAAmBrC,IAAnB,EAAyB;MACnBF,CAAJ,EAAOC,CAAP,EAAU8C,CAAV,EAAaC,CAAb;MACKzD,MAAMC,OAAN,CAAcU,IAAd,CAAL,EAA2B;+BACVA,IADU;;KAAA;KAAA;KAAA;KAAA;;QAErBA,KAAKT,MAAL,IAAe,CAAnB,EACEsD,IAAI/C,CAAJ,EAAOgD,IAAI/C,CAAX,EAAcD,IAAI,CAAlB,EAAqBC,IAAI,CAAzB;GAHJ,MAIO,IAAK,CAACN,MAAMO,IAAN,CAAN,EACLF,IAAI,CAAJ,EAAOC,IAAI,CAAX,EAAc8C,IAAI7C,IAAlB,EAAwB8C,IAAI9C,IAA5B;SACK,CAAEW,KAAKuC,KAAL,CAAWpD,IAAI+C,IAAI,CAAnB,CAAF,EAAyBlC,KAAKuC,KAAL,CAAWnD,IAAI+C,IAAI,CAAnB,CAAzB,CAAP;;;AAGF,SAASR,QAAT,CAAkBtC,IAAlB,EAAwB;MAClBmD,QAAQ,EAAZ;;6BAC8CnD,IAFxB;MAEhBC,KAFgB;MAETC,KAFS;MAEFC,SAFE;MAESC,UAFT;;MAGlBmC,IAAIpC,YAAYC,UAApB;SACOmC,GAAP,EAAY;QACNzC,IAAIyC,IAAIpC,SAAZ;QACIJ,IAAI,CAACwC,IAAIzC,CAAL,IAAUK,SAAlB;UACMoC,CAAN,IAAW,CAACzC,IAAIG,KAAL,EAAYF,IAAIG,KAAhB,CAAX;;SAEKiD,KAAP;;;ACrEF,IAAIC,QAAQ,EAAZ;;AAEA,iBAAe,EAAEd,oBAAF,EAAYH,oBAAZ,EAAsBE,sBAAtB,EAAf;;AAEA,SAASgB,eAAT,CAAyBC,GAAzB,EAA8B;SACrBC,OAAOC,IAAP,CAAYF,GAAZ,EAAiBtC,GAAjB,CAAsB;WAAOQ,IAAIT,KAAJ,CAAU,GAAV,EAAeC,GAAf,CAAmBC,MAAnB,CAAP;GAAtB,CAAP;;;AAGF,SAASwC,YAAT,CAAsBC,OAAtB,EAA+B;+BAERA,OAFQ;MAExB5D,CAFwB;MAErBC,CAFqB;MAElB4D,MAFkB;;MAIzBC,QAAQ,CAAC9D,CAAD,EAAIC,CAAJ,CAAZ;MACI8D,QAAQ,CAACD,KAAD,CAAZ;MACIT,2BAAWS,KAAX,EAAmB,CAAnB,CAAJ;MACIb,QAAQ,EAAZ;MACIe,QAAQ,EAAZ;;SAEOD,MAAMtE,MAAb,EAAqB;QACfwE,OAAOF,MAAMG,GAAN,EAAX;QACIC,QAAQC,KAAKlF,YAAL,CAAkB+E,IAAlB,EAAwBvE,MAAxB,CAAgC;aAAY,EAAE2E,SAASvF,QAAT,MAAuBuE,KAAzB,CAAZ;KAAhC,CAAZ;;;;;;2BACiBc,KAAjB,8HAAwB;YAAfG,IAAe;;YAClBC,QAAQlB,MAAMY,IAAN,IAAc,CAA1B;YACIM,SAASV,MAAb,EAAqB;gBACbS,IAAN,IAAcC,KAAd;gBACMC,OAAN,CAAcF,IAAd;SAFF,MAIErB,MAAMqB,IAAN,IAAcC,KAAd;;;;;;;;;;;;;;;;;;UAIEhB,gBAAgBF,KAAhB,CAAR;UACQE,gBAAgBN,KAAhB,CAAR;;SAEO,EAAEI,YAAF,EAASJ,YAAT,EAAgBwB,QAAQX,KAAxB,EAAP;;;AAIF,SAASY,SAAT,CAAmBd,OAAnB,EAA4B;MACtBe,SAASrB,MAAMM,OAAN,CAAb;MACI,CAACe,MAAL,EACEA,SAASrB,MAAMM,OAAN,IAAiBD,aAAaC,OAAb,CAA1B;SACKe,MAAP;;;AAGF,SAASnC,UAAT,CAAkBoB,OAAlB,EAA2B;SAClBc,UAAUd,OAAV,EAAmBP,KAA1B;;;AAGF,SAAShB,UAAT,CAAkBuB,OAAlB,EAA2B;SAClBc,UAAUd,OAAV,EAAmBX,KAA1B;;;AAGF,SAASV,WAAT,CAAmBqB,OAAnB,EAA4B;SACnBc,UAAUd,OAAV,EAAmBa,MAA1B;;;ACtDF,IAAInB,UAAQ,EAAZ;;AAEA,gBAAe,EAAEd,oBAAF,EAAYH,oBAAZ,EAAsBE,sBAAtB,EAAf;;AAEA,SAASqC,KAAT,CAAeC,MAAf,EAAuB;8BAEAA,MAFA;MAEhB7E,CAFgB;MAEbC,CAFa;MAEV4D,MAFU;;MAGjBC,QAAQ,CAAC9D,CAAD,EAAIC,CAAJ,CAAZ;;MAEIoD,QAAQ,EAAZ;MACIJ,QAAQ,EAAZ;;MAEI6B,aAAajB,SAAS,CAA1B;MACIkB,UAAUD,aAAaA,UAA3B;;MAEIE,MAAOnB,SAASA,MAApB;MACI9D,OAAO+E,aAAa,CAAb,GAAiB,CAA5B;MACIG,OAAOlF,OAAOA,IAAlB;MACI0C,IAAIwC,IAAR;SACOxC,GAAP,EAAY;0BACK2B,KAAKnF,SAAL,CAAewD,CAAf,EAAkB1C,IAAlB,CADL;;QACLS,EADK;QACDC,EADC;;QAENX,OAAO,CAACU,KAAKR,CAAL,GAAS8E,UAAV,EAAsBrE,KAAKR,CAAL,GAAS6E,UAA/B,CAAX;QACII,OAAOd,KAAKhF,WAAL,CAAiBU,IAAjB,EAAuBgE,KAAvB,EAA8B,KAA9B,CAAX;QACIoB,OAAOF,GAAX,EAAgB;UACVE,OAAOH,OAAP,IAAkB,EAAEjF,QAAQuD,KAAV,CAAtB,EACE;YACIvD,IAAN,IAAc,IAAd;;;UAGIA,IAAN,IAAc,IAAd;;;UAGM2D,OAAOC,IAAP,CAAYL,KAAZ,EAAmBnC,GAAnB,CAAuBkD,KAAKrF,UAA5B,CAAR;UACQ0E,OAAOC,IAAP,CAAYT,KAAZ,EAAmB/B,GAAnB,CAAuBkD,KAAKrF,UAA5B,CAAR;;SAEO,EAAEsE,YAAF,EAASJ,YAAT,EAAgBwB,QAAQX,KAAxB,EAAP;;;AAIF,SAASY,WAAT,CAAmBG,MAAnB,EAA2B;MACrBF,SAASrB,QAAMuB,MAAN,CAAb;MACI,CAACF,MAAL,EACEA,SAASrB,QAAMuB,MAAN,IAAgBD,MAAMC,MAAN,CAAzB;SACKF,MAAP;;;AAGF,SAASnC,UAAT,CAAkBqC,MAAlB,EAA0B;SACjBH,YAAUG,MAAV,EAAkBxB,KAAzB;;;AAGF,SAAShB,UAAT,CAAkBwC,MAAlB,EAA0B;SACjBH,YAAUG,MAAV,EAAkB5B,KAAzB;;;AAGF,SAASV,WAAT,CAAmBsC,MAAnB,EAA2B;SAClBH,YAAUG,MAAV,EAAkBJ,MAAzB;;;ACvDF,IAAMU,WAAW,CACf,gBADe,EAEf,aAFe,EAGf,kBAHe,EAIf,wBAJe,EAKf,+BALe,EAMf,0BANe,EAOf,sBAPe,CAAjB;;AAUA,IAAMC,QAAQ,UAAUD,QAAV,EAAoB;MAC5BC,QAAQ,EAAZ;MACI3C,IAAI0C,SAAS1F,MAAjB;SACOgD,GAAP,EAAY;QACN4C,OAAOD,MAAM3C,CAAN,IAAW,EAAE6C,MAAM,MAAR,EAAgBC,IAAI9C,CAApB,EAAtB;;4BACuB0C,SAAS1C,CAAT,EAAYxB,KAAZ,CAAkB,GAAlB,CAFb;;QAELuE,IAFK;QAEIC,KAFJ;;SAGLD,IAAL,GAAYA,IAAZ;;;;;;2BACiBC,KAAjB;YAASC,IAAT;;aACOA,IAAL,IAAa,IAAb;;;;;;;;;;;;;;;;;SAEGN,KAAP;CAVY,CAWZD,QAXY,CAAd;;AAaA,IAAMQ,YAAYlC,OAAOC,IAAP,CAAY0B,KAAZ,CAAlB;;AAEA,IAAMQ,UAAU,UAAUR,KAAV,EAAiB;MAC3BQ,UAAU,EAAd;MACInD,IAAI,CAAR;;;;;;0BACiB2C,KAAjB,mIAAwB;UAAfC,IAAe;;UAClBE,KAAKF,KAAKG,IAAL,CAAUvE,KAAV,CAAgB,EAAhB,EAAoB4E,MAApB,CAA2B,UAACC,MAAD,EAASC,IAAT,EAAe3E,KAAf,EAAyB;YACvD4E,OAAOD,KAAKE,WAAL,EAAX;YACIF,SAASC,IAAT,IAAiB,CAAC5E,KAAtB,EACE0E,OAAOA,OAAOrG,MAAd,IAAwB,EAAxB;eACKqG,OAAOrG,MAAP,GAAgB,CAAvB,KAA6BuG,IAA7B;eACOF,MAAP;OALO,EAMN,EANM,EAMFI,IANE,CAMG,GANH,CAAT;cAOQX,EAAR,IAAc9C,CAAd;;;;;;;;;;;;;;;;;;SAGKmD,OAAP;CAdc,CAedR,KAfc,CAAhB;;AAiBA,IAAMe,YAAY,UAAUf,KAAV,EAAiB;MAC7Be,YAAY,EAAhB;;;;;;0BACiBf,KAAjB,mIAAwB;UAAfC,IAAe;;UAClBe,OAAO,CAAX;UACI,CAACf,KAAKgB,QAAN,IAAkB,CAAChB,KAAKiB,IAA5B,EACEF,OAAOG,QAAP;UACElB,KAAKmB,MAAT,EACEJ,OAAO,IAAP;UACEf,KAAKiB,IAAT,EAAe;;YAET,CAACjB,KAAKgB,QAAV,EACED;;gBAEMxE,IAAV,CAAewE,IAAf;;;;;;;;;;;;;;;;;SAEKD,SAAP;CAfgB,CAgBhBf,KAhBgB,CAAlB;;IAkBeqB,OAAuDb,QAAvDa,KAAoCC,AAAUC;;;AAE7D,eAAe;cAAA,EACNhB,oBADM,EACKC,gBADL,EACcO,oBADd;;CAAf;;AAKA,SAASS,MAAT,CAAgB7G,IAAhB,EAAsB;;MAEhBkF,OAAOlF,OAAOA,IAAlB;MACI8G,OAAO,IAAIC,iBAAJ,CAAsB7B,IAAtB,CAAX;;MAEI8B,QAAQ;cAAA,EACJF,UADI,EACEG,UAAU,IAAIC,GAAJ,EADZ,EACqBC,UAAU,IAD/B,EACqCC,MAAM,IAD3C;gBAAA,EAEHC,cAFG,EAEKC,sBAFL,EAEiBC,YAFjB,EAEwBC,UAFxB,EAE8BC,YAF9B,EAEqCC,YAFrC,EAE4CC,UAF5C,EAEkDC,kBAFlD,EAE4DC;GAFxE;;SAKOb,KAAP;;WAESc,KAAT,CAAe/H,IAAf,EAAqB;QACf,CAACsE,KAAKxF,QAAL,CAAckB,IAAd,EAAoBC,IAApB,CAAL,EACE,OAAO,IAAP;QACEqB,QAAQgD,KAAKpF,OAAL,CAAac,IAAb,EAAmBC,IAAnB,CAAZ;WACO8G,KAAKzF,KAAL,CAAP;;;WAGOgG,MAAT,CAAgBtH,IAAhB,EAAsB;WACbsF,MAAMyC,MAAM/H,IAAN,CAAN,CAAP;;;WAGOuH,UAAT,CAAoBvH,IAApB,EAA0B;WACjB,4BAAIiH,MAAMC,QAAV,GAAoBtH,MAApB,CAA2B;aAAW0E,KAAK1F,OAAL,CAAaoB,IAAb,EAAmBgI,QAAQhI,IAA3B,CAAX;KAA3B,CAAP;;;WAGOwH,KAAT,CAAexH,IAAf,EAAqBR,KAArB,EAA4B;QACtB,CAAC8E,KAAKxF,QAAL,CAAckB,IAAd,EAAoBC,IAApB,CAAL,EACE,OAAO,IAAP;QACEqB,QAAQgD,KAAKpF,OAAL,CAAac,IAAb,EAAmBC,IAAnB,CAAZ;SACKqB,KAAL,IAAc9B,KAAd;WACOA,KAAP;;;WAGOiI,IAAT,CAAcrH,IAAd,EAAoBZ,KAApB,EAA2B;;QAErB,CAACC,MAAMC,OAAN,CAAcU,IAAd,CAAL,EACEA,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAOH,IAAP,EAAaA,IAAb,CAAP;;QAEEJ,MAAML,KAAN,CAAJ,EACEA,QAAQmH,IAAR;;gBAE0CvG,IARnB;;QAQpBC,KARoB;QAQbC,KARa;QAQNC,SARM;QAQKC,UARL;;QAUrB2E,OAAO5E,YAAYC,UAAvB;;QAEImC,IAAIwC,IAAR;WACOxC,GAAP,EAAY;4BACG2B,KAAKnF,SAAL,CAAewD,CAAf,EAAkBpC,SAAlB,CADH;;UACLL,CADK;UACFC,CADE;;UAENmB,QAASgD,KAAKpF,OAAL,CAAa,CAACgB,IAAIG,KAAL,EAAYF,IAAIG,KAAhB,CAAb,EAAqCL,IAArC,CAAb;WACKqB,KAAL,IAAc9B,KAAd;;;WAGKyH,KAAP;;;WAIOS,KAAT,CAAetH,IAAf,EAAqB;WACZ6G,KAAP;;;WAGOU,KAAT,CAAeK,OAAf,EAAwBhI,IAAxB,EAA8B;YACpBiH,KAAR,GAAgBA,KAAhB;YACQjH,IAAR,GAAgBA,IAAhB;UACMkH,QAAN,CAAee,GAAf,CAAmBD,OAAnB;;;WAGOJ,IAAT,CAAcI,OAAd,EAAuB;WACdf,MAAMC,QAAN,CAAegB,MAAf,CAAsBF,OAAtB,CAAP;;;WAGOH,QAAT,CAAkB7D,KAAlB,EAAyBmE,IAAzB,EAA+BC,KAA/B,EAAsC7G,SAAtC,EAAiD;;QAE3C,CAAC6G,KAAL,EACEA,QAAQ,EAAR;;QAEE,CAACA,MAAM9C,KAAX,EACE8C,MAAM9C,KAAN,GAAce,SAAd;;QAEE,CAAC+B,MAAM7E,KAAX,EACE6E,MAAM7E,KAAN,GAAc,EAAd;;QAEE8E,OAAO,EAAX;;QAEIC,WAAWtE,MAAMhF,QAAN,EAAf;QACIuJ,UAAWJ,KAAKnJ,QAAL,EAAf;;QAEIwJ,SAAS,CAACF,QAAD,CAAb;QACIG,SAAS,EAAb;;QAEIC,SAAS,EAAEC,GAAG,EAAL,EAASC,GAAG,EAAZ,EAAb;QACIC,SAAS,EAAb;;QAEItF,QAAQwD,KAAK3F,GAAL,CAAS,UAACqE,EAAD,EAAKnE,KAAL;aAAegD,KAAKnF,SAAL,CAAemC,KAAf,EAAsBrB,IAAtB,CAAf;KAAT,CAAZ;;;;;;4BACiBsD,KAAjB,mIAAwB;YAAfvD,MAAe;;eACf4I,CAAP,CAAS5I,MAAT,IAAiByG,QAAjB;eACOkC,CAAP,CAAS3I,MAAT,IAAiByG,QAAjB;;;;;;;;;;;;;;;;;WAGKmC,CAAP,CAAS5E,KAAT,IAAkB,CAAlB;WACO2E,CAAP,CAAS3E,KAAT,IAAkBM,KAAKjF,YAAL,CAAkB2E,KAAlB,EAAyBmE,IAAzB,CAAlB;;WAEOK,OAAO7I,MAAd,EAAsB;UAChB6I,OAAO7I,MAAP,GAAgB,CAApB,EACE6I,SAASA,OAAOM,IAAP,CAAa,UAAChJ,CAAD,EAAIC,CAAJ;eAAU2I,OAAOC,CAAP,CAAS5I,CAAT,IAAc2I,OAAOC,CAAP,CAAS7I,CAAT,CAAxB;OAAb,CAAT;UACEiJ,UAAUP,OAAOpE,GAAP,EAAd;UACIpE,OAAOsE,KAAKrF,UAAL,CAAgB8J,OAAhB,CAAX;UACIA,YAAYR,OAAhB,EAAyB;YACnBvI,QAAOmI,IAAX;WACG;eACIzD,OAAL,CAAa1E,KAAb;kBACO6I,OAAO7I,KAAP,CAAP;SAFF,QAGSA,KAHT;eAIOqI,IAAP;;aAEKrI,IAAP,IAAe,IAAf;;;;;;8BACsBsE,KAAKlF,YAAL,CAAkBY,IAAlB,EAAwBuB,SAAxB,CAAtB,mIAA2D;cAAjDgD,QAAiD;;cACrD,CAACD,KAAKxF,QAAL,CAAcyF,QAAd,EAAwBtE,IAAxB,CAAD,IAAkCsE,YAAYkE,MAAlD,EACE;cACE7G,MAAM2C,SAASvF,QAAT,EAAV;cACIgK,WAAWZ,MAAM9C,KAAN,CAAYyC,MAAMxD,QAAN,CAAZ,KAAgC,CAA/C;cACI0E,WAAWb,MAAM7E,KAAN,CAAYgB,QAAZ,KAAyB,CAAxC;cACI+B,OAAO0C,WAAWC,QAAtB;cACI3C,SAASG,QAAT,IAAqB7E,QAAQ2G,OAAjC,EACE;cACEK,IAAIF,OAAOE,CAAP,CAAS5I,IAAT,IAAiB,CAAjB,GAAqBsG,IAA7B;cACK,CAACkC,OAAOU,QAAP,CAAgBtH,GAAhB,CAAN,EACE4G,OAAO1G,IAAP,CAAYF,GAAZ,EADF,KAEK,IAAKgH,KAAKF,OAAOE,CAAP,CAASrE,QAAT,CAAV,EACH;iBACKA,QAAP,IAAmBvE,IAAnB;iBACO4I,CAAP,CAASrE,QAAT,IAAqBqE,CAArB;iBACOD,CAAP,CAASpE,QAAT,IAAqBqE,IAAItE,KAAKjF,YAAL,CAAkBkF,QAAlB,EAA4B4D,IAA5B,CAAzB;;;;;;;;;;;;;;;;;;WAIG,IAAP;;;WAIOL,QAAT,CAAkBO,IAAlB,EAAwBrI,IAAxB,EAA8B;QACxB,CAACqI,IAAL,EACE,OAAO,IAAP;QACE7D,aAAJ;QAAUlD,QAAQ,CAAlB;OACG;aACM+G,KAAK/G,OAAL,CAAP;KADF,QAESkD,QAAQ,CAACF,KAAK1F,OAAL,CAAaoB,IAAb,EAAmBwE,IAAnB,CAFlB;WAGO6D,KAAK/G,KAAL,CAAP;QACI,CAACkD,IAAL,EACE,OAAO,IAAP;;+BACaxE,IAVa;QAUvBU,EAVuB;QAUnBC,EAVmB;;gBAWb6D,IAXa;;QAWvB2E,EAXuB;QAWnBC,EAXmB;;QAYxB5H,OAAO,CAAC2H,KAAKzI,EAAN,EAAU0I,KAAKzI,EAAf,CAAX;WACOa,IAAP;;;;uBC7NwC6H,SAAMvD;IAA1CwD,0BAAAA;IAAMC,+BAAAA;IAAW3C,8BAAAA;IAAUC,0BAAAA;;;AAEnC,eAAe,EAAEC,gBAAF,EAAf;;AAEA,SAASA,QAAT,CAAgB0C,OAAhB,EAAyB;;MAEnBC,QAAQ;UACJ,IADI;aAED,IAFC;WAGH,IAAI,CAHD;WAIH,IAAI,CAJD;YAKF;GALV;;SAQOC,MAAP,CAAcD,KAAd,EAAqBD,OAArB,EAA8B;UACtB,OADsB,EACbvC,OAAO,IADM,EACAjH,MAAM,IADN,EACYqI,MAAM,IADlB,EACwBsB,QAAQ,CADhC,EACmCC,QAAQ,CAD3C,EAC8CC,OAAO,EADrD,EACyDC,QAAQ,EADjE;oBAAA,EAEnBC,UAFmB,EAEbC,cAFa,EAELC,gBAFK,EAEIC,UAFJ,EAEUC,gBAFV,EAEmBC,cAFnB,EAE2BC;GAFzD;;SAKOZ,KAAP;;WAESa,OAAT,CAAiBC,MAAjB,EAAyB;QACjB7E,IADiB,GACF6E,MADE,CACjB7E,IADiB;QACXqB,IADW,GACFwD,MADE,CACXxD,IADW;;YAEfrB,IAAR;WACO,MAAL;eAAuBqE,wCAAQhD,IAAR,EAAP;WACX,QAAL;eAAuBiD,0CAAUjD,IAAV,EAAP;WACX,SAAL;eAAuBkD,2CAAWlD,IAAX,EAAP;WACX,MAAL;eAAuBmD,wCAAQnD,IAAR,EAAP;WACX,OAAL;eAAuByD,yCAASzD,IAAT,EAAP;WACX,SAAL;eAAuBoD,2CAAWpD,IAAX,EAAP;WACX,QAAL;eAAuBqD,0CAAUrD,IAAV,EAAP;WACX,MAAL;eAAuB,IAAP;;UAEZ,IAAItF,SAAJ,gCAA2CiE,IAA3C,CAAN;WACO,IAAP;;;WAGOqE,IAAT,CAAcU,SAAd,EAAyB;QACnB,CAAChB,MAAMzJ,IAAX,EACE,MAAM,IAAIyB,SAAJ,wBAAmCgI,MAAM/D,IAAzC,iBAAyD+D,MAAMzJ,IAA/D,CAAN;;oCACayJ,MAAMzJ,IAHE;QAGlBU,EAHkB;QAGdC,EAHc;;mCAIR8J,SAJQ;QAIlB3J,EAJkB;QAIdG,EAJc;;QAKnByJ,SAAS,CAAChK,KAAKI,EAAN,EAAUH,KAAKM,EAAf,CAAb;QACIsE,OAAOkE,MAAMxC,KAAN,CAAYK,MAAZ,CAAmBoD,MAAnB,CAAX;QACI,CAACnF,KAAKgB,QAAV,EACE,IAAIhB,KAAKiB,IAAL,IAAaiD,MAAMkB,KAAN,IAAe,IAAI,CAApC,EACE,OAAOD,MAAP,CADF;SAGE,OAAO,KAAP,CAXmB;QAYnBxD,WAAWuC,MAAMxC,KAAN,CAAYM,UAAZ,CAAuBmD,MAAvB,CAAf;QACIjK,QAAQyG,SAAS0D,IAAT,CAAc;aAAW5C,QAAQxC,IAAR,KAAiB,OAA5B;KAAd,CAAZ;QACI/E,KAAJ,EACE,OAAOA,KAAP,CAfqB;UAgBjBT,IAAN,GAAa0K,MAAb;QACIG,OAAO3D,SAAS0D,IAAT,CAAc;aAAW5C,QAAQxC,IAAR,KAAiB,MAA5B;KAAd,CAAX;QACIqF,IAAJ,EACE,OAAOA,IAAP,CAnBqB;WAoBhB,IAAP,CApBuB;;;WAuBhBb,MAAT,CAAgBU,MAAhB,EAAwB;QAClB,CAACA,MAAD,IAAWA,OAAOlF,IAAP,KAAgB,OAA3B,IAAsC,CAAClB,KAAKvF,UAAL,CAAgB0K,MAAMzJ,IAAtB,EAA4B0K,OAAO1K,IAAnC,CAA3C,EACE,OAAO,KAAP;WACK4J,MAAP;QACIc,OAAOd,MAAP,IAAiB,CAArB,EAAwB;aACfA,MAAP,GAAgB,CAAhB;aACO3C,KAAP,CAAaW,IAAb,CAAkB8C,MAAlB;aACOzD,KAAP,CAAaU,KAAb,CAAmB;cACX,QADW;cAEX,QAFW;gBAGT+C,OAAOhF;OAHjB,EAIGgF,OAAO1K,IAJV;;WAMK,IAAP,CAbsB;;;WAgBfiK,OAAT,CAAiBS,MAAjB,EAAyB;WAChBzD,KAAP,CAAaW,IAAb,CAAkB8C,MAAlB;;;WAGOR,IAAT,CAAcQ,MAAd,EAAsB;QAChB,CAACpG,KAAK/E,MAAL,CAAYmL,MAAZ,CAAD,IAAwB,CAACpG,KAAKvF,UAAL,CAAgB0K,MAAMzJ,IAAtB,EAA4B0K,MAA5B,CAA7B,EACE,OAAO,KAAP;QACEnF,OAAOkE,MAAMxC,KAAN,CAAYK,MAAZ,CAAmBoD,MAAnB,CAAX;QACI,CAACnF,KAAKiB,IAAV,EACE,OAAO,KAAP;UACIS,KAAN,CAAYO,KAAZ,CAAkBkD,MAAlB,EAA0BnB,WAA1B;WACO,IAAP;;;WAGOiB,KAAT,CAAeE,MAAf,EAAuB;QACjB,CAACA,MAAL,EAAa;UACPhJ,YAAY4C,KAAKlF,YAAL,CAAkBqK,MAAMzJ,IAAxB,EAA8B,IAA9B,EAAoCJ,MAApC,CAA2C;eAAY6J,MAAMxC,KAAN,CAAYc,KAAZ,CAAkBxD,QAAlB,MAAgCgF,WAA5C;OAA3C,CAAhB;UACI,CAAC7H,UAAU/B,MAAf,EACE,OAAO,KAAP;;;;;;6BACmB+B,SAArB;cAAS6C,QAAT;;gBACQ0C,KAAN,CAAYO,KAAZ,CAAkBjD,QAAlB,EAA4B+E,MAA5B;;;;;;;;;;;;;;;;;aACK,IAAP;KANF,MAOO;UACD,CAAChF,KAAK/E,MAAL,CAAYmL,MAAZ,CAAD,IAAwB,CAACpG,KAAKvF,UAAL,CAAgB0K,MAAMzJ,IAAtB,EAA4B0K,MAA5B,CAA7B,EACE,OAAO,KAAP;UACEnF,OAAOkE,MAAMxC,KAAN,CAAYK,MAAZ,CAAmBoD,MAAnB,CAAX;UACI,CAACnF,KAAKiB,IAAV,EACE,OAAO,KAAP;YACIS,KAAN,CAAYO,KAAZ,CAAkBkD,MAAlB,EAA0BpB,MAA1B;aACO,IAAP;;;;WAIKa,OAAT,GAAmB;QACb1E,KAAKgE,MAAMxC,KAAN,CAAYc,KAAZ,CAAkB0B,MAAMzJ,IAAxB,CAAT;QACIyF,OAAOoB,MAAX,EACE,OAAO,IAAP;WACK,KAAP;;;WAGOuD,MAAT,GAAkB;QACZ3E,KAAKgE,MAAMxC,KAAN,CAAYc,KAAZ,CAAkB0B,MAAMzJ,IAAxB,CAAT;QACIyF,OAAOmB,UAAX,EACE,OAAO,IAAP;WACK,KAAP;;;WAGOyD,IAAT,GAAgB;QACV9G,QAAQuH,OAAIC,GAAJ,CAAQtB,MAAMxC,KAAd,EAAqBwC,MAAMzJ,IAA3B,EAAiCyJ,MAAMuB,MAAvC,CAAZ;UACMlB,MAAN,GAAe,EAAf;QACI,CAACL,MAAMI,KAAN,CAAYJ,MAAMwB,OAAlB,CAAL,EACExB,MAAMI,KAAN,CAAYJ,MAAMwB,OAAlB,IAA6B,EAA7B;;;;;;4BACe1H,KAAjB,mIAAwB;YAAfvD,IAAe;;YAClB0F,OAAO+D,MAAMxC,KAAN,CAAYK,MAAZ,CAAmBtH,IAAnB,EAAyB0F,IAApC;YACIjF,QAAQgJ,MAAMxC,KAAN,CAAYM,UAAZ,CAAuBvH,IAAvB,EAA6B,CAA7B,CAAZ;YACIS,KAAJ,EACEiF,OAAOjF,MAAMiF,IAAb;cACImE,KAAN,CAAYJ,MAAMwB,OAAlB,EAA2BjL,IAA3B,IAAmC0F,IAAnC;cACMoE,MAAN,CAAa9J,IAAb,IAAqB,IAArB;;;;;;;;;;;;;;;;;;;ACxIN,WAAe,EAAE8G,gBAAF,EAAf;;AAEA,SAASA,QAAT,CAAgB0C,OAAhB,EAAyB;;MAEnBqB,OAAO;UACH,IADG;WAEF;GAFT;;SAKOnB,MAAP,CAAcmB,IAAd,EAAoBrB,OAApB,EAA6B;UACrB;GADR;;SAIOqB,IAAP;;;ACXF,YAAe,EAAE/D,gBAAF,EAAf;;AAEA,SAASA,QAAT,CAAgBoE,GAAhB,EAAqB;;SAEZ,EAAEC,oBAAF,EAAP;;WAESA,SAAT,CAAmB1B,KAAnB,EAA0B;QACpB,CAACA,MAAMtB,IAAP,IAAe7D,KAAK1F,OAAL,CAAa6K,MAAMzJ,IAAnB,EAAyByJ,MAAMtB,IAA/B,CAAnB,EAAyD;UACnD5E,QAAQ,4BAAIkG,MAAMxC,KAAN,CAAYmE,KAAZ,CAAkBC,IAAtB,GAA4BzL,MAA5B,CAAmC;eAAQ,CAAC0L,KAAK5E,MAAd;OAAnC,EAAyDX,MAAzD,CAAgE,UAACxC,KAAD,EAAQ+H,IAAR;eAAiB/H,MAAMF,MAAN,CAAaiI,KAAK/H,KAAlB,CAAjB;OAAhE,EAA2G,EAA3G,EAA+G3D,MAA/G,CAAsH;eAAQ,CAAC0E,KAAK1F,OAAL,CAAa6K,MAAMzJ,IAAnB,EAAyBA,IAAzB,CAAT;OAAtH,CAAZ;YACMmI,IAAN,GAAa+C,IAAIK,MAAJ,CAAWhI,KAAX,CAAb;YACM8E,IAAN,GAAaoB,MAAMxC,KAAN,CAAYY,QAAZ,CAAqB4B,MAAMzJ,IAA3B,EAAiCyJ,MAAMtB,IAAvC,CAAb;;QAEE3G,OAAOiI,MAAMxC,KAAN,CAAYa,QAAZ,CAAqB2B,MAAMpB,IAA3B,EAAiCoB,MAAMzJ,IAAvC,CAAX;QACI,CAACwB,IAAL,EACE,OAAO,IAAP;WACK,EAAEgE,MAAM,QAAR,EAAkBE,MAAM,MAAxB,EAAgCqB,MAAM,CAACvF,IAAD,CAAtC,EAAP;;;;ACjBJ,IAAIgK,MAAM1E,UAAV;AACA0E,IAAI1E,MAAJ,GAAaA,QAAb;;AAEA,AAEA,SAASA,QAAT,CAAgB2E,WAAhB,EAA6B;;MAEvB5L,MAAM4L,WAAN,CAAJ,EACEA,cAAc1K,KAAK2K,MAAL,KAAgB,KAA9B;;MAEEC,cAAcF,WAAlB;;SAEO,EAAEV,WAAF,EAAOQ,cAAP,EAAeK,UAAf,EAAP;;WAESb,MAAT,CAAac,GAAb,EAAkB3G,GAAlB,EAAuB;QACjBpF,IAAIgM,UAAUnM,MAAlB;QACIG,MAAM,CAAV,EAAa;UACPI,IAAIa,KAAKgL,GAAL,CAASJ,aAAT,IAA0B,KAAlC;aACOzL,IAAIa,KAAKuC,KAAL,CAAWpD,CAAX,CAAX;KAFF,MAGO,IAAIJ,MAAM,CAAV,EAAa;UACd,CAACD,MAAMgM,GAAN,CAAL,EACE3G,MAAM2G,GAAN,EAAWA,MAAM,CAAjB,CADF,KAEK,IAAIpM,MAAMC,OAAN,CAAcmM,GAAd,CAAJ;;mBACUA,GADV;;;;WAAA;WAAA;;;QAGHA,MAAM3G,GAAV;;iBACe,CAACA,GAAD,EAAM2G,GAAN,CADf;SAAA;SAAA;KAEA,OAAO9K,KAAKuC,KAAL,CAAWyH,YAAS7F,MAAM2G,GAAf,CAAX,IAAkCA,GAAzC;;;WAGON,MAAT,CAAgBS,KAAhB,EAAuB;QACjBvM,MAAMC,OAAN,CAAcsM,KAAd,KAAwB,CAACA,MAAMrM,MAAnC,EACE,OAAO,IAAP;QACE,CAACE,MAAMmM,KAAN,CAAL,EACE,OAAO,CAACjB,OAAIiB,KAAJ,CAAR;QACE,CAACA,KAAL,EACEA,QAAQ,CAAC,CAAD,EAAI,CAAJ,CAAR;WACKA,MAAMjB,OAAIiB,MAAMrM,MAAV,CAAN,CAAP;;;WAGOiM,IAAT,CAAcK,OAAd,EAAuB;QACjB,CAACpM,MAAMoM,OAAN,CAAL,EACER,cAAcE,cAAcM,OAA5B;WACKN,WAAP;;;;ACzCJ,IAAIT,MAAMM,IAAI1E,MAAJ,EAAV;;uBAEsEuC,SAAMvD;IAApEoG,2BAAAA;IAAOvF,AAAM2C,0BAAAA;IAAMC,AAAW4C,iCAAAA;IAAavF,8BAAAA;IAAUC,0BAAAA;;;AAE7D,iBAAe,EAAEC,gBAAF,EAAf;;AAEA,SAASA,QAAT,CAAgB7G,IAAhB,EAAsB2L,IAAtB,EAA4BQ,IAA5B,EAAkC;;MAE5BnM,OAAO,CAAP,KAAa,CAAjB,EACE,MAAM,IAAIoM,UAAJ,2CAAsDpM,IAAtD,QAAN;;MAEE,CAACJ,MAAM+L,IAAN,CAAL,EAAkB;QACZA,IAAJ,CAASA,IAAT;GADF,MAEO;UACCA,IAAN;WACOV,IAAIU,IAAJ,EAAP;;;MAGE3E,QAAQoC,SAAMvC,MAAN,CAAa7G,IAAb,EAAmBwH,IAAnB,EAAZ;;MAEIlE,QAAQ,EAAZ;MACI6H,QAAQkB,UAAUrM,IAAV,CAAZ;MACIsM,QAAQC,UAAUvM,IAAV,EAAgBmL,KAAhB,CAAZ;MACIlH,QAAQuI,UAAUrB,KAAV,EAAiBmB,KAAjB,CAAZ;WACSA,KAAT;;;;;;;yBAEiBnB,MAAMC,IAAvB;UAASC,KAAT;;;;;;8BACmBA,MAAK/H,KAAtB,mIAA6B;cAApBvD,KAAoB;;gBACrB8B,IAAN,CAAW9B,KAAX;gBACMwH,KAAN,CAAYxH,KAAZ,EAAkBkM,OAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAGaK,MAAMlB,IAAvB;UAASqB,IAAT;;;;;;8BACmBA,KAAKnJ,KAAtB,mIAA6B;cAApBvD,MAAoB;;gBACrB8B,IAAN,CAAW9B,MAAX;gBACMwH,KAAN,CAAYxH,MAAZ,EAAkBkM,OAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAGC,IAAIS,MAAT,IAAmBzI,MAAM0I,OAAzB,EAAkC;QAC5B5M,OAAOsE,KAAKrF,UAAL,CAAgB0N,MAAhB,CAAX;QACInH,OAAO8D,MAAX;QACIsD,UAAU1I,MAAM0I,OAAN,CAAcD,MAAd,CAAd;QACIrB,OAAOsB,QAAQ9D,IAAR,CAAa,UAAChJ,CAAD,EAAIC,CAAJ;aAAUD,EAAE4B,SAAF,CAAYzB,IAAZ,GAAmBF,EAAE2B,SAAF,CAAYzB,IAAzC;KAAb,EAA4D,CAA5D,CAAX;QACIyB,YAAY4C,KAAKlF,YAAL,CAAkBY,IAAlB,EAAwBJ,MAAxB,CAA+B;aAAY2E,YAAYgI,MAAMM,IAA9B;KAA/B,CAAhB;QACI,CAACnL,UAAU/B,MAAX,IAAqB2L,KAAK5J,SAAL,CAAezB,IAAf,KAAwB,CAA7C,IAAkDiL,IAAIK,MAAJ,EAAtD,EAAoE;aAC3DY,aAAP;WACKzF,MAAL,GAAc,IAAd;KAFF,MAGO,IAAIwE,IAAIK,MAAJ,EAAJ,EACL/F,OAAO0G,OAAP;UACI1E,KAAN,CAAYxH,IAAZ,EAAkBwF,IAAlB;;;MAGE4B,WAAWO,MAAMf,UAAN,EAAgB,QAAhB,CAAf;MACIS,OAAWM,MAAMd,MAAN,EAAY,QAAZ,CAAf;;MAEIiG,UAAU5B,IAAIH,GAAJ,CAAQ,CAAR,EAAW,IAAI,CAAf,CAAd;SACO+B,SAAP;UACQC,SAAMjG,MAAN,CAAa,EAAEpB,MAAM,OAAR,EAAiBsH,SAAS,UAA1B,EAAsCC,OAAO,IAAI,CAAjD,EAAb,CAAN;GAEF,IAAIC,QAAQhC,IAAIH,GAAJ,CAAQ,CAAR,EAAW,KAAK,CAAhB,CAAZ;SACOmC,OAAP;UACQC,KAAKrG,MAAL,CAAY,EAAEpB,MAAM,MAAR,EAAZ,CAAN;GAEF,IAAI0H,cAAchC,MAAMC,IAAN,CAAWzL,MAAX,CAAkB;WAAQ0L,KAAK5E,MAAb;GAAlB,CAAlB;;;;;;0BACiB0G,WAAjB,mIAA8B;UAArB9B,MAAqB;;UACxB/H,UAAQ,IAAI4D,GAAJ,CAAQmE,OAAK/H,KAAL,CAAW3D,MAAX,CAAkB;eAAQqH,MAAMc,KAAN,CAAY/H,IAAZ,MAAsBkM,OAAtB,IAA+B,CAACjF,MAAMM,UAAN,CAAiBvH,IAAjB,EAAuBL,MAA/D;OAAlB,EAAyFyB,GAAzF,CAA6FkD,KAAKtF,QAAlG,CAAR,CAAZ;UACI,CAACuE,QAAMtD,IAAX,EACE;aACKsD,QAAMtD,IAAb,EAAmB;YACb0M,UAASzB,IAAIK,MAAJ,6BAAehI,OAAf,GAAb;gBACM2E,MAAN,CAAayE,OAAb;YACIzB,IAAIK,MAAJ,CAAW,CAAX,CAAJ,EAAmB;cACbvL,SAAOsE,KAAKrF,UAAL,CAAgB0N,OAAhB,CAAX;cACI9B,OAAOsC,KAAKrG,MAAL,CAAY,EAAEpB,MAAM,MAAR,EAAZ,CAAX;gBACMmF,IAAN,EAAY7K,MAAZ;;;;;;;;;;;;;;;;;;;SAKC0J,MAAP,CAAczC,KAAd,EAAqB,EAAE1D,YAAF,EAAS6H,YAAT,EAAgBhE,kBAAhB,EAA0BC,UAA1B,EAArB;;SAEOJ,KAAP;;WAESU,KAAT,CAAeK,OAAf,EAAwBhI,IAAxB,EAA8B;QACxB2E,eAAJ;QACI3E,SAAS,QAAb,EAAuB;aACd,IAAP;eACS,IAAT;;QAEE,CAACA,IAAL,EAAW;UACLqN,QAAQjC,MAAMC,IAAN,CAAWzL,MAAX,CAAkB;eAAQ,CAAC0L,KAAK5E,MAAd;OAAlB,CAAZ;UACInD,eAAJ;UACIoB,MAAJ,EACEpB,SAAQ8J,MAAMjM,GAAN,CAAU;eAAQkK,KAAK3G,MAAb;OAAV,CAAR,CADF,KAGEpB,SAAQ8J,MAAMtH,MAAN,CAAa,UAACxC,KAAD,EAAQ+H,IAAR;eAAiB/H,MAAMF,MAAN,CAAaiI,KAAK/H,KAAlB,CAAjB;OAAb,EAAwD,EAAxD,CAAR;eACMA,OAAM3D,MAAN,CAAa;eAAQqH,MAAMc,KAAN,CAAY/H,IAAZ,MAAsBkM,OAAtB,IAA+B,CAACjF,MAAMM,UAAN,CAAiBvH,IAAjB,EAAuBL,MAA/D;OAAb,CAAR;aACOuL,IAAIK,MAAJ,CAAWhI,MAAX,CAAP;;QAEEyE,OAAJ,EAAa;UACP,CAACnI,MAAMmI,OAAN,CAAL,EACEf,MAAMO,KAAN,CAAYxH,IAAZ,EAAkBgI,OAAlB,EADF,KAGEf,MAAMU,KAAN,CAAYK,OAAZ,EAAqBhI,IAArB;;WAEGA,IAAP;;;;AAKJ,SAASsN,SAAT,CAAmBrN,IAAnB,EAAyBsN,OAAzB,EAAkChK,KAAlC,EAAyC;;MAEnCiK,QAAQ,EAAZ;;WAESC,SAAT,CAAmBzN,IAAnB,EAAyB;WAChBuN,YAAYvN,QAAQuN,OAAR,IAAmBjJ,KAAKlF,YAAL,CAAkBY,IAAlB,EAAwB,IAAxB,EAA8BJ,MAA9B,CAAqC;aAAY2E,YAAYgJ,OAAxB;KAArC,EAAsE5N,MAArG,CAAP;;;MAGEgD,IAAI1C,OAAOA,IAAf;;;;iBAEqBD,OAAOsE,KAAKnF,SAAL,CAAewD,CAAf,EAAkB1C,IAAlB,CAAtB;;QAAOC,CAAP;QAAUC,CAAV;QACAD,IAAI,CAAJ,KAAU,CAAV,IAAeC,IAAI,CAAJ,KAAU,CAAzB,IAA8BsN,UAAUzN,IAAV,CAAlC,EACE;QACEuD,KAAJ,EAAW;UACLmK,aAAanK,MAAMnC,GAAN,CAAU;eAAQ,CAACpB,KAAK,CAAL,IAAUE,CAAX,EAAcF,KAAK,CAAL,IAAUG,CAAxB,CAAR;OAAV,CAAjB;UACIwN,eAAeD,WAAW9N,MAAX,CAAkB;eAAQ,CAAC0E,KAAKxF,QAAL,CAAckB,IAAd,EAAoBC,IAApB,CAAD,IAA8BqE,KAAKzF,MAAL,CAAYmB,IAAZ,EAAkBC,IAAlB,CAA9B,IAAyDwN,UAAUzN,IAAV,CAAjE;OAAlB,CAAnB;UACI2N,aAAahO,MAAjB,EACE;;UAEEmC,IAAN,CAAW9B,IAAX;;;SAVK2C,GAAP,EAAY;;;6BAQN;;;SAKC6K,KAAP;;;AAGF,SAASlB,SAAT,CAAmBrM,IAAnB,EAAyB;;MAEnBkF,OAAOlF,OAAOA,IAAlB;;MAEImL,QAAQ,EAAE7H,OAAO,EAAT,EAAaJ,OAAO,EAApB,EAAwBkI,MAAM,EAA9B,EAAZ;;MAEIQ,MAAM,CAAV;MAAa3G,MAAM,CAAnB;MACI0I,QAAQ,CAAZ;MACIC,cAAJ;;KAEG;;QAEGnI,aAAJ;QAAUoI,eAAV;QAAkBvK,cAAlB;QAAyBJ,cAAzB;QAAgCqK,cAAhC;QACIO,QAAQ,CAAZ;QACIC,WAAW/N,IAAf;;OAEG;;aAEM,MAAP;UACIiL,IAAIK,MAAJ,CAAW,EAAX,CAAJ,EACE7F,OAAO,SAAP,CADF,KAEK,IAAIwF,IAAIK,MAAJ,CAAW,EAAX,CAAJ,EACH7F,OAAO,QAAP;;UAEEA,SAAS,MAAb,EAAqB;;qBACSzF,QAAO,CAACiL,IAAIH,GAAJ,CAAQ,CAAC7F,MAAM2G,GAAP,IAAc,CAAd,GAAkB,CAA1B,IAA+B,CAA/B,GAAmCA,GAApC,EAAyCX,IAAIH,GAAJ,CAAQ,CAAC7F,MAAM2G,GAAP,IAAc,CAAd,GAAkB,CAA1B,IAA+B,CAA/B,GAAmCA,GAA5E,CAA/B;;YAAOoC,KAAP;YAAcC,MAAd;kBACM,CAAV,EAAa,CAAb,2BAAmBjO,KAAnB;gBACQkO,KAAKzL,QAAL,CAAcoL,MAAd,CAAR;OAHF,MAIO,IAAIpI,SAAS,SAAb,EAAwB;YACzB3B,SAASmH,IAAIK,MAAJ,CAAW,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAX,CAAb;iBACS,CAACxH,MAAD,EAASA,MAAT,EAAiBA,MAAjB,CAAT;gBACQqK,WAAQ1L,QAAR,CAAiBoL,MAAjB,CAAR;OAHK,MAIA,IAAIpI,SAAS,QAAb,EAAuB;YACxB3B,UAASmH,IAAIK,MAAJ,CAAW,CAAC,CAAD,EAAI,CAAJ,CAAX,CAAb;iBACS,CAACxH,OAAD,EAASA,OAAT,EAAiBA,OAAjB,CAAT;gBACQsK,UAAO3L,QAAP,CAAgBoL,MAAhB,CAAR;;;cAGMR,UAAUrN,IAAV,EAAgB0D,OAAO+F,MAAP,CAAc,EAAd,EAAkB0B,MAAM7H,KAAxB,EAA+B6H,MAAMjI,KAArC,CAAhB,EAA6DI,KAA7D,CAAR;;UAEIiK,MAAM7N,MAAV,EACE;;;KAzBJ,QA6BSoO,QAAQC,QA7BjB;;QA+BI,CAACR,MAAM7N,MAAX,EACE;;sBAEWuL,IAAIK,MAAJ,CAAWiC,KAAX,CAxCZ;;QAwCItN,EAxCJ;QAwCOC,EAxCP;;WAyCM,CAAP,KAAaD,EAAb;WACO,CAAP,KAAaC,EAAb;;QAEIwE,eAAJ;QACIe,SAAS,MAAb,EAAqB;cACVyI,KAAKzL,QAAL,CAAcoL,MAAd,CAAT;cACSK,KAAK5L,QAAL,CAAcuL,MAAd,EAAsB,IAAtB,CAAT;eACSK,KAAK1L,SAAL,CAAeqL,MAAf,CAAT;KAHF,MAIO,IAAIpI,SAAS,SAAb,EAAwB;;;cACpB0I,WAAQ1L,QAAR,CAAiBoL,MAAjB,CAAT;cACSM,WAAQ7L,QAAR,CAAiBuL,MAAjB,CAAT;0BACkBA,MAAlB,wCAAU5N,EAAV,gBAAaC,EAAb;KAHK,MAIA,IAAIuF,SAAS,QAAb,EAAuB;;;cACnB2I,UAAO3L,QAAP,CAAgBoL,MAAhB,CAAT;cACSO,UAAO9L,QAAP,CAAgBuL,MAAhB,CAAT;2BACkBA,MAAlB,yCAAU5N,EAAV,gBAAaC,EAAb;;;QAGEmL,OAAO,EAAE9F,MAAM,MAAR,EAAgBE,UAAhB,EAAsBoI,cAAtB,EAA8BvK,YAA9B,EAAqCJ,YAArC,EAA4CwB,cAA5C,EAAX;;;;;;;4BAEiBpB,KAAjB;YAASvD,IAAT;;cACQuD,KAAN,CAAYvD,IAAZ,IAAoBsL,IAApB;;;;;;;;;;;;;;;;;;;;;;4BAEenI,KAAjB;YAASnD,MAAT;;cACQmD,KAAN,CAAYnD,MAAZ,IAAoBsL,IAApB;;;;;;;;;;;;;;;;;UAEID,IAAN,CAAWvJ,IAAX,CAAgBwJ,IAAhB;;aAES/H,MAAM5D,MAAf;YACQiO,QAAQzI,IAAhB;GAtEF,QAwES0I,QAAQ,IAxEjB;;SA0EOzC,KAAP;;;AAIF,SAASoB,SAAT,CAAmBvM,IAAnB,EAAyBmL,KAAzB,EAAgC;;MAE1BmB,QAAQ,EAAEhJ,OAAO,EAAT,EAAasJ,MAAM,EAAnB,EAAuBxB,MAAM,EAA7B,EAAZ;MACImC,QAAQ,IAAIrG,GAAJ,CAAQmG,UAAUrN,IAAV,EAAgBmL,MAAM7H,KAAtB,EAA6BnC,GAA7B,CAAiCkD,KAAKtF,QAAtC,CAAR,CAAZ;;MAEIwC,OAAO,CAAX;;SAEOgM,MAAMvN,IAAb,EAAmB;;QAEbyM,OAAO,EAAElH,MAAM,MAAR,EAAgBjC,OAAO,EAAvB,EAA2BsJ,MAAM,EAAjC,EAAX;;QAEI7I,QAAQM,KAAKrF,UAAL,CAAgBiM,IAAIK,MAAJ,6BAAeiC,KAAf,GAAhB,CAAZ;QACIvJ,QAAQ,CAACD,KAAD,CAAZ;QACIsK,eAAe,KAAnB;;WAEOrK,MAAMtE,MAAb,EAAqB;;UAEfK,OAAOiE,MAAMA,MAAMtE,MAAN,GAAe,CAArB,CAAX;YACM4D,KAAN,CAAYvD,IAAZ,IAAoB0M,IAApB;WACKnJ,KAAL,CAAWzB,IAAX,CAAgB9B,IAAhB;YACMkI,MAAN,CAAalI,KAAKhB,QAAL,EAAb;;UAEI0C,YAAY4C,KAAKlF,YAAL,CAAkBY,IAAlB,EAAwB,KAAxB,EAA+BwB,IAA/B,EAAqC5B,MAArC,CAA4C;eAAY4N,MAAMe,GAAN,CAAUhK,SAASvF,QAAT,EAAV,CAAZ;OAA5C,CAAhB;;UAEI0C,UAAU/B,MAAd,EAAsB;YAChB4E,WAAW2G,IAAIK,MAAJ,CAAW7J,SAAX,CAAf;;mCACe1B,IAFK;YAEfU,EAFe;YAEXC,EAFW;;sCAGL4D,QAHK;YAGf4E,EAHe;YAGXC,EAHW;;YAIhBoF,WAAW,CAAC9N,KAAK,CAACyI,KAAKzI,EAAN,IAAYc,IAAlB,EAAwBb,KAAK,CAACyI,KAAKzI,EAAN,IAAYa,IAAzC,CAAf;cACM+B,KAAN,CAAYiL,QAAZ,IAAwB9B,IAAxB;aACKnJ,KAAL,CAAWzB,IAAX,CAAgB0M,QAAhB;cACM1M,IAAN,CAAWyC,QAAX;YACIvE,SAASgE,KAAT,IAAkB,CAACsK,YAAvB,EAAqC;gBAC7BzB,IAAN,CAAW7M,IAAX,IAAmB0M,IAAnB;eACKG,IAAL,CAAU/K,IAAV,CAAe9B,IAAf;;uBAEa,KAAf;OAZF,MAaO;YACD,CAACsO,YAAL,EAAmB;gBACXzB,IAAN,CAAW7M,IAAX,IAAmB0M,IAAnB;eACKG,IAAL,CAAU/K,IAAV,CAAe9B,IAAf;;uBAEa,IAAf;cACMoE,GAAN;;;;UAKEiH,IAAN,CAAWvJ,IAAX,CAAgB4K,IAAhB;;;SAIKH,KAAP;;;AAIF,SAASE,SAAT,CAAmBrB,KAAnB,EAA0BmB,KAA1B,EAAiC;MAC3BkC,mBAAmBC,cAActD,KAAd,EAAqBmB,KAArB,CAAvB;;MAEIvI,QAAQkH,IAAIK,MAAJ,CAAWH,MAAMC,IAAjB,CAAZ;MACIpH,QAAQ,CAACD,KAAD,CAAZ;MACIE,QAAQ,EAAZ;MACIyK,OAAQ,IAAIxH,GAAJ,EAAZ;MACIyH,OAAQ,IAAIzH,GAAJ,EAAZ;;MAEIyF,UAAUxB,MAAMC,IAAN,CAAWhI,MAAX,CAAkBkJ,MAAMlB,IAAxB,CAAd;;;;;;0BACmBuB,OAAnB,mIAA4B;UAAnBiC,MAAmB;;aACnBnN,SAAP,GAAmB,IAAIoN,GAAJ,EAAnB;aACO5K,KAAP,GAAe,EAAf;;;;;;;;;;;;;;;;;;QAIIC,OAAOF,MAAMA,MAAMtE,MAAN,GAAe,CAArB,CAAX;SACKsI,GAAL,CAAS9D,IAAT;;QAEI4K,mBAAJ;QACI5K,KAAKqB,IAAL,KAAc,MAAlB,EACEuJ,aAAa5K,KAAKhB,KAAL,CAAWvD,MAAX,CAAkB,gBAAQ;UACjC,EAAEI,QAAQyO,gBAAV,CAAJ,EACE,OAAO,KAAP;UACEjK,OAAOiK,iBAAiBzO,IAAjB,EAAuB4K,IAAvB,CAA4B;eAAUiE,WAAW1K,IAArB;OAA5B,CAAX;aACO,CAACyK,KAAKL,GAAL,CAAS/J,IAAT,CAAD,IAAmBA,KAAKjB,KAAL,CAAW5D,MAAX,GAAoB,CAA9C;KAJW,CAAb,CADF,KAOK,IAAIwE,KAAKqB,IAAL,KAAc,MAAlB,EACHuJ,aAAa5K,KAAKZ,KAAL,CAAWwC,MAAX,CAAkB,UAACC,MAAD,EAAShG,IAAT,EAAkB;aACxCgG,OAAO3C,MAAP,CAAciB,KAAKlF,YAAL,CAAkBY,IAAlB,EAAwBJ,MAAxB,CAA+B;eAAY2E,YAAYkK,gBAAxB;OAA/B,CAAd,CAAP;KADW,EAEV,EAFU,CAAb;;iBAIWM,WAAWnP,MAAX,CAAkB,gBAAQ;UACjC4E,OAAOiK,iBAAiBzO,IAAjB,EAAuB4K,IAAvB,CAA4B;eAAUiE,WAAW1K,IAArB;OAA5B,CAAX;UACI6K,SAAS1K,KAAKlF,YAAL,CAAkBY,IAAlB,EAAwB,IAAxB,EAA8BJ,MAA9B,CAAqC;eAAY2E,YAAYL,KAAxB;OAArC,CAAb;aACO,EAAElE,QAAQkE,KAAV,KAAoB,CAACC,KAAKzC,SAAL,CAAe6M,GAAf,CAAmB/J,IAAnB,CAArB,KAAkD,CAACmK,KAAKJ,GAAL,CAAS/J,IAAT,CAAD,IAAmB0G,IAAIK,MAAJ,CAAW,CAAX,CAArE,KAAuF,CAACyD,OAAOrP,MAAtG;KAHW,CAAb;;QAMIsP,eAAeF,WAAW3N,GAAX,CAAekD,KAAKtF,QAApB,CAAnB;;QAEI+P,WAAWpP,MAAf,EAAuB;UACjB6G,OAAO0E,IAAIK,MAAJ,CAAWwD,UAAX,CAAX;UACInC,WAAU6B,iBAAiBjI,IAAjB,CAAd;UACIhC,OAAOoI,SAAQhC,IAAR,CAAa;eAAUiE,WAAW1K,IAArB;OAAb,CAAX;;;;;;8BACiBK,KAAKjB,KAAtB,mIAA6B;cAApBvD,IAAoB;;eACtBZ,YAAL,CAAkBY,IAAlB,EAAwBkP,OAAxB,CAAgC,oBAAY;gBACtCD,aAAa/F,QAAb,CAAsB3E,SAASvF,QAAT,EAAtB,CAAJ,EAAgD;qBACvCyP,iBAAiBlK,QAAjB,CAAP;;WAFJ;;;;;;;;;;;;;;;;;YAMIzC,IAAN,CAAW0C,IAAX;YACMgC,IAAN,IAAcoG,QAAd;WACK3E,GAAL,CAAS9D,IAAT;cACQA,IAAR,EAAcK,IAAd,EAAoBgC,IAApB;KAdF,MAeO;YACCpC,GAAN;UACID,KAAKqB,IAAL,KAAc,MAAd,IAAwBrB,KAAKzC,SAAL,CAAezB,IAAf,KAAwB,CAApD,EAAuD;YACjDuE,QAAOL,KAAKzC,SAAL,CAAeyN,OAAf,GAAyB3K,IAAzB,GAAgChF,KAAhC,CAAsC,CAAtC,CAAX;YACIQ,SAAOmE,KAAKzC,SAAL,CAAeqJ,GAAf,CAAmBvG,KAAnB,CAAX;eACON,MAAMlE,MAAN,CAAP;mBACWmE,IAAX,EAAiBK,KAAjB;aACK0D,MAAL,CAAY/D,IAAZ;aACK8D,GAAL,CAAS9D,IAAT;;;;;SAhDCF,MAAMtE,MAAb,EAAqB;;;;UAqDb;aACGuE,KADH;UAEAP,OAAOC,IAAP,CAAYM,KAAZ,EAAmB9C,GAAnB,CAAuBkD,KAAKrF,UAA5B;GAFR;;SAKOiF,KAAP;;;AAIF,SAASwK,aAAT,CAAuBtD,KAAvB,EAA8BmB,KAA9B,EAAqC;MAC/BkC,mBAAmB,EAAvB;SACO7K,IAAP,CAAYwH,MAAMjI,KAAlB,EACG/B,GADH,CACOkD,KAAKrF,UADZ,EAEGiQ,OAFH,CAEW,gBAAQ;QACXtC,UAAU,IAAIzF,GAAJ,CAAQ7C,KAAKlF,YAAL,CAAkBgQ,IAAlB,EACnBxP,MADmB,CACZ;aAAY2E,YAAY6G,MAAM7H,KAAlB,IAA2BgB,YAAYgI,MAAMhJ,KAAzD;KADY,EAEhBnC,GAFgB,CAEZ;aAAcgK,MAAM7H,KAAN,CAAYgB,QAAZ,KAAyBgI,MAAMhJ,KAAN,CAAYgB,QAAZ,CAAvC;KAFY,CAAR,CAAd;QAGIqI,QAAQ3M,IAAR,IAAgB,CAApB,EACEwO,iBAAiBW,IAAjB,gCAA6BxC,OAA7B;GAPN;SASO6B,gBAAP;;;AAGF,SAASY,OAAT,CAAiBlL,IAAjB,EAAuBK,IAAvB,EAA6BgC,IAA7B,EAAmC;aACtBrC,IAAX,EAAiBK,IAAjB,EAAuBgC,IAAvB;aACWhC,IAAX,EAAiBL,IAAjB,EAAuBqC,IAAvB;;;AAGF,SAAS8I,UAAT,CAAoBnL,IAApB,EAA0BK,IAA1B,EAAgCgC,IAAhC,EAAsC;OAC/B9E,SAAL,CAAe6N,GAAf,CAAmB/K,IAAnB,EAAyBgC,IAAzB;OACKtC,KAAL,CAAWsC,IAAX,IAAmBhC,IAAnB;;;AAGF,SAASgL,UAAT,CAAoBrL,IAApB,EAA0BK,IAA1B,EAAgC;gBAChBL,IAAd,EAAoBK,IAApB;gBACcA,IAAd,EAAoBL,IAApB;;;AAGF,SAASsL,aAAT,CAAuBtL,IAAvB,EAA6BK,IAA7B,EAAmC;MAC7BkL,YAAYvL,KAAKzC,SAAL,CAAeqJ,GAAf,CAAmBvG,IAAnB,CAAhB;SACOL,KAAKD,KAAL,CAAWwL,SAAX,CAAP;;;AAGF,SAASC,QAAT,CAAkBpD,KAAlB,EAAyB;QACjBM,IAAN,GAAa,EAAb;;;;;;;UACSH,IAFc;;UAGjBnJ,QAAQ,IAAI4D,GAAJ,CAAQuF,KAAKnJ,KAAL,CAAWnC,GAAX,CAAekD,KAAKtF,QAApB,CAAR,CAAZ;UACI6N,OAAQ,EAAZ;UACI5I,QAAQyI,KAAKG,IAAjB;aACO5I,MAAMtE,MAAb,EAAqB;YACfK,OAAOiE,MAAMG,GAAN,EAAX;YACI1C,YAAY4C,KAAKlF,YAAL,CAAkBY,IAAlB,EAAwBJ,MAAxB,CAA+B;iBAAY2E,YAAYgI,MAAMhJ,KAAlB,IAA2BgB,YAAYmI,KAAKxI,KAAxD;SAA/B,CAAhB;YACIxC,UAAU/B,MAAV,GAAmB,CAAvB,EAA0B;eACnBmC,IAAL,CAAU9B,IAAV;;;cAGIkI,MAAN,CAAalI,KAAKhB,QAAL,EAAb;eACOuN,MAAMhJ,KAAN,CAAYvD,IAAZ,CAAP;YACIwE,OAAO9C,UAAU,CAAV,CAAX;YACI8C,IAAJ,EACEP,MAAMS,OAAN,CAAcF,IAAd;;WAECjB,KAAL,GAAa,4BAAIA,KAAJ,GAAWnC,GAAX,CAAekD,KAAKrF,UAApB,CAAb;WACK4N,IAAL,GAAaA,OAAOA,KACjBjN,MADiB,CACV;eAAQI,QAAQuM,MAAMhJ,KAAd,IAAuBe,KAAKlF,YAAL,CAAkBY,IAAlB,EAAwBJ,MAAxB,CAA+B;iBAAY2E,YAAYgI,MAAMhJ,KAA9B;SAA/B,EAAoE5D,MAApE,KAA+E,CAA9G;OADU,CAApB;WAEKuP,OAAL,CAAa;eAAQ3C,MAAMM,IAAN,CAAW7M,IAAX,IAAmB0M,IAA3B;OAAb;;;2BApBeH,MAAMlB,IAAvB,wIAA6B;;;;;;;;;;;;;;;;;;;ACxY/B,aAAe,EAAEN,UAAF,EAAf;;AAEA,SAASA,KAAT,CAAa9D,KAAb,EAAoBjD,KAApB,EAA2B4L,KAA3B,EAAkC;MAC5BrM,QAAQ,EAAZ;MACIZ,IAAI,CAAR;SACOA,GAAP;YACUY,MAAMF,MAAN,CAAawM,UAAU5I,KAAV,EAAiBjD,KAAjB,EAAwB4L,KAAxB,EAA+BjN,CAA/B,CAAb,CAAR;GACFY,MAAMzB,IAAN,CAAWkC,KAAX;SACOT,KAAP;;;AAGF,SAASsM,SAAT,CAAmB5I,KAAnB,EAA0BjD,KAA1B,EAAiC4L,KAAjC,EAAwCE,MAAxC,EAAgD;UACtCF,SAASnJ,QAAjB;MACIxG,OAAOgH,MAAMhH,IAAjB;;6BACa+D,KAHiC;MAGzC9D,CAHyC;MAGtCC,CAHsC;;MAI1CoD,QAAQ,EAAZ;MACIwM,UAAU,EAAd;MACIC,aAAa,KAAjB;OACK,IAAIC,MAAM,CAAf,EAAkBA,OAAOL,KAAzB,EAAgCK,KAAhC,EAAuC;2BACNC,gBAAgBD,GAAhB,EAAqB,CAArB,EAAwBH,MAAxB,CADM;;QAChCK,UADgC;QACpBC,UADoB;;QAEjCpQ,OAAO,CAACE,IAAIiQ,UAAL,EAAiBhQ,IAAIiQ,UAArB,CAAX;QACI,CAAC9L,KAAKxF,QAAL,CAAckB,IAAd,EAAoBC,IAApB,CAAL,EACE;SACG,IAAIoQ,MAAM,CAAf,EAAkBA,OAAOJ,GAAzB,EAA8BI,KAA9B,EAAqC;8BACJH,gBAAgBD,GAAhB,EAAqBI,GAArB,EAA0BP,MAA1B,CADI;;UAC9BK,WAD8B;UAClBC,WADkB;;UAE/BpQ,QAAO,CAACE,IAAIiQ,WAAL,EAAiBhQ,IAAIiQ,WAArB,CAAX;UACI,CAAC9L,KAAKxF,QAAL,CAAckB,KAAd,EAAoBC,IAApB,CAAD,IAA8BkQ,cAAaA,WAAb,GAA0BC,cAAaA,WAAvC,GAAoDR,QAAQA,KAA9F,EACE;UACE,CAACI,UAAL,EAAiB;;cACXM,aAAaC,cAAcN,GAAd,EAAmBI,GAAnB,CAAjB;cACIG,UAAU,CAACT,QAAQnF,IAAR,CAAa;mBAAU6F,OAAOzM,KAAP,IAAgBsM,WAAWtM,KAA3B,IAAoCyM,OAAOC,GAAP,IAAcJ,WAAWI,GAAvE;WAAb,CAAf;cACIF,OAAJ,EAAa;kBACL1O,IAAN,CAAW9B,KAAX;gBACIiH,MAAMK,MAAN,CAAatH,KAAb,EAAmB2Q,MAAvB,EAA+B;kBACzBrP,cAAJ;mBACKA,QAAQ,CAAb,EAAgBA,QAAQyO,QAAQpQ,MAAhC,EAAwC2B,OAAxC;oBACMyO,QAAQzO,KAAR,EAAe0C,KAAf,IAAwBsM,WAAWtM,KAAvC,EACE;eACJ,IAAI4M,OAAOb,QAAQzO,QAAQ,CAAhB,CAAX;kBACIkD,OAAOuL,QAAQzO,KAAR,CAAX;kBACIuP,WAAWvP,QAAQ,CAAR,IAAasP,KAAKF,GAAL,GAAWJ,WAAWtM,KAAlD;kBACI8M,WAAWxP,QAAQyO,QAAQpQ,MAAhB,IAA0B6E,KAAKR,KAAL,GAAasM,WAAWI,GAAjE;kBACII,QAAJ;oBACMD,QAAJ,EAAc;uBACPH,GAAL,GAAWlM,KAAKkM,GAAhB;0BACQK,MAAR,CAAezP,KAAf,EAAsB,CAAtB;iBAFF,MAIEkD,KAAKR,KAAL,GAAasM,WAAWtM,KAAxB;qBAEF,IAAI6M,QAAJ,EACED,KAAKF,GAAL,GAAWJ,WAAWI,GAAtB,CADF,KAGEX,QAAQgB,MAAR,CAAezP,KAAf,EAAsB,CAAtB,EAAyBgP,UAAzB;kBACAG,SAASV,QAAQ,CAAR,CAAb;2BACaA,QAAQpQ,MAAR,KAAmB,CAAnB,IAAwB8Q,OAAOzM,KAAP,KAAiB,CAAzC,IAA8CyM,OAAOC,GAAP,KAAe,CAA1E;;;;;;;SAMHnN,KAAP;;;AAGF,SAASgN,aAAT,CAAuBN,GAAvB,EAA4BI,GAA5B,EAAiC;MAC3BrM,QAASqM,OAAYJ,MAAM,CAAlB,CAAb;MACIS,MAAQ,CAACL,MAAM,CAAP,KAAaJ,MAAM,CAAnB,CAAZ;SACO,EAACjM,YAAD,EAAQ0M,QAAR,EAAP;;;AAGF,SAASR,eAAT,CAAyBD,GAAzB,EAA8BI,GAA9B,EAAmCP,MAAnC,EAA2C;UACjCA,MAAR;SACO,CAAL;aAAe,CAAEO,GAAF,EAAO,CAACJ,GAAR,CAAP;SACH,CAAL;aAAe,CAAEA,GAAF,EAAO,CAACI,GAAR,CAAP;SACH,CAAL;aAAe,CAAEJ,GAAF,EAAQI,GAAR,CAAP;SACH,CAAL;aAAe,CAAEA,GAAF,EAAQJ,GAAR,CAAP;SACH,CAAL;aAAe,CAAC,CAACI,GAAF,EAAQJ,GAAR,CAAP;SACH,CAAL;aAAe,CAAC,CAACA,GAAF,EAAQI,GAAR,CAAP;SACH,CAAL;aAAe,CAAC,CAACJ,GAAF,EAAO,CAACI,GAAR,CAAP;SACH,CAAL;aAAe,CAAC,CAACA,GAAF,EAAO,CAACJ,GAAR,CAAP;;;;AC9EZ,IAAIe,iBAAiB,EAArB;;AAEA,IAAMC,UAAU,IAAhB;AACA,IAAMC,UAAU,KAAhB;;AAEA,cAAe,EAAEpK,gBAAF,EAAf;;AAEA,SAASA,QAAT,CAAgB7G,IAAhB,EAAsB2L,IAAtB,EAA4B;;MAEtBV,MAAMM,IAAI1E,MAAJ,CAAW8E,IAAX,CAAV;MACIuF,KAAKC,MAAGtK,MAAH,CAAUoE,GAAV,CAAT;;MAEI5J,QAAQ,CAAZ;;MAEI+P,OAAO;YAAA,EACJpK,OAAO,EADH,EACO3D,OAAO,IADd,EACoB8I,MAAM,IAD1B;gBAAA,EAEFkF,MAFE,EAEEC,QAFF,EAEOC;GAFlB;;SAKOH,IAAP;;WAESrN,KAAT,GAAiB;SACViD,KAAL,GAAa,EAAb;SACK3D,KAAL,GAAa,CAAb;SACK8I,IAAL,GAAYW,SAAMjG,MAAN,CAAa,EAAEpB,MAAM,OAAR,EAAiBsH,SAAS,MAA1B,EAAb,CAAZ;;WAEO,OAAP;WACOqE,IAAP;;;WAGOI,IAAT,GAAgB;QACVhI,cAAJ;QAAWiI,SAAS,4BAAIL,KAAKpK,KAAL,CAAWoK,KAAK/N,KAAhB,EAAuB4D,QAA3B,GAAqCtH,MAArC,CAA4C;aAAWoI,QAAQxC,IAAR,KAAiB,OAA5B;KAA5C,CAApB;QACI,CAACkM,OAAO/R,MAAZ,EACE,OAAO,IAAP;WACK0R,KAAKjF,IAAL,CAAUxC,MAAjB,EAAyB;cACftI,QAAQoQ,OAAO/R,MAAvB;cACQ+R,OAAOpQ,KAAP,CAAR;UACImI,MAAMG,MAAV,EAAkB;YACZH,MAAME,MAAN,GAAe,CAAnB,EACEF,MAAME,MAAN,IAAgBF,MAAMwD,KAAtB;eACKxD,MAAME,MAAN,IAAgB,CAAvB,EAA0B;gBAClBU,IAAN;cACIE,SAASd,MAAMc,MAAnB;cACI,CAACA,MAAL,EAAa;gBACPd,UAAU4H,KAAKjF,IAAnB,EACE,OAAOuF,OAAO,MAAP,CAAP;qBACOR,GAAGhG,SAAH,CAAa1B,KAAb,CAAT;gBACI,CAACc,MAAL,EACE,OAAOoH,OAAO,MAAP,CAAP;;wBAEiBpH,MAVG;cAUlB7E,IAVkB,WAUlBA,IAVkB;cAUZqB,IAVY,WAUZA,IAVY;;cAWpBf,SAASyD,MAAMa,OAAN,CAAcC,MAAd,CAAb;cACIvE,WAAWiL,OAAf,EAAwB;gBAClB,CAACjL,MAAD,IAAWA,WAAWkL,OAA1B,EAAmC;kBAC7BzH,UAAU4H,KAAKjF,IAAnB,EACE,OAAOuF,yBAAUjM,IAAV,YAAuB+D,KAAvB,2BAAiC1C,IAAjC,GAAP;;gBAEAf,OAAOR,IAAP,KAAgB,OAApB,EAA6B;oBACrBwE,MAAN,CAAahE,MAAb;qBACO,QAAP;qBACO,CAACA,MAAD,CAAP;aAHF,MAIO,IAAIA,OAAOR,IAAP,KAAgB,MAApB,EAA4B;uCAC1BE,IAAP,EAAa+D,KAAb,2BAAuB1C,IAAvB;oBACMkD,OAAN,CAAcjE,MAAd;qBACO,MAAP;qBACO,CAACA,MAAD,CAAP;aAJK,MAKA,IAAI1B,KAAK/E,MAAL,CAAYyG,MAAZ,CAAJ,EAAyB;oBACxBkE,IAAN,CAAWlE,MAAX;qBACO,MAAP;qBACO,CAACA,MAAD,CAAP;;WAjBJ,MAmBO;gBACDN,SAAS,SAAT,IAAsBA,SAAS,QAAnC,EAA6C;oBACrC6E,MAAN,GAAe,IAAf;kBACI7E,SAAS,SAAb,EACEM,SAASmE,SAAT,CADF,KAEK,IAAIzE,SAAS,QAAb,EACHM,SAASoE,QAAT;kBACEpE,WAAWkL,OAAf,EAAwB;yCACZxL,IAAV,YAAuB+D,KAAvB,2BAAiC1C,IAAjC;;;;;gBAKAwD,MAAN,GAAe,IAAf;gBACMZ,MAAN;cACI3D,WAAWkL,OAAf,EACES,yBAAOjM,IAAP,EAAa+D,KAAb,2BAAuB1C,IAAvB;;;;;SAKHqF,IAAL,CAAU/B,IAAV;WACOsH,OAAO,MAAP,CAAP;;;WAGOxH,OAAT,GAAmB;QACbkH,KAAKjF,IAAL,CAAUnF,KAAd,EACEoK,KAAKjF,IAAL,CAAUnF,KAAV,CAAgBW,IAAhB,CAAqByJ,KAAKjF,IAA1B;SACG9I,KAAL;QACIA,cAAJ;QACI+N,KAAKpK,KAAL,CAAWoK,KAAK/N,KAAhB,CAAJ,EACEA,QAAQ+N,KAAKpK,KAAL,CAAWoK,KAAK/N,KAAhB,CAAR,CADF,KAEK;cACKsO,WAAQ9K,MAAR,CAAe7G,IAAf,EAAqBiL,GAArB,CAAR;WACKjE,KAAL,CAAWoK,KAAK/N,KAAhB,IAAyBA,KAAzB;;UAEIqE,KAAN,CAAY0J,KAAKjF,IAAjB,EAAuB9I,MAAM8D,QAA7B;SACKgF,IAAL,CAAUnB,OAAV,GAAoBoG,KAAK/N,KAAzB;;WAEO,IAAP;;;WAGO8G,MAAT,GAAkB;QACZ,CAACiH,KAAKpK,KAAL,CAAWoK,KAAK/N,KAAL,GAAa,CAAxB,CAAL,EACE,OAAO,KAAP;SACG8I,IAAL,CAAUnF,KAAV,CAAgBW,IAAhB,CAAqByJ,KAAKjF,IAA1B;SACK9I,KAAL;QACIA,QAAQ+N,KAAKpK,KAAL,CAAWoK,KAAK/N,KAAhB,CAAZ;UACMqE,KAAN,CAAY0J,KAAKjF,IAAjB,EAAuB9I,MAAM+D,IAA7B;SACK+E,IAAL,CAAUnB,OAAV,GAAoBoG,KAAK/N,KAAzB;;WAEO,IAAP;;;WAGOgO,EAAT,CAAYO,KAAZ,EAAmBC,QAAnB,EAA6B;QACvBC,SAASF,KAAb;QACI,CAACpS,MAAMC,OAAN,CAAcmS,KAAd,CAAL,EACEE,SAAS,CAACF,KAAD,CAAT;;;;;;2BACgBE,MAAlB,8HAA0B;YAAjBF,MAAiB;;YACpBG,YAAYhB,eAAea,MAAf,CAAhB;YACI,CAACG,SAAL,EACEA,YAAYhB,eAAea,MAAf,IAAwB,IAAI1K,GAAJ,EAApC;kBACQc,GAAV,CAAc6J,QAAd;;;;;;;;;;;;;;;;;WAEKT,IAAP;;;WAGOE,GAAT,CAAaM,KAAb,EAAoBC,QAApB,EAA8B;QACxBE,YAAYhB,eAAea,KAAf,CAAhB;QACI,CAACG,SAAL,EACE,OAAO,KAAP;cACQ9J,MAAV,CAAiB4J,QAAjB;WACO,IAAP;;;WAGON,KAAT,CAAe9L,IAAf,EAA8B;sCAANqB,IAAM;UAAA;;;QACxB,CAACsK,KAAKjF,IAAL,CAAUxC,MAAf,EACE,OAAO,KAAP;SACGwC,IAAL,CAAU7B,MAAV,GAAmB,EAAE/E,MAAM,QAAR,EAAkBE,UAAlB,EAAwBqB,UAAxB,EAAnB;;WAEO,IAAP;;;WAGO4K,MAAT,CAAgBE,KAAhB,EAAgC;QAC1BG,YAAYhB,eAAea,KAAf,CAAhB;QACI,CAACG,SAAL,EACE,OAAO,KAAP;;uCAHsBjL,IAAM;UAAA;;;;;;;;4BAITiL,SAArB;YAASF,QAAT;;kCACc/K,IAAZ;;;;;;;;;;;;;;;;;WACK,IAAP;;;;AChKJ,iBAAe,EAAED,gBAAF,EAAf;;AAEA,SAASA,QAAT,CAAgB7G,IAAhB,EAAsB;;MAEhBgS,SAASC,SAASC,aAAT,CAAuB,QAAvB,CAAb;SACOlE,KAAP,GAAegE,OAAO/D,MAAP,GAAgBjO,IAA/B;;MAEImS,UAAUH,OAAOI,UAAP,CAAkB,IAAlB,CAAd;;MAEIC,UAAU;cAAA,EACNF,gBADM;gBAAA,EAELG;GAFT;;SAKOD,OAAP;;WAESE,KAAT,CAAexK,OAAf,EAAwB;;QAElB,OAAOA,OAAP,KAAmB,QAAvB,EACEA,UAAUkK,SAASO,aAAT,CAAuBzK,OAAvB,CAAV;;QAEE,CAACA,OAAL,EACE,MAAM,IAAIvG,SAAJ,wCAAkDuG,OAAlD,QAAN;;YAEM0K,WAAR,CAAoBT,MAApB;;WAEOK,OAAP;;;WAIOC,MAAT,CAAgBI,SAAhB,EAA2B;;QAErBpP,QAAQI,OAAOC,IAAP,CAAY+O,SAAZ,EAAuBvR,GAAvB,CAA2BkD,KAAKrF,UAAhC,CAAZ;;QAEI2T,YAAYR,QAAQS,eAAR,CAAwB5S,IAAxB,EAA8BA,IAA9B,CAAhB;QACI8G,OAAO6L,UAAU7L,IAArB;;;;;;;2BAEiBxD,KAAjB,8HAAwB;YAAfvD,IAAe;;YAClBsB,QAAQgD,KAAKpF,OAAL,CAAac,IAAb,EAAmBC,IAAnB,CAAZ;YACI0C,IAAIrB,QAAQ,CAAhB;YACIwR,QAAQH,UAAU3S,IAAV,CAAZ;YACI,CAAC8S,KAAL,EACE;;mCACuBA,KANH;YAMjBC,GANiB;YAMZC,KANY;YAMLC,IANK;;aAOjBtQ,CAAL,IAAcoQ,GAAd;aACKpQ,IAAI,CAAT,IAAcqQ,KAAd;aACKrQ,IAAI,CAAT,IAAcsQ,IAAd;aACKtQ,IAAI,CAAT,IAAc,GAAd;;;;;;;;;;;;;;;;;YAGMuQ,YAAR,CAAqBN,SAArB,EAAgC,CAAhC,EAAmC,CAAnC;;;;AClDJ,IAAMO,aAAa,EAAnB;;uBAEkC7O,KAAKhG;IAA/BC,wBAAAA;IAAMC,sBAAAA;IAAIC,yBAAAA;IAAOC,wBAAAA;qBACE2K,SAAMvD;IAAzBc,0BAAAA;IAAUC,sBAAAA;;;AAElB,IAAMuM,QAAS,CAAG,CAAH,EAAQ,CAAR,EAAa,CAAb,CAAf;AACA,IAAMC,OAAS,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAf;AACA,IAAMC,SAAS,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAf;AACA,IAAMC,QAAS,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAf;;AAEA,IAAMC,MAAS,CAAC,GAAD,EAAQ,CAAR,EAAa,CAAb,CAAf;AACA,IAAMC,SAAS,CAAC,GAAD,EAAQ,CAAR,EAAa,CAAb,CAAf;;AAEA,IAAMC,SAAS,CAAC,GAAD,EAAM,GAAN,EAAa,CAAb,CAAf;AACA,IAAMC,QAAS,CAAC,GAAD,EAAM,GAAN,EAAa,CAAb,CAAf;;AAEA,IAAMC,OAAS,CAAG,CAAH,EAAM,GAAN,EAAa,CAAb,CAAf;AACA,IAAMC,QAAS,CAAG,CAAH,EAAM,GAAN,EAAa,CAAb,CAAf;;AAEA,IAAMC,OAAS,CAAG,CAAH,EAAQ,CAAR,EAAW,GAAX,CAAf;AACA,IAAMC,OAAS,CAAG,CAAH,EAAQ,CAAR,EAAW,GAAX,CAAf;;AAEA,SAASC,MAAT,CAAgBlB,KAAhB,EAAuB;UACbA,KAAR;SACOM,KAAL;aAAoBA,KAAP;SACRC,IAAL;aAAoBA,IAAP;SACRC,MAAL;aAAoBD,IAAP;SACRE,KAAL;aAAoBF,IAAP;SACRG,GAAL;aAAoBC,MAAP;SACRA,MAAL;aAAoBA,MAAP;SACRC,MAAL;aAAoBC,KAAP;SACRA,KAAL;aAAoBA,KAAP;SACRC,IAAL;aAAoBC,KAAP;SACRA,KAAL;aAAoBA,KAAP;SACRC,IAAL;aAAoBC,IAAP;SACRA,IAAL;aAAoBA,IAAP;;SAER,IAAP;;;AAGF,SAASE,OAAT,CAAiBnB,KAAjB,EAAwB;UACdA,KAAR;SACOM,KAAL;aAAoBC,IAAP;SACRA,IAAL;aAAoBC,MAAP;SACRA,MAAL;aAAoBC,KAAP;SACRA,KAAL;aAAoBA,KAAP;SACRC,GAAL;aAAoBA,GAAP;SACRC,MAAL;aAAoBD,GAAP;SACRE,MAAL;aAAoBA,MAAP;SACRC,KAAL;aAAoBD,MAAP;SACRE,IAAL;aAAoBA,IAAP;SACRC,KAAL;aAAoBD,IAAP;SACRE,IAAL;aAAoBA,IAAP;SACRC,IAAL;aAAoBD,IAAP;;SAER,IAAP;;;AAGF,IAAMI,UAAU;SACFd,KADE;QAEFG,KAFE;QAGFG,MAHE;YAIFC,KAJE;cAKFJ,KALE;YAMFF,IANE;QAOFQ,KAPE;SAQFD,IARE;SASFJ,GATE;QAUFM,IAVE;UAWFL;CAXd;;AAcA,IAAIpC,OAAO8C,QAAKrN,MAAL,CAAYqM,UAAZ,CAAX;AACA,IAAIb,UAAU8B,WAAQtN,MAAR,CAAeqM,UAAf,EAA2BX,KAA3B,CAAiC,MAAjC,CAAd;;AAEA6B,QAAQC,GAAR,CAAYjD,KAAKnG,GAAL,CAASU,IAAT,EAAZ;;AAEAyF,KACGC,EADH,CACM,CAAC,OAAD,EAAU,MAAV,CADN,EACyBiB,MADzB,EAGGjB,EAHH,CAGM,MAHN,EAGc,iBAAS;MACf7H,UAAU4H,KAAKjF,IAAnB,EACE,IAAI/D,IAAJ,EACEkM,OAAOC,qBAAP,CAA6BhT,IAA7B;CANR,EASG8P,EATH,CASM,WATN,EASmB,iBAAS;MACpB7H,UAAU4H,KAAKjF,IAAnB,EACE,IAAI/D,IAAJ,EACEA,OAAO,IAAP;CAZR,EAeGiJ,EAfH,CAeM,MAfN,EAec,iBAAS;MACf7H,UAAU4H,KAAKjF,IAAnB,EACEqI,cAAc,IAAd,EAAoBpM,OAAO,IAA3B;CAjBN,EAoBGrE,KApBH;;AAsBA,IAAI0Q,kBAAkB;;QAEXlW,EAFW;WAGXA,EAHW;;QAKTD,IALS;aAMTA,IANS;;QAQTG,IARS;aASTA,IATS;;QAWRD,KAXQ;cAYRA;;CAZd;;AAgBA,IAAIgW,cAAc,KAAlB;AACAF,OAAOI,gBAAP,CAAwB,SAAxB,EAAmC,iBAAS;MACpC/S,GADoC,GACtBiQ,KADsB,CACpCjQ,GADoC;MAC/BgT,IAD+B,GACtB/C,KADsB,CAC/B+C,IAD+B;;MAEtC,CAACH,WAAD,IAAgB,CAACpM,IAArB,EAA2B;QACrBoC,YAAYiK,gBAAgBE,IAAhB,CAAhB;QACInK,SAAJ,EACE4G,KAAKG,KAAL,CAAW,MAAX,EAAmB/G,SAAnB,EADF,KAEK,IAAI7I,QAAQ,GAAZ,EACHyP,KAAKG,KAAL,CAAW,OAAX,EADG,KAEA,IAAIoD,SAAS,OAAb,EACHvD,KAAKG,KAAL,CAAW,MAAX,EADG,KAEA,IAAI5P,QAAQ,GAAZ,EACHyP,KAAKG,KAAL,CAAW,SAAX,EADG,KAEA,IAAI5P,QAAQ,GAAZ,EACHyP,KAAKG,KAAL,CAAW,QAAX,EADG,KAEA,IAAI5P,QAAQ,GAAZ,EACHyP,KAAKrN,KAAL;;CAfN;;AAmBAuQ,OAAOI,gBAAP,CAAwB,OAAxB,EAAiC,iBAAS;gBAC1B,KAAd;CADF;;AAIA,IAAI1C,SAASK,QAAQF,OAAR,CAAgBH,MAA7B;AACA,IAAI4C,QAAQ,IAAZ;AACA5C,OAAO0C,gBAAP,CAAwB,WAAxB,EAAqC,iBAAS;8BACpB1C,OAAO6C,qBAAP,EADoB;MACtC7G,KADsC,yBACtCA,KADsC;MAC/BC,MAD+B,yBAC/BA,MAD+B;;MAEtC6G,OAFsC,GAEjBlD,KAFiB,CAEtCkD,OAFsC;MAE7BC,OAF6B,GAEjBnD,KAFiB,CAE7BmD,OAF6B;;UAGpC,CAACD,UAAU9G,KAAV,GAAkBgE,OAAOhE,KAA1B,EAAiC+G,UAAU9G,MAAV,GAAmB+D,OAAO/D,MAA3D,EAAmE9M,GAAnE,CAAuEL,KAAKuC,KAA5E,CAAR;SACOuR,KAAP;CAJF;;AAOA,IAAIxM,OAAO,IAAX;AACA4J,OAAO0C,gBAAP,CAAwB,OAAxB,EAAiC,iBAAS;MACpC,CAACE,KAAL,EACE;MACExM,IAAJ,EAAU;WACD,IAAP;;;mBAG2BgJ,KAAKjF,IAPM;MAOlCnF,KAPkC,cAOlCA,KAPkC;MAO3BjH,IAP2B,cAO3BA,IAP2B;MAOrB6J,KAPqB,cAOrBA,KAPqB;;MAQpCvF,KAAK1F,OAAL,CAAaoB,IAAb,EAAmB6U,KAAnB,CAAJ,EAA+B;QACzBpP,KAAKwB,MAAMc,KAAN,CAAY/H,IAAZ,CAAT;QACIyF,OAAOmB,QAAX,EACEyK,KAAKG,KAAL,CAAW,QAAX,EADF,KAEK,IAAI/L,OAAOoB,IAAX,EACHwK,KAAKG,KAAL,CAAW,SAAX;;;MAGAjO,QAAQ,EAAZ;QACMwD,IAAN,CAAWmI,OAAX,CAAmB,UAACzJ,EAAD,EAAKnE,KAAL,EAAe;QAC5BtB,OAAOsE,KAAKnF,SAAL,CAAemC,KAAf,EAAsB2F,MAAMhH,IAA5B,CAAX;QACI,CAAC4J,MAAMwH,KAAK/N,KAAX,EAAkBtD,IAAlB,CAAL,EACEuD,MAAMvD,IAAN,IAAcyG,QAAd;GAHJ;SAKOQ,MAAMY,QAAN,CAAe7H,IAAf,EAAqB6U,KAArB,EAA4B,EAAEtR,YAAF,EAA5B,CAAP;MACI8E,IAAJ,EACE7G;CAxBJ;;AA2BAyQ,OAAO0C,gBAAP,CAAwB,UAAxB,EAAoC,iBAAS;UACnC,IAAR;CADF;;AAIA,SAASM,OAAT,CAAiBxL,KAAjB,EAAwB;MAClByL,OAAO,EAAX;MACMrL,KAFgB,GAEEJ,KAFF,CAEhBI,KAFgB;MAETC,MAFS,GAEEL,KAFF,CAETK,MAFS;;UAGdD,MAAMwH,KAAK/N,KAAX,CAAR;MACIC,QAAQI,OAAOC,IAAP,CAAYiG,KAAZ,EAAmBzI,GAAnB,CAAuBkD,KAAKrF,UAA5B,CAAZ;;;;;;yBACiBsE,KAAjB,8HAAwB;UAAfvD,IAAe;;UAClBmV,OAAOtL,MAAM7J,IAAN,CAAX;UACI8S,QAAQoB,QAAQiB,IAAR,CAAZ;UACI,EAAEnV,QAAQ8J,MAAV,CAAJ,EACEgJ,QAAQkB,OAAOlB,KAAP,CAAR;WACG9S,IAAL,IAAa8S,KAAb;;;;;;;;;;;;;;;;;SAEKoC,IAAP;;;AAGF,SAAS3C,MAAT,GAAkB;MACZ2C,OAAOD,QAAQ5D,KAAKjF,IAAb,CAAX;MACIyI,KAAJ,EACEK,KAAKL,KAAL,IAAcZ,QAAQiB,KAAKL,KAAL,CAAR,CAAd;UACMtC,MAAR,CAAe2C,IAAf;;;AAGF,SAAS1T,IAAT,GAAgB;MACVA,OAAO6P,KAAKjF,IAAL,CAAUnF,KAAV,CAAgBa,QAAhB,CAAyBO,IAAzB,EAA+BgJ,KAAKjF,IAAL,CAAUpM,IAAzC,CAAX;MACI,CAACwB,IAAL,EAAW;WACF,IAAP;WACO,KAAP;;OAEGgQ,KAAL,CAAW,MAAX,EAAmBhQ,IAAnB;SACO,IAAP;;;"}