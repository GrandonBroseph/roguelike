{"version":3,"file":"build.js","sources":["../src/utils/rng.js","../src/utils/cell.js","../src/utils/rect.js","../src/utils/world.js","../src/utils/fov.js","../src/utils/entity.js","../src/utils/dungeon.js","../src/index.js"],"sourcesContent":["let RNG = create()\nRNG.create = create\n\nexport default RNG\n\nfunction create(initialSeed) {\n\n  if ( isNaN(initialSeed) )\n    initialSeed = Math.random() * 10000\n\n  let currentSeed = initialSeed\n\n  return { get, choose, seed }\n\n  function get(min, max) {\n    var a = arguments.length\n    if (a === 0) {\n      let x = Math.sin(currentSeed++) * 10000\n      return x - Math.floor(x)\n    } else if (a === 1)\n      max = min, min = 0\n    if (min > max)\n      [min, max] = [max, min]\n    return Math.floor( get() * (max - min) ) + min\n  }\n\n  function choose(array) {\n    if (Array.isArray(array) && !array.length)\n      return null\n    if ( !isNaN(array) )\n      return !get(array)\n    if (!array)\n      array = [0, 1] \n    return array[ get(array.length) ]\n  }\n\n  function seed(newSeed) {\n    if ( !isNaN(newSeed) )\n      initialSeed = currentSeed = newSeed\n    return currentSeed\n  }\n\n}\n","const DIRECTIONS = [ [-1, 0], [-1, -1], [0, -1], [1, -1], [1, 0], [1, 1], [0, 1], [-1, 1] ]\nconst [LEFT, UP_LEFT, UP, UP_RIGHT, RIGHT, DOWN_RIGHT, DOWN, DOWN_LEFT] = DIRECTIONS\nconst DIRECTIONS_CARDINAL = [LEFT, UP, RIGHT, DOWN]\n\nconst constants = { LEFT, RIGHT, UP, DOWN, UP_LEFT, UP_RIGHT, DOWN_LEFT, DOWN_RIGHT, DIRECTIONS, DIRECTIONS_CARDINAL }\nconst methods   = { toString, fromString, toIndex, fromIndex, isEqual, isEdge, isInside, getNeighbors, getManhattan }\n\nexport default Object.assign(constants, methods)\n\nfunction toString(cell) {\n  return cell.toString()\n}\n\nfunction fromString(string) {\n  return string.split(',').map(Number)\n}\n\nfunction toIndex(cell, size) {\n  let [x, y] = cell\n  return y * size + x\n}\n\nfunction fromIndex(index, size) {\n  let x = index % size\n  let y = (index - x) / size\n  return [x, y]\n}\n\nfunction isEqual(a, b) {\n  return a[0] === b[0] && a[1] === b[1]\n}\n\nfunction isEdge(cell, size) {\n  let [x, y] = cell\n  return x === 0 || y === 0 || x === size - 1 || y === size - 1\n}\n\nfunction isInside(cell, size) {\n  let [x, y] = cell\n  let rect = [0, 0, size, size]\n  if ( Array.isArray(size) )\n    rect = size\n  let [rectX, rectY, rectWidth, rectHeight] = rect\n  return x >= rectX && y >= rectY && x < rectX + rectWidth && y < rectY + rectHeight\n}\n\nfunction getNeighbors(cell, diagonals, step) {\n  if (!cell)\n    throw new TypeError(`Cannot get neighbors of cell '${cell}'`)\n  step = step || 1\n  let [x, y] = cell\n  let neighbors = []\n  let directions = DIRECTIONS_CARDINAL\n  if (diagonals)\n    directions = DIRECTIONS\n  for (let direction of directions) {\n    let [dx, dy] = direction\n    let current  = [x + dx * step, y + dy * step]\n    let [cx, cy] = current\n    neighbors.push( [cx, cy] )\n  }\n  return neighbors\n}\n\nfunction getManhattan(a, b) {\n  var [ax, ay] = a\n  var [bx, by] = b\n  return Math.abs(ax - bx) + Math.abs(ay - by)\n}\n","export default { toString, fromString, isEqual, isIntersecting, getCorners, getEdges, getBorder, getCenter, getCells }\n\nfunction toString(cell) {\n  return cell.toString()\n}\n\nfunction fromString(string) {\n  return string.split(',').map(Number)\n}\n\nfunction isEqual(a, b) {\n  var i = a.length\n  while (i--)\n    if (a[i] !== b[i])\n      return false\n  return true\n}\n\nfunction isIntersecting(a, b, exclusive) {\n  let [ ax, ay, aw, ah ] = a\n  let [ bx, by, bw, bh ] = b\n  if (exclusive)\n    ax--, ay--, aw += 2, ah += 2,\n    bx--, by--, bw += 2, bh += 2\n  return ax <= bx + bw && ay <= by + bh && ax + aw >= bx && ay + ah >= by\n}\n\nfunction getCorners(rect, exclusive) {\n  var [ x, y, w, h ] = rect\n  if (exclusive)\n    x--, y--, w += 2, h += 2\n  return [ [x, y], [x + w - 1, y], [x, y + h - 1], [x + w - 1, y + h - 1] ]\n}\n\nfunction getEdges(rect, exclusive) {\n  var edges = []\n  var [ x, y, w, h ] = rect\n  var r = x + w, b = y + h, i\n  if (exclusive)\n    x--, y--, w += 2, h += 2\n  for (i = x + 1; i < r; i++)\n    edges.push( [ i, y ], [ i, b ] )\n  for (i = y + 1; i < b; i++)\n    edges.push( [ x, i ], [ r, i ] )\n  return edges\n}\n\nfunction getBorder(rect, exclusive) {\n  return getEdges(rect, exclusive).concat( getCorners(rect, exclusive) )\n}\n\nfunction getCenter(rect) {\n  var x, y, w, h\n  if ( Array.isArray(rect) ) {\n    [x, y, w, h] = rect\n    if (rect.length == 2)\n      w = x, h = y, x = 0, y = 0\n  } else if ( !isNaN(rect) )\n    x = 0, y = 0, w = rect, h = rect\n  return [ Math.floor(x + w / 2), Math.floor(y + h / 2) ]\n}\n\nfunction getCells(rect) {\n  var cells = []\n  var [ rectX, rectY, rectWidth, rectHeight ] = rect\n  var i = rectWidth * rectHeight\n  while (i--) {\n    var x = i % rectWidth\n    var y = (i - x) / rectWidth\n    cells[i] = [x + rectX, y + rectY]\n  }\n  return cells\n}\n","import { Cell, Rect } from './index'\n\nconst [FLOOR, WALL, DOOR, DOOR_OPEN, DOOR_SECRET, STAIRS, TRAP] = [0, 1, 2, 3, 4, 5, 6]\nconst tiles = [\n  {\n    name: 'floor',\n    walkable: true\n  },\n  {\n    name: 'wall',\n    opaque: true\n  },\n  {\n    name: 'door',\n    opaque: true,\n    door: true\n  },\n  {\n    name: 'door_open',\n    walkable: true,\n    door: true\n  },\n  {\n    name: 'door_secret',\n    opaque: true,\n    door: true,\n    secret: true\n  },\n  {\n    name: 'stairs',\n    walkable: true,\n    stairs: true\n  },\n  {\n    name: 'trap',\n    walkable: true,\n    trap: true\n  }\n]\n\nlet costs = []\nfor (let tile of tiles) {\n  let cost = 0\n  if (!tile.walkable && !tile.door)\n    cost = Infinity\n  if (tile.secret)\n    cost = 1000\n  if (tile.door) {\n    cost++\n    if (!tile.walkable)\n      cost++\n  }\n  costs.push(cost)\n}\n\nconst constants = { FLOOR, WALL, DOOR, DOOR_OPEN, DOOR_SECRET, STAIRS, TRAP, tiles, costs }\nconst methods   = { create, fill, clear, getAt, getTileAt, setAt, getSize, findPath }\nconst World     = Object.assign({}, constants, methods)\n\nexport default World\n\nlet sqrt = function (cache) {\n\n  cache = cache || {}\n\n  return function sqrt(num) {\n    let cached = cache[num]\n    if (cached)\n      return cached\n    let result = cache[num] = Math.sqrt(num)\n    return result\n  }\n\n}()\n\nfunction create(size) {\n  return new Uint8ClampedArray(size * size)\n}\n\nfunction fill(data, id, rect) {\n  if (typeof id === 'undefined')\n    id = WALL\n  let size = getSize(data)\n  if (rect) {\n    let cells = Rect.getCells(rect)\n    for (let cell of cells)\n      setAt(data, cell, id)\n  } else {\n    let i = data.length\n    while (i--)\n      data[i] = id\n  }\n  return data\n}\n\nfunction clear(data) {\n  fill(data, FLOOR)\n  return data\n}\n\nfunction getAt(data, cell) {\n  let size = getSize(data)\n  if ( !Cell.isInside(cell, size) )\n    return null\n  let index = Cell.toIndex(cell, size)\n  return data[index]\n}\n\nfunction getTileAt(data, cell) {\n  return tiles[ getAt(data, cell) ]\n}\n\nfunction setAt(data, cell, value) {\n  let size = getSize(data)\n  if ( !Cell.isInside(cell, size) )\n    return null\n  let index = Cell.toIndex(cell, size)\n  data[index] = value\n  return value\n}\n\nfunction getSize(data) {\n  return sqrt(data.length)\n}\n\nfunction findPath(data, start, goal, costs, diagonals) {\n\n  if (!costs)\n    costs = {\n      tiles: World.costs,\n      cells: {}\n    }\n\n  if (!costs.tiles)\n    costs = {\n      tiles: costs,\n      cells: {}\n    }\n\n  // if (costs.tiles[ World.getAt(data, goal) ] === Infinity)\n  //   return null\n\n  let path = []\n\n  let size = getSize(data)\n\n  let startKey = start.toString()\n  let goalKey  = goal.toString()\n\n  let opened = [startKey]\n  let closed = {}\n\n  let scores = { f: {}, g: {} }\n  let parent = {}\n\n  let cells = data.reduce( (cells, id, index) => cells.concat( [ Cell.fromIndex(index, size) ] ), [] )\n  for (let cell of cells) {\n    scores.g[cell] = Infinity\n    scores.f[cell] = Infinity\n  }\n\n  scores.g[start] = 0\n  scores.f[start] = Cell.getManhattan(start, goal)\n\n  while (opened.length) {\n    if (opened.length > 1)\n      opened = opened.sort( (a, b) => scores.f[b] - scores.f[a] )\n    let cellKey = opened.pop()\n    let cell = Cell.fromString(cellKey)\n    if (cellKey === goalKey) {\n      let cell = goal\n      do {\n        path.unshift(cell)\n        cell = parent[cell]\n      } while (cell)\n      return path\n    }\n    closed[cell] = true\n    for ( let neighbor of Cell.getNeighbors(cell, diagonals) ) {\n      if (!Cell.isInside(neighbor, size) || neighbor in closed)\n        continue\n      let key = neighbor.toString()\n      let tileCost = costs.tiles[ getAt(data, neighbor) ] || 0\n      let cellCost = costs.cells[neighbor] || 0\n      let cost = tileCost + cellCost\n      if (cost === Infinity && key !== goalKey)\n        continue\n      let g = scores.g[cell] + 1 + cost\n      if ( !opened.includes(key) )\n        opened.push(key)\n      else if ( g >= scores.g[neighbor] )\n        continue\n      parent[neighbor] = cell\n      scores.g[neighbor] = g\n      scores.f[neighbor] = g + Cell.getManhattan(neighbor, goal)\n    }\n  }\n\n  return null\n\n}\n","import { Cell, World } from './index'\n\nexport default { get }\n\nfunction get(data, start, range) {\n  let cells = []\n  let i = 8\n  while (i--)\n    cells = cells.concat( getOctant(data, start, range, i) )\n  cells.push(start)\n  return cells\n}\n\nfunction getOctant(data, start, range, octant) {\n  range = range || Infinity\n  let size = World.getSize(data)\n  let [x, y] = start\n  let cells = []\n  let shadows = []\n  let fullShadow = false\n  for (let row = 1; row <= range; row++) {\n    let [transformX, transformY] = transformOctant(row, 0, octant)\n    let cell = [x + transformX, y + transformY]\n    if ( !Cell.isInside(cell, size) )\n      break\n    for (let col = 0; col <= row; col++) {\n      let [transformX, transformY] = transformOctant(row, col, octant)\n      let cell = [x + transformX, y + transformY]\n      if ( !Cell.isInside(cell, size) || transformX * transformX + transformY * transformY > range * range )\n        break\n      if (!fullShadow) {\n        let projection = getProjection(row, col)\n        let visible = !shadows.find( shadow => shadow.start <= projection.start && shadow.end >= projection.end )\n        if (visible) {\n          cells.push(cell)\n          let id = World.getAt(data, cell)\n          if ( World.tiles[id].opaque ) {\n            let index\n            for (index = 0; index < shadows.length; index++)\n              if (shadows[index].start >= projection.start)\n                break\n            let prev = shadows[index - 1]\n            let next = shadows[index]\n            let overPrev = index > 0 && prev.end > projection.start\n            let overNext = index < shadows.length && next.start < projection.end\n            if (overNext)\n              if (overPrev) {\n                prev.end = next.end\n                shadows.splice(index, 1)\n              } else\n                next.start = projection.start\n            else\n              if (overPrev)\n                prev.end = projection.end\n              else\n                shadows.splice(index, 0, projection)\n            let shadow = shadows[0]\n            fullShadow = shadows.length === 1 && shadow.start === 0 && shadow.end === 1\n          }\n        }\n      }\n    }\n  }\n  return cells\n}\n\nfunction getProjection(row, col) {\n  let start = col / (row + 2)\n  let end   = (col + 1) / (row + 1)\n  return {start, end}\n}\n\nfunction transformOctant(row, col, octant) {\n  switch (octant) {\n    case 0: return [ col, -row]\n    case 1: return [ row, -col]\n    case 2: return [ row,  col]\n    case 3: return [ col,  row]\n    case 4: return [-col,  row]\n    case 5: return [-row,  col]\n    case 6: return [-row, -col]\n    case 7: return [-col, -row]\n  }\n}\n","import { Cell, World, FOV } from './index'\n\nexport default { create }\n\nfunction create(type, sprite, walkable) {\n\n  walkable = !!walkable\n\n  let path = null\n\n  function look() {\n    let cells = FOV.get(entity.world.data, entity.cell, 7)\n    entity.seeing = {}\n    for (var cell of cells) {\n      let type = World.tiles[ entity.world.getAt(cell) ].name\n      let other = entity.world.entitiesAt(cell)[0]\n      if (other)\n        type = other.type\n      entity.known[cell] = type\n      entity.seeing[cell] = true\n    }\n  }\n\n  function move(direction) {\n    let moved = false\n    let world = entity.world\n    let [cellX, cellY] = entity.cell\n    let [distX, distY] = direction\n    let target = [cellX + distX, cellY + distY]\n    let id = world.getAt(target)\n    let tile = World.tiles[id]\n    let entities = world.entitiesAt(target)\n    if (tile.walkable) {\n      let enemies = entities.filter(entity => !entity.walkable)\n      if (!enemies.length) {\n        entity.cell = target\n        moved = true\n        look()\n      } else {\n        let enemy = enemies[0]\n        attack(enemy)\n      }\n    } else if (tile.door) {\n      world.openDoor(target)\n      look()\n    }\n    return moved\n  }\n\n  function moveTo(target) {\n    if ( !path || path[path.length - 1] !== target )\n      path = entity.world.findPath(entity, target)\n    if (!path)\n      return false\n    let next\n    path.some(function(cell, index) {\n      if ( !Cell.isEqual(entity.cell, cell) )\n        return\n      next = path[index + 1]\n      return true\n    })\n    if (!next)\n      return false\n    let [cellX, cellY] = entity.cell\n    let [nextX, nextY] = next\n    let dist = [nextX - cellX, nextY - cellY]\n    return entity.move(dist)\n  }\n\n  function attack(entity) {\n    entity.health--\n    if (entity.health <= 0){\n      let entities = entity.world.entities\n      let index = entities.indexOf(entity)\n      if (index !== -1)\n        entities.splice(index, 1)\n      look()\n    }\n  }\n\n  let props   = { type, sprite, walkable, wandering: true, health: 1, seeing: {}, known: {}, world: null, cell: null }\n  let methods = { look, move, moveTo }\n  let entity  = Object.assign({}, props, methods)\n\n  return entity\n}\n","import { RNG, World, Cell, Rect } from './index'\n\nconst { FLOOR, WALL, DOOR, DOOR_OPEN, DOOR_SECRET, STAIRS, TRAP } = World\n\nexport default { create }\n\nlet rng = RNG.create()\n\nfunction findRoom(min, max, worldSize) {\n  let w = rng.get((max - min) / 2 + 1) * 2 + min\n  let h = rng.get((max - min) / 2 + 1) * 2 + min\n  let x = rng.get((worldSize - w) / 2) * 2 + 1\n  let y = rng.get((worldSize - h) / 2) * 2 + 1\n  return [x, y, w, h]\n}\n\nlet Diamond = function () {\n\n  let cache = {}\n\n  function cellsFromObject(obj) {\n    return Object.keys(obj).map( key => key.split(',').map(Number) )\n  }\n\n  function cacheDiamond(diamond) {\n\n    let [x, y, radius] = diamond\n\n    let start = [x, y]\n    let stack = [start]\n    let cells = { [start]: 0 }\n    let edges = {}\n    let doors = {}\n\n    while (stack.length) {\n      let node = stack.pop()\n      let nexts = Cell.getNeighbors(node).filter( neighbor => !(neighbor.toString() in cells) )\n      for (let next of nexts) {\n        let steps = cells[node] + 1\n        if (steps <= radius) {\n          cells[next] = steps\n          stack.unshift(next)\n        } else\n          edges[next] = steps\n      }\n    }\n\n    cells = cellsFromObject(cells)\n    edges = cellsFromObject(edges)\n\n    return { cells, edges, center: start }\n\n  }\n\n  function getCached(diamond) {\n    let cached = cache[diamond]\n    if (!cached)\n      cached = cache[diamond] = cacheDiamond(diamond)\n    return cached\n  }\n\n  function getCells(diamond) {\n    return getCached(diamond).cells\n  }\n\n  function getEdges(diamond) {\n    return getCached(diamond).edges\n  }\n\n  function getCenter(diamond) {\n    return getCached(diamond).center\n  }\n\n  return { getCells, getEdges, getCenter }\n\n}()\n\nfunction findDiamondRoom(min, max, worldSize) {\n  let radius = rng.get((max - min) / 2 + 1) * 2 + min\n  let nodes = findNodes(worldSize, radius).map(Cell.fromString)\n  let diamond = rng.choose(nodes)\n  diamond.push(radius)\n  return diamond\n}\n\nfunction findRooms(data, maxRatio) {\n  maxRatio = maxRatio || 0.33\n  let size = World.getSize(data)\n  let area = size * size\n  let valid = true\n  let rooms = { cells: {}, edges: {}, rects: {}, diamonds: {}, normal: new Set, secret: new Set, list: [] }\n  let total = 0\n  let fails = 0\n  let cached = {}\n\n  function validate(cells) {\n    for (let cell of cells)\n      if (rooms.cells[cell] || rooms.edges[cell])\n        return false\n    return true\n  }\n\n  function getData(shape) {\n    switch (shape) {\n      case 'rect': {\n        let matrix = findRoom(3, 9, size)\n        return [matrix, Rect.getBorder(matrix)]\n      }\n      case 'diamond': {\n        let matrix = findDiamondRoom(2, 6, size)\n        return [matrix, Diamond.getEdges(matrix)]\n      }\n    }\n  }\n\n  while (valid && total / area < maxRatio) {\n    let shape = 'rect'\n    let matrix\n    do {\n      let cells\n      if ( rng.choose(50) ) {\n        shape = 'diamond'\n      }\n      [matrix, cells] = getData(shape)\n      if (matrix in cached) {\n        valid = false\n        continue\n      }\n      cached[matrix] = valid = validate(cells)\n    } while (!valid && ++fails < area)\n    if (valid) {\n      let edges, room = { edges: {}, shape, matrix, type: 'room' }\n      if (shape === 'rect') {\n        edges = Rect.getBorder(matrix, true)\n        room.cells  = Rect.getCells(matrix)\n        room.center = Rect.getCenter(matrix)\n        rooms.rects[matrix] = room\n      } else if (shape === 'diamond') {\n        edges = Diamond.getEdges(matrix)\n        room.cells  = Diamond.getCells(matrix)\n        room.center = Diamond.getCenter(matrix)\n        rooms.diamonds[matrix] = room\n      }\n      for (let cell of room.cells)\n        rooms.cells[cell] = room\n      for (let edge of edges) {\n        let sharedEdges = room.edges[edge] = rooms.edges[edge] = rooms.edges[edge] || []\n        sharedEdges.push(room)\n      }\n      rooms.normal.add(room)\n      rooms.list.push(room)\n      total += room.cells.length\n    }\n\n  }\n  return rooms\n}\n\nfunction findNodes(worldSize, offset) {\n  offset = offset || 0\n  let data = null\n  if (typeof worldSize === 'object') {\n    data = worldSize\n    worldSize = World.getSize(data)\n  }\n  let nodes = []\n  let half = (worldSize - 1) / 2 - offset\n  let i = half * half\n  while (i--) {\n    let [nodeX, nodeY] = Cell.fromIndex(i, half)\n    let node = [nodeX * 2 + 1 + offset, nodeY * 2 + 1 + offset]\n    if (!data || World.getAt(data, node) === WALL && !Cell.getNeighbors(node, true).filter(neighbor => World.getAt(data, neighbor) !== WALL).length)\n      nodes.push( node.toString() )\n  }\n  return nodes\n}\n\nfunction findMazes(data) {\n  let size = World.getSize(data)\n  let mazes = { cells: {}, ends: {}, list: [] }\n  let nodes = new Set( findNodes(data).map(Cell.toString) )\n  while (nodes.size) {\n    let maze = { cells: {}, ends: {}, type: 'maze' }\n    let start = rng.choose( [...nodes] )\n    let id    = Cell.fromString(start)\n    let stack = [id]\n    let track = [id]\n    let end   = true\n    mazes.ends[start] = maze.ends[start] = maze\n    while (stack.length) {\n      let node, [nodeX, nodeY] = node = stack.pop()\n      nodes.delete( node.toString() )\n      mazes.cells[node] = maze.cells[node] = maze\n      let neighbors = Cell.getNeighbors(node, false, 2).filter(function (neighbor) {\n        if (World.getAt(data, neighbor) !== WALL || neighbor in mazes.cells)\n          return false\n        let nonwalls = Cell.getNeighbors(neighbor, true).filter(neighbor => World.getAt(data, neighbor) !== WALL)\n        return !nonwalls.length\n      })\n      if (neighbors.length) {\n        let neighbor = rng.choose(neighbors)\n        let [neighborX, neighborY] = neighbor\n        let [distX, distY] = [neighborX - nodeX, neighborY - nodeY]\n        let [stepX, stepY] = [ distX / (Math.abs(distX) || 1), distY / (Math.abs(distY) || 1) ]\n        let midpoint = [nodeX + stepX, nodeY + stepY]\n        mazes.cells[midpoint] = maze.cells[midpoint] = maze\n        stack.push(neighbor)\n        track.push(neighbor)\n        end = false\n      } else {\n        if (!end) {\n          mazes.ends[node] = maze.ends[node] = maze\n          end = true\n        }\n        if (track.length)\n          stack.push( track.pop() )\n      }\n    }\n    mazes.list.push(maze)\n  }\n  return mazes\n}\n\nfunction findConnectors(data, rooms, mazes) {\n  let connectors = {}\n  for (let id in rooms.edges) {\n    let cell = Cell.fromString(id)\n    let neighbors = Cell.getNeighbors(cell)\n    let regions = []\n    for (let neighbor of neighbors) {\n      let [x, y] = neighbor\n      if (x % 2 && y % 2 && World.getAt(data, neighbor) === FLOOR) {\n        let region = rooms.cells[neighbor] || mazes.cells[neighbor]\n        if (region)\n          regions.push(region)\n      }\n    }\n    if (regions.length === 2)\n      connectors[cell] = regions\n  }\n  return connectors\n}\n\nfunction findDoors(data, rooms, mazes) {\n\n  let connectorRegions = findConnectors(data, rooms, mazes)\n  let start = rng.choose(rooms.list)\n  let stack = [start]\n  let track = [start]\n  let doorRegions = {}\n\n  let disconnected = new Set(rooms.list)\n  let connected = new Map\n\n  for (let room of rooms.list)\n    room.connections = new Set\n\n  for (let maze of mazes.list)\n    maze.connections = new Set\n\n  while (stack.length) {\n    let node = stack.pop()\n    if ( rooms.list.includes(node) && disconnected.has(node) )\n      disconnected.delete(node)\n    let connectors = getConnectors(node)\n    let connectorKeys = Object.keys(connectors)\n    if (connectorKeys.length) {\n      let connector = rng.choose(connectorKeys)\n      let next = connectors[connector]\n      if (next) {\n        // Remove extraneous connectors\n        for (let id in next.cells) {\n          let cell = Cell.fromString(id)\n          let neighbors = Cell.getNeighbors(cell)\n          for (let neighbor of neighbors) {\n            if ( neighbor in connectorRegions && connectorRegions[neighbor].includes(node) )\n              delete connectorRegions[neighbor]\n          }\n        }\n\n        doorRegions[connector] = [node, next]\n\n        stack.push(next)\n        track.push(next)\n\n        node.connections.add(next)\n        next.connections.add(node)\n      }\n    } else {\n      if (node.type === 'maze' && node.connections.length === 1) {\n        let last = node.connections.entries().next().value\n        last.connections.delete(node)\n        connected.delete(node)\n      }\n      while (track.length) {\n        let next = track.pop()\n        if (next && next !== node) {\n          stack.push(next)\n          track.push(next)\n          // console.log('Backtracking to', next.type)\n          break\n        }\n      }\n    }\n  }\n\n  // for (let connector in connectorRegions)\n  //   World.setAt(data, Cell.fromString(connector), DOOR_OPEN)\n\n  return doorRegions\n\n  // Connectors store the `regions` they connect; get the one that's not `node`\n  function getNext(regions, node) {\n    for (let region of regions)\n      if (region !== node)\n        return region\n    return null\n  }\n\n  // Get the valid connectors of the specified `node`\n  function getConnectors(node) {\n    let connectors = {}\n    let prospects = []\n    // Normalize based on type\n    if (node.type === 'room') {\n      for (let id in node.edges)\n        if (id in connectorRegions)\n          prospects.push(id)\n    } else if (node.type === 'maze') {\n      for (let id in node.cells) {\n        let cell = Cell.fromString(id)\n        let neighbors = Cell.getNeighbors(cell)\n        for (let neighbor of neighbors) {\n          if (neighbor in connectorRegions)\n            prospects.push(neighbor.toString())\n        }\n      }\n    }\n    for (let id of prospects) {\n      let cell = Cell.fromString(id)\n      let regions = connectorRegions[id]\n      let next = getNext(regions, node)\n      if (next) {\n        let lucky = rng.choose(5)\n        let isIncluded  = id in doorRegions\n        let isConnected = node.connections.has(next)\n        let isMain      = connected.has(next) && !lucky\n        let nearby      = !!Cell.getNeighbors(cell, true).filter(neighbor => neighbor in doorRegions).length\n        if (!isIncluded && !isConnected && !isMain && !nearby)\n          connectors[id] = next\n      }\n    }\n    return connectors\n  }\n\n}\n\nfunction fillEnds(data, mazes, doors) {\n  let stack = Object.keys(mazes.ends).map(Cell.fromString)\n  let ends = []\n  while (stack.length) {\n    let cell = stack.pop()\n    let escapes = Cell.getNeighbors(cell).filter( neighbor => World.getTileAt(data, neighbor).walkable || neighbor in doors )\n    if (escapes.length <= 1) {\n      delete mazes.cells[cell]\n      World.setAt(data, cell, WALL)\n      if (escapes.length)\n        stack.push( escapes[0] )\n    } else {\n      ends.push(cell)\n    }\n  }\n  ends = ends.filter(end => World.getAt(data, end) === FLOOR && Cell.getNeighbors(end).filter( neighbor => World.getTileAt(data, neighbor).walkable ).length === 1)\n  return ends\n}\n\nfunction generate(size, seed) {\n\n  let data = World.fill( World.create(size) )\n\n  let rooms = findRooms(data)\n  for (let room of rooms.list)\n    for (let cell of room.cells)\n      World.setAt(data, cell, FLOOR)\n\n  let mazes = findMazes(data)\n  for (let maze of mazes.list)\n    for (let id in maze.cells)\n      World.setAt(data, Cell.fromString(id), FLOOR)\n\n  let doors = findDoors(data, rooms, mazes)\n\n  let ends = fillEnds(data, mazes, doors)\n  let endKeys = ends.map(Cell.toString)\n\n  for (let id in doors) {\n    let cell = Cell.fromString(id)\n    let regions = doors[id]\n    let room = regions.filter(region => region.type !== 'maze')[0]\n    let type = DOOR\n    let neighbors = Cell.getNeighbors(cell).filter( neighbor => endKeys.includes( neighbor.toString() ) )\n    if ( !neighbors.length && rng.choose() ) {\n      type = DOOR_SECRET\n      rooms.normal.delete(room)\n      rooms.secret.add(room)\n      // console.log(cell)\n    } else if ( rng.choose(5) )\n      type = FLOOR\n    World.setAt(data, cell, type)\n  }\n\n  return {data, rooms}\n\n}\n\nfunction create(size, seed) {\n\n  if (!size % 2)\n    throw new RangeError(`Cannot create dungeon of even size ${size}`)\n\n  if (typeof seed === 'object') {\n    rng = seed\n    seed = rng.seed()\n  } else if ( isNaN(seed) ) {\n    seed = rng.get()\n    rng.seed(seed)\n  }\n\n  console.log('Seed:', seed)\n\n  let {data, rooms} = generate(size, seed)\n  let entities = []\n\n  function spawn(item, cell) {\n    if (!world.rooms)\n      return null\n    if (typeof cell !== 'object') {\n      let valid\n      do {\n        let room = rng.choose( [...world.rooms.normal] )\n        if (cell !== 'center')\n          cell = rng.choose(room.cells)\n        else\n          cell = room.center\n      } while (entitiesAt(cell).length && getAt(cell) === FLOOR)\n    }\n    if ( !isNaN(item) )\n      setAt(cell, item)\n    else if (typeof item === 'object') {\n      item.world = world\n      item.cell  = cell\n      item.look()\n      entities.push(item)\n    }\n    return cell\n  }\n\n  function entitiesAt(cell) {\n    return world.entities.filter( entity => Cell.isEqual(entity.cell, cell) )\n  }\n\n  function getAt(cell) {\n    return World.getAt(world.data, cell)\n  }\n\n  function getTileAt(cell) {\n    return World.tiles[ getAt(cell) ]\n  }\n\n  function setAt(cell, value) {\n    return World.setAt(world.data, cell, value)\n  }\n\n  function findPath(start, goal) {\n    let entity = null\n    if (!Array.isArray(start) && typeof start === 'object') {\n      entity = start\n      start = entity.cell\n    }\n    let cells = {}\n    if (!entity) {\n      for (let entity of world.entities)\n        cells[entity.cell] = Infinity\n    } else {\n      let world = entity.world\n      world.data.forEach((id, index) => {\n        let cell = Cell.fromIndex(index, world.size)\n        if ( !entity.known[cell] || world.entitiesAt(cell).filter(entity => !entity.walkable).length )\n          cells[cell] = Infinity\n      })\n    }\n    let costs = { tiles: World.costs, cells }\n    let path = World.findPath(world.data, start, goal, costs)\n    return path\n  }\n\n  function openDoor(cell) {\n    let data = world.data.slice()\n    let id = getAt(cell)\n    if (World.tiles[id].door)\n      World.setAt(data, cell, DOOR_OPEN)\n    world.data = data\n    return world\n  }\n\n  function closeDoor(cell) {\n    let data = world.data.slice()\n    let id = getAt(cell)\n    if (World.tiles[id].door)\n      World.setAt(data, cell, DOOR)\n    world.data = data\n    return world\n  }\n\n  function toggleDoor(cell) {\n    let data = world.data.slice()\n    let oldId = getAt(cell)\n    let newId = DOOR_OPEN\n    let tile = World.tiles[id]\n    if (tile.door) {\n      if (tile.walkable)\n        newId = DOOR\n      World.setAt(data, cell, newId)\n    }\n    world.data = data\n    return world\n  }\n\n  let props   = { size, data, rooms, entities }\n  let methods = { spawn, entitiesAt, getAt, getTileAt, setAt, findPath, openDoor, closeDoor, toggleDoor }\n\n  let world = Object.assign({}, props, methods)\n  return world\n\n}\n","import { Dungeon, World, Entity, Cell, Rect, RNG } from './utils/index'\n\nconst WORLD_SIZE = 25\nconst { FLOOR, WALL, DOOR, DOOR_OPEN, DOOR_HIDDEN, STAIRS, TRAP } = World\n\nlet Colors = function () {\n\n  let lighter = {}\n  let darker  = {}\n\n  function lighten(color) {\n    return null\n  }\n\n  function darken(color) {\n    return null\n  }\n\n  return {\n\n    // High-contrast shades\n    RED:     [255,   0,   0],\n    YELLOW:  [255, 255,   0],\n    LIME:    [  0, 255,   0],\n    CYAN:    [  0, 255, 255],\n    BLUE:    [  0,   0, 255],\n    MAGENTA: [255,   0, 255],\n\n    // Darker ones\n    MAROON: [128,   0,   0],\n    OLIVE:  [128, 128,   0],\n    GREEN:  [  0, 128,   0],\n    TEAL:   [  0, 128, 128],\n    NAVY:   [  0,   0, 128],\n    PURPLE: [128,   0, 128],\n\n    // Monochromes\n    WHITE: [255, 255, 255],\n    GRAY:  [128, 128, 128],\n    BLACK: [  0,   0,   0],\n\n    lighten, darken\n\n  }\n\n}()\n\nconst { RED, MAROON, YELLOW, OLIVE, LIME, GREEN, CYAN, TEAL, BLUE, NAVY, MAGENTA, PURPLE, WHITE, GRAY, BLACK } = Colors\n\nconst sprites = {\n  floor:       [String.fromCharCode(183), TEAL],\n  wall:        ['#', OLIVE],\n  door:        ['+', MAROON],\n  door_open:   ['/', MAROON],\n  door_secret: ['#', OLIVE],\n  stairs:      ['>', WHITE],\n  trap:        ['^', MAGENTA],\n  hero:        ['@', WHITE],\n  wyrm:        ['w', LIME],\n  replica:     ['J', BLUE]\n}\n\n// TODO: Change these to key/value pairs with data on each enemy\nconst enemies = ['wyrm', 'replica']\n\n// Use `RNG.create(seed)` to seed the RNG, where `seed` is some\n// number like `9820.083045702477`. Seeding the RNG allows you\n// to achieve the same dungeon multiple times for debugging.\n//\n// Leave empty for a random seed.\n//\nconst rng = RNG.create()\n\nfunction generate() {\n  let world = Dungeon.create(WORLD_SIZE, rng)\n  let hero = Entity.create('hero', sprites.hero)\n  world.spawn(STAIRS, 'center')\n  world.spawn(TRAP)\n  world.spawn(hero)\n  let i = 10\n  while (i--) {\n    let type = rng.choose(enemies)\n    world.spawn( Entity.create(type, sprites[type]) )\n  }\n  for (let entity of world.entities)\n    entity.look()\n  return {world, hero}\n}\n\nnew Vue({\n  el: '#app',\n  data: function () {\n    return Object.assign(generate(), { log: [], debug: false })\n  },\n  methods: {\n    onclick: function (index) {\n      let {world, hero, debug} = this\n      let cell = hero.cell\n      let targetX = index % WORLD_SIZE\n      let targetY = (index - targetX) / WORLD_SIZE\n      let target = [targetX, targetY]\n\n      if ( Cell.isEqual(cell, target) ) {\n        if (world.getAt(cell) === STAIRS)\n          this.descend()\n        return\n      }\n\n      if ( !hero.known[target] && !debug )\n        return\n\n      function move() {\n        let moved = hero.moveTo(target)\n        if (moved)\n          window.requestAnimationFrame(move)\n      }\n      move()\n\n    },\n    ascend: function () {\n\n    },\n    descend: function () {\n      let generation = generate()\n      this.world = generation.world\n      this.hero  = generation.hero\n    }\n  },\n  computed: {\n    view: function () {\n      let {world, hero, debug} = this\n      let view = []\n      world.data.forEach((id, index) => {\n        let cell = Cell.fromIndex(index, WORLD_SIZE)\n        let char = ' ', color\n        let type = hero.known[cell]\n        if (!type && debug)\n          type = World.tiles[ world.getAt(cell) ].name\n        if (type) {\n          [char, color] = sprites[type]\n          if ( !hero.seeing[cell] )\n            color = GRAY\n          if ( Array.isArray(color) )\n            color = `rgb(${color.join(', ')})`\n        }\n        view.push( {char, color} )\n      })\n      return view\n    }\n  },\n  mounted: function () {\n    let vue = this\n    vue.$el.style.fontSize = `calc(100vmin / ${WORLD_SIZE})`\n    function handleKeys(event) {\n      let flag = event.type === 'keydown'\n      if (event.code === 'Space' && vue.debug !== flag) {\n        vue.debug = flag\n      }\n    }\n    window.addEventListener('keydown', handleKeys)\n    window.addEventListener('keyup',   handleKeys)\n  },\n  components: {\n    game: {\n      template: '#game-template',\n      props: ['view', 'onclick']\n    }\n  }\n})\n"],"names":["RNG","create","initialSeed","isNaN","Math","random","currentSeed","get","choose","seed","min","max","a","arguments","length","x","sin","floor","array","Array","isArray","newSeed","DIRECTIONS","LEFT","UP_LEFT","UP","UP_RIGHT","RIGHT","DOWN_RIGHT","DOWN","DOWN_LEFT","DIRECTIONS_CARDINAL","constants","methods","toString","fromString","toIndex","fromIndex","isEqual","isEdge","isInside","getNeighbors","getManhattan","Object","assign","cell","string","split","map","Number","size","y","index","b","rect","rectX","rectY","rectWidth","rectHeight","diagonals","step","TypeError","neighbors","directions","direction","dx","dy","current","cx","cy","push","ax","ay","bx","by","abs","isIntersecting","getCorners","getEdges","getBorder","getCenter","getCells","i","exclusive","aw","ah","bw","bh","w","h","edges","r","concat","cells","FLOOR","WALL","DOOR","DOOR_OPEN","DOOR_SECRET","STAIRS","TRAP","tiles","costs","tile","cost","walkable","door","Infinity","secret","fill","clear","getAt","getTileAt","setAt","getSize","findPath","World","sqrt","cache","num","cached","result","Uint8ClampedArray","data","id","Rect","Cell","value","start","goal","path","startKey","goalKey","opened","closed","scores","f","g","parent","reduce","sort","cellKey","pop","unshift","neighbor","key","tileCost","cellCost","includes","range","getOctant","octant","shadows","fullShadow","row","transformOctant","transformX","transformY","col","projection","getProjection","visible","find","shadow","end","opaque","prev","next","overPrev","overNext","splice","type","sprite","look","FOV","entity","world","seeing","name","other","entitiesAt","known","move","moved","cellX","cellY","distX","distY","target","entities","enemies","filter","enemy","openDoor","moveTo","some","nextX","nextY","dist","attack","health","indexOf","props","wandering","rng","findRoom","worldSize","Diamond","cellsFromObject","obj","keys","cacheDiamond","diamond","radius","stack","doors","node","nexts","steps","center","getCached","findDiamondRoom","nodes","findNodes","findRooms","maxRatio","area","valid","rooms","rects","diamonds","normal","Set","list","total","fails","validate","getData","shape","matrix","room","edge","sharedEdges","add","offset","half","nodeX","nodeY","findMazes","mazes","ends","maze","track","delete","nonwalls","neighborX","neighborY","stepX","stepY","midpoint","findConnectors","connectors","regions","region","findDoors","connectorRegions","doorRegions","disconnected","connected","Map","connections","has","getConnectors","connectorKeys","connector","last","entries","getNext","prospects","lucky","isIncluded","isConnected","isMain","nearby","fillEnds","escapes","generate","endKeys","RangeError","log","spawn","item","forEach","slice","closeDoor","toggleDoor","oldId","newId","WORLD_SIZE","Colors","lighter","darker","lighten","color","darken","MAROON","OLIVE","LIME","TEAL","BLUE","MAGENTA","WHITE","GRAY","sprites","String","fromCharCode","Dungeon","hero","Entity","Vue","debug","targetX","targetY","descend","window","requestAnimationFrame","generation","view","char","join","vue","$el","style","fontSize","handleKeys","event","flag","code","addEventListener"],"mappings":"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"}