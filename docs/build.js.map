{"version":3,"file":"build.js","sources":["../src/utils/rng.js","../src/utils/cell.js","../src/utils/rect.js","../src/utils/world.js","../src/utils/fov.js","../src/utils/entity.js","../src/utils/generator.js","../src/index.js"],"sourcesContent":["let RNG = create()\nRNG.create = create\n\nexport default RNG\n\nfunction create(initialSeed) {\n\n  if ( isNaN(initialSeed) )\n    initialSeed = Math.random() * 10000\n\n  let currentSeed = initialSeed\n\n  return { get, choose, seed }\n\n  function get(min, max) {\n    var a = arguments.length\n    if (a === 0) {\n      let x = Math.sin(currentSeed++) * 10000\n      return x - Math.floor(x)\n    }\n    else if (a === 1)\n      max = min, min = 0\n    if (min > max)\n      [min, max] = [max, min]\n    return Math.floor( get() * (max - min) ) + min\n  }\n\n  function choose(array) {\n    if (Array.isArray(array) && !array.length)\n      return null\n    if ( !isNaN(array) )\n      return !get(array)\n    if (!array)\n      array = [0, 1]\n    return array[ get(array.length) ]\n  }\n\n  function seed(newSeed) {\n    if ( !isNaN(newSeed) )\n      initialSeed = currentSeed = newSeed\n    return initialSeed\n  }\n\n}\n","const DIRECTIONS = [ [-1, 0], [-1, -1], [0, -1], [1, -1], [1, 0], [1, 1], [0, 1], [-1, 1] ]\nconst [LEFT, UP_LEFT, UP, UP_RIGHT, RIGHT, DOWN_RIGHT, DOWN, DOWN_LEFT] = DIRECTIONS\nconst DIRECTIONS_CARDINAL = [LEFT, UP, RIGHT, DOWN]\n\nconst constants = { LEFT, RIGHT, UP, DOWN, UP_LEFT, UP_RIGHT, DOWN_LEFT, DOWN_RIGHT, DIRECTIONS, DIRECTIONS_CARDINAL }\nconst methods   = { toString, fromString, toIndex, fromIndex, isEqual, isEdge, isInside, getNeighbors, getManhattan }\n\nexport default Object.assign(constants, methods)\n\nfunction toString(cell) {\n  return cell.toString()\n}\n\nfunction fromString(string) {\n  return string.split(',').map(Number)\n}\n\nfunction toIndex(cell, size) {\n  let [x, y] = cell\n  return y * size + x\n}\n\nfunction fromIndex(index, size) {\n  let x = index % size\n  let y = (index - x) / size\n  return [x, y]\n}\n\nfunction isEqual(a, b) {\n  return a[0] === b[0] && a[1] === b[1]\n}\n\nfunction isEdge(cell, size) {\n  let [x, y] = cell\n  return x === 0 || y === 0 || x === size - 1 || y === size - 1\n}\n\nfunction isInside(cell, size) {\n  let [x, y] = cell\n  let rect = [0, 0, size, size]\n  if ( Array.isArray(size) )\n    rect = size\n  let [rectX, rectY, rectWidth, rectHeight] = rect\n  return x >= rectX && y >= rectY && x < rectX + rectWidth && y < rectY + rectHeight\n}\n\nfunction getNeighbors(cell, diagonals, step) {\n  if (!cell)\n    throw new TypeError(`Cannot get neighbors of cell '${cell}'`)\n  step = step || 1\n  let [x, y] = cell\n  let neighbors = []\n  let directions = DIRECTIONS_CARDINAL\n  if (diagonals)\n    directions = DIRECTIONS\n  for (let direction of directions) {\n    let [dx, dy] = direction\n    let current  = [x + dx * step, y + dy * step]\n    let [cx, cy] = current\n    neighbors.push( [cx, cy] )\n  }\n  return neighbors\n}\n\nfunction getManhattan(a, b) {\n  var [ax, ay] = a\n  var [bx, by] = b\n  return Math.abs(ax - bx) + Math.abs(ay - by)\n}\n","export default { toString, fromString, isEqual, isIntersecting, getCorners, getEdges, getBorder, getCenter, getCells }\n\nfunction toString(cell) {\n  return cell.toString()\n}\n\nfunction fromString(string) {\n  return string.split(',').map(Number)\n}\n\nfunction isEqual(a, b) {\n  var i = a.length\n  while (i--)\n    if (a[i] !== b[i])\n      return false\n  return true\n}\n\nfunction isIntersecting(a, b, exclusive) {\n  let [ ax, ay, aw, ah ] = a\n  let [ bx, by, bw, bh ] = b\n  if (exclusive)\n    ax--, ay--, aw += 2, ah += 2,\n    bx--, by--, bw += 2, bh += 2\n  return ax <= bx + bw && ay <= by + bh && ax + aw >= bx && ay + ah >= by\n}\n\nfunction getCorners(rect, exclusive) {\n  var [ x, y, w, h ] = rect\n  if (exclusive)\n    x--, y--, w += 2, h += 2\n  return [ [x, y], [x + w - 1, y], [x, y + h - 1], [x + w - 1, y + h - 1] ]\n}\n\nfunction getEdges(rect, exclusive) {\n  var edges = []\n  var [ x, y, w, h ] = rect\n  var r = x + w, b = y + h, i\n  if (exclusive)\n    x--, y--, w += 2, h += 2\n  for (i = x + 1; i < r; i++)\n    edges.push( [ i, y ], [ i, b ] )\n  for (i = y + 1; i < b; i++)\n    edges.push( [ x, i ], [ r, i ] )\n  return edges\n}\n\nfunction getBorder(rect, exclusive) {\n  return getEdges(rect, exclusive).concat( getCorners(rect, exclusive) )\n}\n\nfunction getCenter(rect) {\n  var x, y, w, h\n  if ( Array.isArray(rect) ) {\n    [x, y, w, h] = rect\n    if (rect.length == 2)\n      w = x, h = y, x = 0, y = 0\n  } else if ( !isNaN(rect) )\n    x = 0, y = 0, w = rect, h = rect\n  return [ Math.floor(x + w / 2), Math.floor(y + h / 2) ]\n}\n\nfunction getCells(rect) {\n  var cells = []\n  var [ rectX, rectY, rectWidth, rectHeight ] = rect\n  var i = rectWidth * rectHeight\n  while (i--) {\n    var x = i % rectWidth\n    var y = (i - x) / rectWidth\n    cells[i] = [x + rectX, y + rectY]\n  }\n  return cells\n}\n","import { Cell, Rect } from './index'\n\nconst [FLOOR, WALL, DOOR, DOOR_OPEN, DOOR_HIDDEN, STAIRS] = [0, 1, 2, 3, 4, 5]\nconst tiles = [\n  {\n    name: 'floor',\n    walkable: true\n  },\n  {\n    name: 'wall',\n    opaque: true\n  },\n  {\n    name: 'door',\n    opaque: true,\n    door: true\n  },\n  {\n    name: 'door_open',\n    walkable: true,\n    door: true\n  },\n  {\n    name: 'door_hidden',\n    opaque: true,\n    door: true,\n    hidden: true\n  },\n  {\n    name: 'stairs',\n    walkable: true,\n    stairs: true\n  }\n]\n\nlet costs = []\nfor (let tile of tiles) {\n  let cost = 0\n  if (!tile.walkable && !tile.door)\n    cost = Infinity\n  if (tile.hidden)\n    cost = 1000\n  if (tile.door) {\n    cost++\n    if (!tile.walkable)\n      cost++\n  }\n  costs.push(cost)\n}\n\nconst constants = { FLOOR, WALL, DOOR, DOOR_OPEN, DOOR_HIDDEN, STAIRS, tiles, costs }\nconst methods   = { create, fill, clear, getAt, setAt, getSize, findPath }\nconst World     = Object.assign({}, constants, methods)\n\nexport default World\n\nlet sqrt = function (cache) {\n\n  cache = cache || {}\n\n  return function sqrt(num) {\n    let cached = cache[num]\n    if (cached)\n      return cached\n    let result = cache[num] = Math.sqrt(num)\n    return result\n  }\n\n}()\n\nfunction create(size) {\n  return new Uint8ClampedArray(size * size)\n}\n\nfunction fill(data, id, rect) {\n  if (typeof id === 'undefined')\n    id = WALL\n  let size = getSize(data)\n  if (rect) {\n    let cells = Rect.getCells(rect)\n    for (let cell of cells)\n      setAt(data, cell, id)\n  } else {\n    let i = data.length\n    while (i--)\n      data[i] = id\n  }\n  return data\n}\n\nfunction clear(data) {\n  fill(data, FLOOR)\n  return data\n}\n\nfunction getAt(data, cell) {\n  let size = getSize(data)\n  if ( !Cell.isInside(cell, size) )\n    return null\n  let index = Cell.toIndex(cell, size)\n  return data[index]\n}\n\nfunction setAt(data, cell, value) {\n  let size = getSize(data)\n  if ( !Cell.isInside(cell, size) )\n    return null\n  let index = Cell.toIndex(cell, size)\n  data[index] = value\n  return value\n}\n\nfunction getSize(data) {\n  return sqrt(data.length)\n}\n\nfunction findPath(data, start, goal, costs, diagonals) {\n\n  if (!costs)\n    costs = {\n      tiles: World.costs,\n      cells: {}\n    }\n\n  if (!costs.tiles)\n    costs = {\n      tiles: costs,\n      cells: {}\n    }\n\n  if (costs.tiles[ World.getAt(data, goal) ] === Infinity)\n    return null\n\n  let path = []\n\n  let size = getSize(data)\n\n  let startId = start.toString()\n  let goalId  = goal.toString()\n\n  let opened = [startId]\n  let closed = {}\n\n  let scores = { f: {}, g: {} }\n  let parent = {}\n\n  let cells = data.reduce( (cells, id, index) => cells.concat( [ Cell.fromIndex(index, size) ] ), [] )\n  for (let cell of cells) {\n    scores.g[cell] = Infinity\n    scores.f[cell] = Infinity\n  }\n\n  scores.g[start] = 0\n  scores.f[start] = Cell.getManhattan(start, goal)\n\n  while (opened.length) {\n    if (opened.length > 1)\n      opened = opened.sort( (a, b) => scores.f[b] - scores.f[a] )\n    let cellId = opened.pop()\n    let cell = Cell.fromString(cellId)\n    if (cellId === goalId) {\n      let cell = goal\n      do {\n        path.unshift(cell)\n        cell = parent[cell]\n      } while (cell)\n      return path\n    }\n    closed[cell] = true\n    for ( let neighbor of Cell.getNeighbors(cell, diagonals) ) {\n      if (!Cell.isInside(neighbor, size) || neighbor in closed)\n        continue\n      let id = neighbor.toString()\n      let tileCost = costs.tiles[ getAt(data, neighbor) ] || 0\n      let cellCost = costs.cells[neighbor] || 0\n      let cost = tileCost + cellCost\n      if (!id === goalId && cost === Infinity)\n        continue\n      let g = scores.g[cell] + 1 + cost\n      if ( !opened.includes(id) )\n        opened.push(id)\n      else if ( g >= scores.g[neighbor] )\n        continue\n      parent[neighbor] = cell\n      scores.g[neighbor] = g\n      scores.f[neighbor] = g + Cell.getManhattan(neighbor, goal)\n    }\n  }\n\n  return null\n\n}\n","import { Cell, World } from './index'\n\nexport default { get }\n\nfunction get(data, start, range) {\n  let cells = []\n  let i = 8\n  while (i--)\n    cells = cells.concat( getOctant(data, start, range, i) )\n  cells.push(start)\n  return cells\n}\n\nfunction getOctant(data, start, range, octant) {\n  range = range || Infinity\n  let size = World.getSize(data)\n  let [x, y] = start\n  let cells = []\n  let shadows = []\n  let fullShadow = false\n  for (let row = 1; row <= range; row++) {\n    let [transformX, transformY] = transformOctant(row, 0, octant)\n    let cell = [x + transformX, y + transformY]\n    if ( !Cell.isInside(cell, size) )\n      break\n    for (let col = 0; col <= row; col++) {\n      let [transformX, transformY] = transformOctant(row, col, octant)\n      let cell = [x + transformX, y + transformY]\n      if ( !Cell.isInside(cell, size) || transformX * transformX + transformY * transformY > range * range )\n        break\n      if (!fullShadow) {\n        let projection = getProjection(row, col)\n        let visible = !shadows.find( shadow => shadow.start <= projection.start && shadow.end >= projection.end )\n        if (visible) {\n          cells.push(cell)\n          let id = World.getAt(data, cell)\n          if ( World.tiles[id].opaque ) {\n            let index\n            for (index = 0; index < shadows.length; index++)\n              if (shadows[index].start >= projection.start)\n                break\n            let prev = shadows[index - 1]\n            let next = shadows[index]\n            let overPrev = index > 0 && prev.end > projection.start\n            let overNext = index < shadows.length && next.start < projection.end\n            if (overNext)\n              if (overPrev) {\n                prev.end = next.end\n                shadows.splice(index, 1)\n              } else\n                next.start = projection.start\n            else\n              if (overPrev)\n                prev.end = projection.end\n              else\n                shadows.splice(index, 0, projection)\n            let shadow = shadows[0]\n            fullShadow = shadows.length === 1 && shadow.start === 0 && shadow.end === 1\n          }\n        }\n      }\n    }\n  }\n  return cells\n}\n\nfunction getProjection(row, col) {\n  let start = col / (row + 2)\n  let end   = (col + 1) / (row + 1)\n  return {start, end}\n}\n\nfunction transformOctant(row, col, octant) {\n  switch (octant) {\n    case 0: return [ col, -row]\n    case 1: return [ row, -col]\n    case 2: return [ row,  col]\n    case 3: return [ col,  row]\n    case 4: return [-col,  row]\n    case 5: return [-row,  col]\n    case 6: return [-row, -col]\n    case 7: return [-col, -row]\n  }\n}\n","import { Cell, World, FOV } from './index'\n\nexport default { create }\n\nfunction create(type, sprite, walkable) {\n\n  walkable = !!walkable\n\n  let path = null\n\n  function look() {\n    let cells = FOV.get(entity.world.data, entity.cell, 7)\n    entity.seeing = {}\n    for (var cell of cells) {\n      let type = World.tiles[ entity.world.getAt(cell) ].name\n      let other = entity.world.entitiesAt(cell)[0]\n      if (other)\n        type = other.type\n      entity.known[cell] = type\n      entity.seeing[cell] = true\n    }\n  }\n\n  function move(direction) {\n    let moved = false\n    let world = entity.world\n    let [cellX, cellY] = entity.cell\n    let [distX, distY] = direction\n    let target = [cellX + distX, cellY + distY]\n    let id = world.getAt(target)\n    let tile = World.tiles[id]\n    let entities = world.entitiesAt(target)\n    if (tile.walkable) {\n      let enemies = entities.filter(entity => !entity.walkable)\n      if (!enemies.length) {\n        entity.cell = target\n        moved = true\n        look()\n      } else {\n        let enemy = enemies[0]\n        attack(enemy)\n      }\n    } else if (tile.door) {\n      world.openDoor(target)\n      look()\n    }\n    return moved\n  }\n\n  function moveTo(target) {\n    if ( !path || path[path.length - 1] !== target )\n      path = entity.world.findPath(entity, target)\n    if (!path)\n      return false\n    let next\n    path.some(function(cell, index) {\n      if ( !Cell.isEqual(entity.cell, cell) )\n        return\n      next = path[index + 1]\n      return true\n    })\n    if (!next)\n      return false\n    let [cellX, cellY] = entity.cell\n    let [nextX, nextY] = next\n    let dist = [nextX - cellX, nextY - cellY]\n    return entity.move(dist)\n  }\n\n  function attack(entity) {\n    entity.health--\n    if (entity.health <= 0){\n      let entities = entity.world.entities\n      let index = entities.indexOf(entity)\n      if (index !== -1)\n        entities.splice(index, 1)\n      look()\n    }\n  }\n\n  let props   = { type, sprite, walkable, wandering: true, health: 1, seeing: {}, known: {}, world: null, cell: null }\n  let methods = { look, move, moveTo }\n  let entity  = Object.assign({}, props, methods)\n\n  return entity\n}\n","import { RNG, World, Cell, Rect } from './index'\n\nconst { FLOOR, WALL, DOOR, DOOR_OPEN, DOOR_HIDDEN, STAIRS } = World\n\nexport default { createDungeon }\n\nlet rng = RNG.create()\n\nfunction findRoom(min, max, worldSize) {\n  var w = rng.get((max - min) / 2 + 1) * 2 + min\n  var h = rng.get((max - min) / 2 + 1) * 2 + min\n  var x = rng.get((worldSize - w) / 2) * 2 + 1\n  var y = rng.get((worldSize - h) / 2) * 2 + 1\n  return [x, y, w, h]\n}\n\nlet Diamond = function () {\n\n  let cache = {}\n\n  function cellsFromObject(obj) {\n    return Object.keys(obj).map( key => key.split(',').map(Number) )\n  }\n\n  function cacheDiamond(diamond) {\n\n    let [x, y, radius] = diamond\n\n    let start = [x, y]\n    let stack = [start]\n    let cells = { [start]: 0 }\n    let edges = {}\n    let doors = {}\n\n    while (stack.length) {\n      let node = stack.pop()\n      let nexts = Cell.getNeighbors(node).filter( neighbor => !(neighbor.toString() in cells) )\n      for (let next of nexts) {\n        let steps = cells[node] + 1\n        if (steps <= radius) {\n          cells[next] = steps\n          stack.unshift(next)\n        } else {\n          let [nextX, nextY] = next\n          let [distX, distY] = [nextX - x, nextY - y]\n          if (!distX || !distY)\n            doors[next] = steps\n          edges[next] = steps\n        }\n      }\n    }\n\n    cells = cellsFromObject(cells)\n    edges = cellsFromObject(edges)\n    doors = cellsFromObject(doors)\n\n    return { cells, edges, doors }\n\n  }\n\n  function getCached(diamond) {\n    let cached = cache[diamond]\n    if (!cached)\n      cached = cache[diamond] = cacheDiamond(diamond)\n    return cached\n  }\n\n  function getCells(diamond) {\n    return getCached(diamond).cells\n  }\n\n  function getEdges(diamond) {\n    return getCached(diamond).edges\n  }\n\n  return { getCells, getEdges }\n\n}()\n\nfunction findDiamondRoom(min, max, worldSize) {\n  let radius = rng.get((max - min) / 2 + 1) * 2 + min\n  let nodes = findNodes(worldSize, radius).map(Cell.fromString)\n  let diamond = rng.choose(nodes)\n  diamond.push(radius)\n  return diamond\n}\n\nfunction findRooms(data, maxRatio) {\n  maxRatio = maxRatio || 0.33\n  let size = World.getSize(data)\n  let area = size * size\n  let min = Math.round(size / 5)\n  let max = Math.round(size / 4)\n  let valid = true\n  let rooms = { cells: {}, edges: {}, rects: {}, diamonds: {}, list: [] }\n  let total = 0\n  let fails = 0\n  let failed = {}\n  while (valid && total / area < maxRatio) {\n    let type = 'rect'\n    let shape\n    do {\n      valid = true\n      let cells\n      if ( rng.choose(100) )\n        type = 'diamond'\n      if (type === 'rect') {\n        shape = findRoom(min, max, size)\n        cells = Rect.getBorder(shape)\n      } else if (type === 'diamond') {\n        shape = findDiamondRoom(2, 4, size)\n        cells = Diamond.getEdges(shape)\n      }\n      if (failed[shape]) {\n        valid = false\n        continue\n      }\n      for (let cell of cells) {\n        if (rooms.cells[cell] || rooms.edges[cell]) {\n          failed[shape] = true\n          valid = false\n          break\n        }\n      }\n    } while (!valid && ++fails < area)\n    if (valid) {\n      let room, edges\n      room = { edges: {}, shape, type }\n      if (type === 'rect') {\n        edges = Rect.getEdges(shape, true)\n        rooms.rects[shape] = room\n        room.cells = Rect.getCells(shape)\n      } else if (type === 'diamond') {\n        edges = Diamond.getEdges(shape)\n        rooms.diamonds[shape] = room\n        room.cells = Diamond.getCells(shape)\n      }\n      for (let cell of room.cells)\n        rooms.cells[cell] = room\n      for (let edge of edges) {\n        let sharedEdges = room.edges[edge] = rooms.edges[edge] = rooms.edges[edge] || []\n        sharedEdges.push(room)\n      }\n      rooms.list.push(room)\n      total += room.cells.length\n    }\n  }\n  return rooms\n}\n\nfunction findNodes(worldSize, offset) {\n  offset = offset || 0\n  let data = null\n  if (typeof worldSize === 'object') {\n    data = worldSize\n    worldSize = World.getSize(data)\n  }\n  let nodes = []\n  let half = (worldSize - 1) / 2 - offset\n  let i = half * half\n  while (i--) {\n    let [nodeX, nodeY] = Cell.fromIndex(i, half)\n    let node = [nodeX * 2 + 1 + offset, nodeY * 2 + 1 + offset]\n    if (!data || World.getAt(data, node) === WALL && !Cell.getNeighbors(node, true).filter(neighbor => World.getAt(data, neighbor) !== WALL).length)\n      nodes.push( node.toString() )\n  }\n  return nodes\n}\n\nfunction findMazes(data) {\n  let size = World.getSize(data)\n  let mazes = { cells: {}, ends: {}, list: [] }\n  let nodes = new Set( findNodes(data).map(Cell.toString) )\n  while (nodes.size) {\n    let maze = { cells: {}, ends: {}, type: 'maze' }\n    let start = rng.choose( [...nodes] )\n    let id    = Cell.fromString(start)\n    let stack = [id]\n    let track = [id]\n    let end   = true\n    mazes.ends[start] = maze.ends[start] = maze\n    while (stack.length) {\n      let node, [nodeX, nodeY] = node = stack.pop()\n      nodes.delete( node.toString() )\n      mazes.cells[node] = maze.cells[node] = maze\n      let neighbors = Cell.getNeighbors(node, false, 2).filter(function (neighbor) {\n        if (World.getAt(data, neighbor) !== WALL || neighbor in mazes.cells)\n          return false\n        let nonwalls = Cell.getNeighbors(neighbor, true).filter(neighbor => World.getAt(data, neighbor) !== WALL)\n        return !nonwalls.length\n      })\n      if (neighbors.length) {\n        let neighbor = rng.choose(neighbors)\n        let [neighborX, neighborY] = neighbor\n        let [distX, distY] = [neighborX - nodeX, neighborY - nodeY]\n        let [stepX, stepY] = [ distX / (Math.abs(distX) || 1), distY / (Math.abs(distY) || 1) ]\n        let midpoint = [nodeX + stepX, nodeY + stepY]\n        mazes.cells[midpoint] = maze.cells[midpoint] = maze\n        stack.push(neighbor)\n        track.push(neighbor)\n        end = false\n      } else {\n        if (!end) {\n          mazes.ends[node] = maze.ends[node] = maze\n          end = true\n        }\n        if (track.length)\n          stack.push( track.pop() )\n      }\n    }\n    mazes.list.push(maze)\n  }\n  return mazes\n}\n\nfunction findConnectors(data, rooms, mazes) {\n  let connectors = {}\n  for (let id in rooms.edges) {\n    let cell = Cell.fromString(id)\n    let neighbors = Cell.getNeighbors(cell)\n    let regions = []\n    for (let neighbor of neighbors) {\n      let [x, y] = neighbor\n      if (x % 2 && y % 2 && World.getAt(data, neighbor) === FLOOR) {\n        let region = rooms.cells[neighbor] || mazes.cells[neighbor]\n        if (region)\n          regions.push(region)\n      }\n    }\n    if (regions.length === 2)\n      connectors[cell] = regions\n  }\n  return connectors\n}\n\nfunction findDoors(data, rooms, mazes) {\n\n  let connectorRegions = findConnectors(data, rooms, mazes)\n  let start = rng.choose(rooms.list)\n  let stack = [start]\n  let track = [start]\n  let doors = []\n  let hidden = []\n\n  let disconnected = new Set(rooms.list)\n  let connected = new Set( [start] )\n\n  while (stack.length) {\n    let node = stack.pop()\n    if ( rooms.list.includes(node) && disconnected.has(node) )\n      disconnected.delete(node)\n    let connectors = getConnectors(node)\n    let connectorKeys = Object.keys(connectors)\n    if (connectorKeys.length) {\n      let connector = rng.choose(connectorKeys)\n      let next = connectors[connector]\n      if (next) {\n        // Remove extraneous connectors\n        for (let id in next.cells) {\n          let cell = Cell.fromString(id)\n          let neighbors = Cell.getNeighbors(cell)\n          for (let neighbor of neighbors) {\n            if ( neighbor in connectorRegions && connectorRegions[neighbor].includes(node) )\n              delete connectorRegions[neighbor]\n          }\n        }\n        doors.push(connector)\n        stack.push(next)\n        track.push(next)\n        connected.add(next)\n      }\n    } else {\n      if (track.length)\n        stack.push( track.pop() )\n    }\n  }\n\n  for (let room of disconnected) {\n    let edges = Object.keys(room.edges).filter( (edge) => edge in connectorRegions )\n    if (edges.length) {\n      let edge = rng.choose(edges)\n      hidden.push(edge)\n    }\n  }\n\n  if (hidden.length)\n    console.log(`Something doesn't feel right about this dungeon...`)\n\n  return { normal: doors, hidden, list: doors.concat(hidden) }\n\n  // Connectors store the `regions` they connect; get the one that's not `node`\n  function getNext(regions, node) {\n    for (let region of regions)\n      if (region !== node)\n        return region\n    return null\n  }\n\n  // Get the valid connectors of the specified `node`\n  function getConnectors(node) {\n    let connectors = {}\n    let prospects = []\n    // Normalize based on type\n    if (node.type === 'rect' || node.type === 'diamond') {\n      for (let id in node.edges)\n        if (id in connectorRegions)\n          prospects.push(id)\n    } else if (node.type === 'maze') {\n      for (let id in node.ends) {\n        let cell = Cell.fromString(id)\n        let neighbors = Cell.getNeighbors(cell).map(Cell.toString)\n        for (let neighbor of neighbors)\n          if (neighbor in connectorRegions)\n            prospects.push(neighbor)\n      }\n    }\n    for (let id of prospects) {\n      let regions = connectorRegions[id]\n      let next = getNext(regions, node)\n      if (next) {\n        let chance = rng.choose(50)\n        if ( chance || !connected.has(next) )\n          connectors[id] = next\n      }\n    }\n    return connectors\n  }\n\n}\n\nfunction fillEnds(data, ends) {\n  let stack = Object.keys(ends).map(Cell.fromString)\n  while (stack.length) {\n    let cell = stack.pop()\n    let neighbors = Cell.getNeighbors(cell)\n    let escapes = []\n    for (let neighbor of neighbors) {\n      let id = World.getAt(data, neighbor)\n      let tile = World.tiles[id]\n      if (tile.walkable || tile.door)\n        escapes.push(neighbor)\n    }\n    if (escapes.length === 1) {\n      World.setAt(data, cell, WALL)\n      stack.push( escapes[0] )\n    }\n  }\n}\n\nfunction generate(size, seed) {\n\n  let data = World.fill( World.create(size) )\n\n  let rooms = findRooms(data)\n  for (let room of rooms.list) {\n    for (let cell of room.cells)\n      World.setAt(data, cell, FLOOR)\n  }\n\n  let mazes = findMazes(data)\n  for (let maze of mazes.list)\n    for (let id in maze.cells)\n      World.setAt(data, Cell.fromString(id), FLOOR)\n\n  let doors = findDoors(data, rooms, mazes,)\n\n  for (let id of doors.normal) {\n    let type = DOOR\n    if ( rng.choose(10) )\n      type = DOOR_OPEN\n    World.setAt(data, Cell.fromString(id), type)\n  }\n\n  for (let id of doors.hidden)\n    World.setAt(data, Cell.fromString(id), DOOR_HIDDEN)\n\n  fillEnds(data, mazes.ends)\n\n  return {data, rooms}\n\n}\n\nfunction createDungeon(size, seed) {\n\n  if (!size % 2)\n    throw new RangeError(`Cannot create dungeon of even size ${size}`)\n\n  if (typeof seed === 'object') {\n    rng = seed\n    seed = rng.seed()\n  } else if ( isNaN(seed) ) {\n    seed = rng.get()\n    rng.seed(seed)\n  }\n\n  console.log('Seed:', seed)\n\n  let {data, rooms} = generate(size, seed)\n  let entities = []\n\n  function spawn(item, cell) {\n    if (!world.rooms)\n      return null\n    if (!cell) {\n      let valid\n      do {\n        let room = rng.choose(world.rooms.list)\n        cell = rng.choose(room.cells)\n      } while (entitiesAt(cell).length)\n    }\n    if ( !isNaN(item) )\n      setAt(cell, item)\n    else if (typeof item === 'object') {\n      item.world = world\n      item.cell  = cell\n      item.look()\n      entities.push(item)\n    }\n    return cell\n  }\n\n  function entitiesAt(cell) {\n    return world.entities.filter( entity => Cell.isEqual(entity.cell, cell) )\n  }\n\n  function getAt(cell) {\n    return World.getAt(world.data, cell)\n  }\n\n  function setAt(cell, value) {\n    return World.setAt(world.data, cell, value)\n  }\n\n  function findPath(start, goal) {\n    let entity = null\n    if (!Array.isArray(start) && typeof start === 'object') {\n      entity = start\n      start = entity.cell\n    }\n    let cells = {}\n    if (!entity) {\n      for (let entity of world.entities)\n        cells[entity.cell] = Infinity\n    } else {\n      let world = entity.world\n      world.data.forEach((id, index) => {\n        let cell = Cell.fromIndex(index, world.size)\n        if ( !entity.known[cell] || world.entitiesAt(cell).filter(entity => !entity.walkable).length )\n          cells[cell] = Infinity\n      })\n    }\n    let costs = { tiles: World.costs, cells }\n    let path = World.findPath(world.data, start, goal, costs)\n    return path\n  }\n\n  function openDoor(cell) {\n    let data = world.data.slice()\n    let id = getAt(cell)\n    if (World.tiles[id].door)\n      World.setAt(data, cell, DOOR_OPEN)\n    world.data = data\n    return world\n  }\n\n  function closeDoor(cell) {\n    let data = world.data.slice()\n    let id = getAt(cell)\n    if (World.tiles[id].door)\n      World.setAt(data, cell, DOOR)\n    world.data = data\n    return world\n  }\n\n  function toggleDoor(cell) {\n    let data = world.data.slice()\n    let oldId = getAt(cell)\n    let newId = DOOR_OPEN\n    let tile = World.tiles[id]\n    if (tile.door) {\n      if (tile.walkable)\n        newId = DOOR\n      World.setAt(data, cell, newId)\n    }\n    world.data = data\n    return world\n  }\n\n  let props   = { size, data, rooms, entities }\n  let methods = { spawn, entitiesAt, getAt, setAt, findPath, openDoor, closeDoor, toggleDoor }\n\n  let world = Object.assign({}, props, methods)\n  return world\n\n}\n","import { Generator, World, Entity, Cell, Rect, RNG } from './utils/index'\n\nconst WORLD_SIZE = 25\nconst {FLOOR, WALL, DOOR, DOOR_OPEN, DOOR_HIDDEN, STAIRS} = World\n\nconst sprites = {\n  floor: {\n    char: String.fromCharCode(183),\n    color: 'white'\n  },\n  wall: {\n    char: '#',\n    color: 'teal'\n  },\n  door: {\n    char: '+',\n    color: 'yellow'\n  },\n  door_open: {\n    char: '/',\n    color: 'yellow'\n  },\n  door_hidden: {\n    char: '#',\n    color: 'teal'\n  },\n  stairs: {\n    char: '>',\n    color: 'white'\n  },\n  hero: {\n    char: '@',\n    color: 'white'\n  },\n  wyrm: {\n    char: 'd',\n    color: 'lime'\n  },\n  axolotl: {\n    char: 'a',\n    color: 'cyan'\n  },\n  lullaby: {\n    char: 'o',\n    color: 'green'\n  },\n  gatling: {\n    char: 'G',\n    color: 'white'\n  },\n  wasp: {\n    char: 'b',\n    color: 'yellow'\n  },\n  replica: {\n    char: 'J',\n    color: 'blue'\n  }\n}\n\n// TODO: Change these to key/value pairs with data on each enemy\nconst enemies = ['wyrm', 'axolotl', 'lullaby', 'gatling', 'wasp', 'replica']\n\n// Use `RNG.create(seed)` to seed the RNG, where `seed` is some\n// number like `9820.083045702477`. Seeding the RNG allows you\n// to achieve the same dungeon multiple times for debugging.\n//\n// Leave empty for a random seed.\n//\nconst rng = RNG.create()\n\nfunction generate() {\n  let world = Generator.createDungeon(WORLD_SIZE, rng)\n  let hero = Entity.create('hero', sprites.hero)\n  world.spawn(STAIRS)\n  world.spawn(hero)\n  let i = 10\n  while (i--) {\n    let type = rng.choose(enemies)\n    world.spawn( Entity.create(type, sprites[type]) )\n  }\n  for (let entity of world.entities)\n    entity.look()\n  return {world, hero}\n}\n\nnew Vue({\n  el: '#app',\n  data: function () {\n    return Object.assign(generate(), { debug: false })\n  },\n  methods: {\n    onclick: function (index) {\n      let {world, hero} = this\n      let cell = hero.cell\n      let targetX = index % WORLD_SIZE\n      let targetY = (index - targetX) / WORLD_SIZE\n      let target = [targetX, targetY]\n\n      if ( Cell.isEqual(cell, target) ) {\n        if (world.getAt(cell) === STAIRS)\n          this.descend()\n        return\n      }\n\n      if ( !hero.known[target] )\n        return\n\n      function move() {\n        let moved = hero.moveTo(target)\n        if (moved)\n          window.requestAnimationFrame(move)\n      }\n      move()\n\n    },\n    ascend: function () {\n\n    },\n    descend: function () {\n      let generation = generate()\n      this.world = generation.world\n      this.hero  = generation.hero\n    }\n  },\n  computed: {\n    view: function () {\n      let {world, hero, debug} = this\n      let view = []\n      world.data.forEach((id, index) => {\n        let cell = Cell.fromIndex(index, WORLD_SIZE)\n        let char = ' '\n        let color = 'gray'\n        let type = hero.known[cell]\n        if (!type && debug)\n          type = World.tiles[ world.getAt(cell) ].name\n        if (type) {\n          let sprite = sprites[type]\n          char = sprite.char\n          if ( hero.seeing[cell] )\n            color = sprite.color\n        }\n        view.push( {char, color} )\n      })\n      return view\n    }\n  },\n  mounted: function () {\n    let vue = this\n    vue.$el.style.fontSize = `calc(100vmin / ${WORLD_SIZE})`\n    function handleKeys(event) {\n      let flag = event.type === 'keydown'\n      if (event.code === 'Space' && vue.debug !== flag) {\n        vue.debug = flag\n      }\n    }\n    window.addEventListener('keydown', handleKeys)\n    window.addEventListener('keyup',   handleKeys)\n  },\n  components: {\n    game: {\n      template: '#game-template',\n      props: ['view', 'onclick']\n    }\n  }\n})\n"],"names":["RNG","create","initialSeed","isNaN","Math","random","currentSeed","get","choose","seed","min","max","a","arguments","length","x","sin","floor","array","Array","isArray","newSeed","DIRECTIONS","LEFT","UP_LEFT","UP","UP_RIGHT","RIGHT","DOWN_RIGHT","DOWN","DOWN_LEFT","DIRECTIONS_CARDINAL","constants","methods","toString","fromString","toIndex","fromIndex","isEqual","isEdge","isInside","getNeighbors","getManhattan","Object","assign","cell","string","split","map","Number","size","y","index","b","rect","rectX","rectY","rectWidth","rectHeight","diagonals","step","TypeError","neighbors","directions","direction","dx","dy","current","cx","cy","push","ax","ay","bx","by","abs","isIntersecting","getCorners","getEdges","getBorder","getCenter","getCells","i","exclusive","aw","ah","bw","bh","w","h","edges","r","concat","cells","FLOOR","WALL","DOOR","DOOR_OPEN","DOOR_HIDDEN","STAIRS","tiles","costs","tile","cost","walkable","door","Infinity","hidden","fill","clear","getAt","setAt","getSize","findPath","World","sqrt","cache","num","cached","result","Uint8ClampedArray","data","id","Rect","Cell","value","start","goal","path","startId","goalId","opened","closed","scores","f","g","parent","reduce","sort","cellId","pop","unshift","neighbor","tileCost","cellCost","includes","range","getOctant","octant","shadows","fullShadow","row","transformOctant","transformX","transformY","col","projection","getProjection","visible","find","shadow","end","opaque","prev","next","overPrev","overNext","splice","type","sprite","look","FOV","entity","world","seeing","name","other","entitiesAt","known","move","moved","cellX","cellY","distX","distY","target","entities","enemies","filter","enemy","openDoor","moveTo","some","nextX","nextY","dist","attack","health","indexOf","props","wandering","createDungeon","rng","findRoom","worldSize","Diamond","cellsFromObject","obj","keys","key","cacheDiamond","diamond","radius","stack","doors","node","nexts","steps","getCached","findDiamondRoom","nodes","findNodes","findRooms","maxRatio","area","round","valid","rooms","rects","diamonds","list","total","fails","failed","shape","room","edge","sharedEdges","offset","half","nodeX","nodeY","findMazes","mazes","ends","Set","maze","track","delete","nonwalls","neighborX","neighborY","stepX","stepY","midpoint","findConnectors","connectors","regions","region","findDoors","connectorRegions","disconnected","connected","has","getConnectors","connectorKeys","connector","add","console","log","normal","getNext","prospects","chance","fillEnds","escapes","generate","RangeError","spawn","item","forEach","slice","closeDoor","toggleDoor","oldId","newId","WORLD_SIZE","sprites","String","fromCharCode","Generator","hero","Entity","Vue","debug","targetX","targetY","descend","window","requestAnimationFrame","generation","view","char","color","vue","$el","style","fontSize","handleKeys","event","flag","code","addEventListener"],"mappings":"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"}