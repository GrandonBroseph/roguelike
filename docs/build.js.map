{"version":3,"file":"build.js","sources":["../src/utils/rng.js","../src/utils/cell.js","../src/utils/rect.js","../src/utils/world.js","../src/utils/fov.js","../src/utils/entity.js","../src/utils/item.js","../src/utils/dungeon.js","../src/utils/colors.js","../src/index.js"],"sourcesContent":["let RNG = create()\nRNG.create = create\n\nexport default RNG\n\nfunction create(initialSeed) {\n\n  if ( isNaN(initialSeed) )\n    initialSeed = Math.random() * 10000\n\n  let currentSeed = initialSeed\n\n  return { get, choose, seed }\n\n  function get(min, max) {\n    var a = arguments.length\n    if (a === 0) {\n      let x = Math.sin(currentSeed++) * 10000\n      return x - Math.floor(x)\n    } else if (a === 1) {\n      if ( !isNaN(min) )\n        max = min, min = 0\n      else if ( Array.isArray(min) )\n        [min, max] = min\n    }\n    if (min > max)\n      [min, max] = [max, min]\n    return Math.floor( get() * (max - min) ) + min\n  }\n\n  function choose(array) {\n    if (Array.isArray(array) && !array.length)\n      return null\n    if ( !isNaN(array) )\n      return !get(array)\n    if (!array)\n      array = [0, 1]\n    return array[ get(array.length) ]\n  }\n\n  function seed(newSeed) {\n    if ( !isNaN(newSeed) )\n      initialSeed = currentSeed = newSeed\n    return currentSeed\n  }\n\n}\n","const DIRECTIONS = [ [-1, 0], [-1, -1], [0, -1], [1, -1], [1, 0], [1, 1], [0, 1], [-1, 1] ]\nconst [LEFT, UP_LEFT, UP, UP_RIGHT, RIGHT, DOWN_RIGHT, DOWN, DOWN_LEFT] = DIRECTIONS\nconst DIRECTIONS_CARDINAL = [LEFT, UP, RIGHT, DOWN]\n\nconst constants = { LEFT, RIGHT, UP, DOWN, UP_LEFT, UP_RIGHT, DOWN_LEFT, DOWN_RIGHT, DIRECTIONS, DIRECTIONS_CARDINAL }\nconst methods   = { toString, fromString, toIndex, fromIndex, isEqual, isEdge, isInside, getNeighbors, getManhattan }\n\nexport default Object.assign(constants, methods)\n\nfunction toString(cell) {\n  return cell.toString()\n}\n\nfunction fromString(string) {\n  return string.split(',').map(Number)\n}\n\nfunction toIndex(cell, size) {\n  let [x, y] = cell\n  return y * size + x\n}\n\nfunction fromIndex(index, size) {\n  let x = index % size\n  let y = (index - x) / size\n  return [x, y]\n}\n\nfunction isEqual(a, b) {\n  return a[0] === b[0] && a[1] === b[1]\n}\n\nfunction isEdge(cell, size) {\n  let [x, y] = cell\n  return x === 0 || y === 0 || x === size - 1 || y === size - 1\n}\n\nfunction isInside(cell, size) {\n  let [x, y] = cell\n  let rect = [0, 0, size, size]\n  if ( Array.isArray(size) )\n    rect = size\n  let [rectX, rectY, rectWidth, rectHeight] = rect\n  return x >= rectX && y >= rectY && x < rectX + rectWidth && y < rectY + rectHeight\n}\n\nfunction getNeighbors(cell, diagonals, step) {\n  if (!cell)\n    throw new TypeError(`Cannot get neighbors of cell '${cell}'`)\n  step = step || 1\n  let [x, y] = cell\n  let neighbors = []\n  let directions = DIRECTIONS_CARDINAL\n  if (diagonals)\n    directions = DIRECTIONS\n  for (let direction of directions) {\n    let [dx, dy] = direction\n    let current  = [x + dx * step, y + dy * step]\n    let [cx, cy] = current\n    neighbors.push( [cx, cy] )\n  }\n  return neighbors\n}\n\nfunction getManhattan(a, b) {\n  var [ax, ay] = a\n  var [bx, by] = b\n  return Math.abs(ax - bx) + Math.abs(ay - by)\n}\n","export default { toString, fromString, isEqual, isIntersecting, getCorners, getEdges, getBorder, getCenter, getCells }\n\nfunction toString(cell) {\n  return cell.toString()\n}\n\nfunction fromString(string) {\n  return string.split(',').map(Number)\n}\n\nfunction isEqual(a, b) {\n  var i = a.length\n  while (i--)\n    if (a[i] !== b[i])\n      return false\n  return true\n}\n\nfunction isIntersecting(a, b, exclusive) {\n  let [ ax, ay, aw, ah ] = a\n  let [ bx, by, bw, bh ] = b\n  if (exclusive)\n    ax--, ay--, aw += 2, ah += 2,\n    bx--, by--, bw += 2, bh += 2\n  return ax <= bx + bw && ay <= by + bh && ax + aw >= bx && ay + ah >= by\n}\n\nfunction getCorners(rect, exclusive) {\n  var [ x, y, w, h ] = rect\n  if (exclusive)\n    x--, y--, w += 2, h += 2\n  return [ [x, y], [x + w - 1, y], [x, y + h - 1], [x + w - 1, y + h - 1] ]\n}\n\nfunction getEdges(rect, exclusive) {\n  var edges = []\n  var [ x, y, w, h ] = rect\n  var r = x + w, b = y + h, i\n  if (exclusive)\n    x--, y--, w += 2, h += 2\n  for (i = x + 1; i < r; i++)\n    edges.push( [ i, y ], [ i, b ] )\n  for (i = y + 1; i < b; i++)\n    edges.push( [ x, i ], [ r, i ] )\n  return edges\n}\n\nfunction getBorder(rect, exclusive) {\n  return getEdges(rect, exclusive).concat( getCorners(rect, exclusive) )\n}\n\nfunction getCenter(rect) {\n  var x, y, w, h\n  if ( Array.isArray(rect) ) {\n    [x, y, w, h] = rect\n    if (rect.length == 2)\n      w = x, h = y, x = 0, y = 0\n  } else if ( !isNaN(rect) )\n    x = 0, y = 0, w = rect, h = rect\n  return [ Math.floor(x + w / 2), Math.floor(y + h / 2) ]\n}\n\nfunction getCells(rect) {\n  var cells = []\n  var [ rectX, rectY, rectWidth, rectHeight ] = rect\n  var i = rectWidth * rectHeight\n  while (i--) {\n    var x = i % rectWidth\n    var y = (i - x) / rectWidth\n    cells[i] = [x + rectX, y + rectY]\n  }\n  return cells\n}\n","import { Cell, Rect } from './index'\n\nconst [FLOOR, WALL, DOOR, DOOR_OPEN, DOOR_SECRET, STAIRS, TRAP] = [0, 1, 2, 3, 4, 5, 6]\nconst tiles = [\n  {\n    name: 'floor',\n    walkable: true\n  },\n  {\n    name: 'wall',\n    opaque: true\n  },\n  {\n    name: 'door',\n    opaque: true,\n    door: true\n  },\n  {\n    name: 'door_open',\n    walkable: true,\n    door: true\n  },\n  {\n    name: 'door_secret',\n    opaque: true,\n    door: true,\n    secret: true\n  },\n  {\n    name: 'stairs',\n    walkable: true,\n    stairs: true\n  },\n  {\n    name: 'trap',\n    walkable: true,\n    trap: true\n  }\n]\n\nlet costs = []\nfor (let tile of tiles) {\n  let cost = 0\n  if (!tile.walkable && !tile.door)\n    cost = Infinity\n  if (tile.secret)\n    cost = 1000\n  if (tile.door) {\n    cost++\n    if (!tile.walkable)\n      cost++\n  }\n  costs.push(cost)\n}\n\nconst constants = { FLOOR, WALL, DOOR, DOOR_OPEN, DOOR_SECRET, STAIRS, TRAP, tiles, costs }\nconst methods   = { create, fill, clear, getAt, getTileAt, setAt, getSize, findPath }\nconst World     = Object.assign({}, constants, methods)\n\nexport default World\n\nlet sqrt = function (cache) {\n\n  cache = cache || {}\n\n  return function sqrt(num) {\n    let cached = cache[num]\n    if (cached)\n      return cached\n    let result = cache[num] = Math.sqrt(num)\n    return result\n  }\n\n}()\n\nfunction create(size) {\n  return new Uint8ClampedArray(size * size)\n}\n\nfunction fill(data, id, rect) {\n  if (typeof id === 'undefined')\n    id = WALL\n  let size = getSize(data)\n  if (rect) {\n    let cells = Rect.getCells(rect)\n    for (let cell of cells)\n      setAt(data, cell, id)\n  } else {\n    let i = data.length\n    while (i--)\n      data[i] = id\n  }\n  return data\n}\n\nfunction clear(data) {\n  fill(data, FLOOR)\n  return data\n}\n\nfunction getAt(data, cell) {\n  let size = getSize(data)\n  if ( !Cell.isInside(cell, size) )\n    return null\n  let index = Cell.toIndex(cell, size)\n  return data[index]\n}\n\nfunction getTileAt(data, cell) {\n  return tiles[ getAt(data, cell) ]\n}\n\nfunction setAt(data, cell, value) {\n  let size = getSize(data)\n  if ( !Cell.isInside(cell, size) )\n    return null\n  let index = Cell.toIndex(cell, size)\n  data[index] = value\n  return value\n}\n\nfunction getSize(data) {\n  return sqrt(data.length)\n}\n\nfunction findPath(data, start, goal, costs, diagonals) {\n\n  if (!costs)\n    costs = {\n      tiles: World.costs,\n      cells: {}\n    }\n\n  if (!costs.tiles)\n    costs = {\n      tiles: costs,\n      cells: {}\n    }\n\n  // if (costs.tiles[ World.getAt(data, goal) ] === Infinity)\n  //   return null\n\n  let path = []\n\n  let size = getSize(data)\n\n  let startKey = start.toString()\n  let goalKey  = goal.toString()\n\n  let opened = [startKey]\n  let closed = {}\n\n  let scores = { f: {}, g: {} }\n  let parent = {}\n\n  let cells = data.reduce( (cells, id, index) => cells.concat( [ Cell.fromIndex(index, size) ] ), [] )\n  for (let cell of cells) {\n    scores.g[cell] = Infinity\n    scores.f[cell] = Infinity\n  }\n\n  scores.g[start] = 0\n  scores.f[start] = Cell.getManhattan(start, goal)\n\n  while (opened.length) {\n    if (opened.length > 1)\n      opened = opened.sort( (a, b) => scores.f[b] - scores.f[a] )\n    let cellKey = opened.pop()\n    let cell = Cell.fromString(cellKey)\n    if (cellKey === goalKey) {\n      let cell = goal\n      do {\n        path.unshift(cell)\n        cell = parent[cell]\n      } while (cell)\n      return path\n    }\n    closed[cell] = true\n    for ( let neighbor of Cell.getNeighbors(cell, diagonals) ) {\n      if (!Cell.isInside(neighbor, size) || neighbor in closed)\n        continue\n      let key = neighbor.toString()\n      let tileCost = costs.tiles[ getAt(data, neighbor) ] || 0\n      let cellCost = costs.cells[neighbor] || 0\n      let cost = tileCost + cellCost\n      if (cost === Infinity && key !== goalKey)\n        continue\n      let g = scores.g[cell] + 1 + cost\n      if ( !opened.includes(key) )\n        opened.push(key)\n      else if ( g >= scores.g[neighbor] )\n        continue\n      parent[neighbor] = cell\n      scores.g[neighbor] = g\n      scores.f[neighbor] = g + Cell.getManhattan(neighbor, goal)\n    }\n  }\n\n  return null\n\n}\n","import { Cell, World } from './index'\n\nexport default { get }\n\nfunction get(data, start, range) {\n  let cells = []\n  let i = 8\n  while (i--)\n    cells = cells.concat( getOctant(data, start, range, i) )\n  cells.push(start)\n  return cells\n}\n\nfunction getOctant(data, start, range, octant) {\n  range = range || Infinity\n  let size = World.getSize(data)\n  let [x, y] = start\n  let cells = []\n  let shadows = []\n  let fullShadow = false\n  for (let row = 1; row <= range; row++) {\n    let [transformX, transformY] = transformOctant(row, 0, octant)\n    let cell = [x + transformX, y + transformY]\n    if ( !Cell.isInside(cell, size) )\n      break\n    for (let col = 0; col <= row; col++) {\n      let [transformX, transformY] = transformOctant(row, col, octant)\n      let cell = [x + transformX, y + transformY]\n      if ( !Cell.isInside(cell, size) || transformX * transformX + transformY * transformY > range * range )\n        break\n      if (!fullShadow) {\n        let projection = getProjection(row, col)\n        let visible = !shadows.find( shadow => shadow.start <= projection.start && shadow.end >= projection.end )\n        if (visible) {\n          cells.push(cell)\n          let id = World.getAt(data, cell)\n          if ( World.tiles[id].opaque ) {\n            let index\n            for (index = 0; index < shadows.length; index++)\n              if (shadows[index].start >= projection.start)\n                break\n            let prev = shadows[index - 1]\n            let next = shadows[index]\n            let overPrev = index > 0 && prev.end > projection.start\n            let overNext = index < shadows.length && next.start < projection.end\n            if (overNext)\n              if (overPrev) {\n                prev.end = next.end\n                shadows.splice(index, 1)\n              } else\n                next.start = projection.start\n            else\n              if (overPrev)\n                prev.end = projection.end\n              else\n                shadows.splice(index, 0, projection)\n            let shadow = shadows[0]\n            fullShadow = shadows.length === 1 && shadow.start === 0 && shadow.end === 1\n          }\n        }\n      }\n    }\n  }\n  return cells\n}\n\nfunction getProjection(row, col) {\n  let start = col / (row + 2)\n  let end   = (col + 1) / (row + 1)\n  return {start, end}\n}\n\nfunction transformOctant(row, col, octant) {\n  switch (octant) {\n    case 0: return [ col, -row]\n    case 1: return [ row, -col]\n    case 2: return [ row,  col]\n    case 3: return [ col,  row]\n    case 4: return [-col,  row]\n    case 5: return [-row,  col]\n    case 6: return [-row, -col]\n    case 7: return [-col, -row]\n  }\n}\n","import { Cell, World, FOV } from './index'\n\nexport default { create }\n\nfunction create(options) {\n\n  let entity = {\n    entityType: null,\n    kind: null\n  }\n\n  let props = {\n    type: 'entity',\n    wandering: true,\n    health: 1,\n    seeing: {},\n    known: {},\n    world: null,\n    cell: null\n  }\n\n  Object.assign(entity, options, props)\n\n  let path = null\n\n  function look() {\n    let cells = FOV.get(entity.world.data, entity.cell, 7)\n    entity.seeing = {}\n    for (var cell of cells) {\n      let kind = World.tiles[ entity.world.getAt(cell) ].name\n      let other = entity.world.elementsAt(cell)[0]\n      if (other)\n        kind = other.kind\n      entity.known[cell] = kind\n      entity.seeing[cell] = true\n    }\n  }\n\n  function move(direction) {\n    let moved = false\n    let world = entity.world\n    let [cellX, cellY] = entity.cell\n    let [distX, distY] = direction\n    let target = [cellX + distX, cellY + distY]\n    let id = world.getAt(target)\n    let tile = World.tiles[id]\n    let entities = world.entitiesAt(target)\n    let items    = world.itemsAt(target)\n    if (entities.length) {\n      let enemy = entities[0]\n      attack(enemy)\n    } else if (tile.walkable) {\n      if (!entities.length) {\n        entity.cell = target\n        if (items.length) {\n          let item = items[0]\n          entity.collect(item)\n        }\n        moved = true\n        look()\n      }\n    } else if (tile.door) {\n      world.openDoor(target)\n      look()\n    }\n    return moved\n  }\n\n  function moveTo(target) {\n    if ( !path || path[path.length - 1] !== target )\n      path = entity.world.findPath(entity, target)\n    if (!path)\n      return false\n    let next\n    path.some(function(cell, index) {\n      if ( !Cell.isEqual(entity.cell, cell) )\n        return\n      next = path[index + 1]\n      return true\n    })\n    if (!next)\n      return false\n    let [cellX, cellY] = entity.cell\n    let [nextX, nextY] = next\n    let dist = [nextX - cellX, nextY - cellY]\n    return entity.move(dist)\n  }\n\n  function attack(other) {\n    other.health--\n    if (other.health <= 0){\n      entity.world.kill(other)\n      look()\n    }\n  }\n\n  function collect(item) {\n    if ( Cell.isEqual(entity.cell, item.cell) ) {\n      if (item.itemType === 'money')\n        console.log(`Found ${item.value} gold.`)\n      entity.world.kill(item)\n    }\n  }\n\n  let methods = { look, move, moveTo, attack, collect }\n  return Object.assign(entity, methods)\n}\n","export default { create }\n\nfunction create(options) {\n\n  let item = {\n    itemType: null,\n    kind: null,\n    value: null,\n  }\n\n  let props = {\n    type: 'item',\n    world: null,\n    cell: null\n  }\n\n  Object.assign(item, options, props)\n\n  return item\n\n}\n","import { RNG, World, Cell, Rect } from './index'\n\nconst { FLOOR, WALL, DOOR, DOOR_OPEN, DOOR_SECRET, STAIRS, TRAP } = World\n\nexport default { create }\n\nlet rng = RNG.create()\n\nfunction findRoom(min, max, worldSize) {\n  let w = rng.get((max - min) / 2 + 1) * 2 + min\n  let h = rng.get((max - min) / 2 + 1) * 2 + min\n  let x = rng.get((worldSize - w) / 2) * 2 + 1\n  let y = rng.get((worldSize - h) / 2) * 2 + 1\n  return [x, y, w, h]\n}\n\nlet Diamond = function () {\n\n  let cache = {}\n\n  function cellsFromObject(obj) {\n    return Object.keys(obj).map( key => key.split(',').map(Number) )\n  }\n\n  function cacheDiamond(diamond) {\n\n    let [x, y, radius] = diamond\n\n    let start = [x, y]\n    let stack = [start]\n    let cells = { [start]: 0 }\n    let edges = {}\n    let doors = {}\n\n    while (stack.length) {\n      let node = stack.pop()\n      let nexts = Cell.getNeighbors(node).filter( neighbor => !(neighbor.toString() in cells) )\n      for (let next of nexts) {\n        let steps = cells[node] + 1\n        if (steps <= radius) {\n          cells[next] = steps\n          stack.unshift(next)\n        } else\n          edges[next] = steps\n      }\n    }\n\n    cells = cellsFromObject(cells)\n    edges = cellsFromObject(edges)\n\n    return { cells, edges, center: start }\n\n  }\n\n  function getCached(diamond) {\n    let cached = cache[diamond]\n    if (!cached)\n      cached = cache[diamond] = cacheDiamond(diamond)\n    return cached\n  }\n\n  function getCells(diamond) {\n    return getCached(diamond).cells\n  }\n\n  function getEdges(diamond) {\n    return getCached(diamond).edges\n  }\n\n  function getCenter(diamond) {\n    return getCached(diamond).center\n  }\n\n  return { getCells, getEdges, getCenter }\n\n}()\n\nfunction findDiamondRoom(min, max, worldSize) {\n  let radius = rng.get((max - min) / 2 + 1) * 2 + min\n  let nodes = findNodes(worldSize, radius).map(Cell.fromString)\n  let diamond = rng.choose(nodes)\n  diamond.push(radius)\n  return diamond\n}\n\nfunction findRooms(data, maxRatio) {\n  maxRatio = maxRatio || 0.33\n  let size = World.getSize(data)\n  let area = size * size\n  let valid = true\n  let rooms = { cells: {}, edges: {}, rects: {}, diamonds: {}, normal: new Set, secret: new Set, list: [] }\n  let total = 0\n  let fails = 0\n  let cached = {}\n\n  function validate(cells) {\n    for (let cell of cells)\n      if (rooms.cells[cell] || rooms.edges[cell])\n        return false\n    return true\n  }\n\n  function getData(shape) {\n    switch (shape) {\n      case 'rect': {\n        let matrix = findRoom(3, 9, size)\n        return [matrix, Rect.getBorder(matrix, true)]\n      }\n      case 'diamond': {\n        let matrix = findDiamondRoom(2, 6, size)\n        return [matrix, Diamond.getEdges(matrix)]\n      }\n    }\n  }\n\n  while (valid && total / area < maxRatio) {\n    let shape = 'rect'\n    let matrix\n    do {\n      let cells\n      if ( rng.choose(50) ) {\n        shape = 'diamond'\n      }\n      [matrix, cells] = getData(shape)\n      if (matrix in cached) {\n        valid = false\n        continue\n      }\n      cached[matrix] = valid = validate(cells)\n    } while (!valid && ++fails < area)\n    if (valid) {\n      let edges, room = { edges: {}, shape, matrix, type: 'room' }\n      if (shape === 'rect') {\n        edges = Rect.getBorder(matrix, true)\n        room.cells  = Rect.getCells(matrix)\n        room.center = Rect.getCenter(matrix)\n        rooms.rects[matrix] = room\n      } else if (shape === 'diamond') {\n        edges = Diamond.getEdges(matrix)\n        room.cells  = Diamond.getCells(matrix)\n        room.center = Diamond.getCenter(matrix)\n        rooms.diamonds[matrix] = room\n      }\n      for (let cell of room.cells)\n        rooms.cells[cell] = room\n      for (let edge of edges) {\n        let sharedEdges = room.edges[edge] = rooms.edges[edge] = rooms.edges[edge] || []\n        sharedEdges.push(room)\n      }\n      rooms.normal.add(room)\n      rooms.list.push(room)\n      total += room.cells.length\n    }\n\n  }\n  return rooms\n}\n\nfunction findNodes(worldSize, offset) {\n  offset = offset || 0\n  let data = null\n  if (typeof worldSize === 'object') {\n    data = worldSize\n    worldSize = World.getSize(data)\n  }\n  let nodes = []\n  let half = (worldSize - 1) / 2 - offset\n  let i = half * half\n  while (i--) {\n    let [nodeX, nodeY] = Cell.fromIndex(i, half)\n    let node = [nodeX * 2 + 1 + offset, nodeY * 2 + 1 + offset]\n    if (!data || World.getAt(data, node) === WALL && !Cell.getNeighbors(node, true).filter(neighbor => World.getAt(data, neighbor) !== WALL).length)\n      nodes.push( node.toString() )\n  }\n  return nodes\n}\n\nfunction findMazes(data) {\n  let size = World.getSize(data)\n  let mazes = { cells: {}, ends: {}, list: [] }\n  let nodes = new Set( findNodes(data).map(Cell.toString) )\n  while (nodes.size) {\n    let maze = { cells: {}, ends: {}, type: 'maze' }\n    let start = rng.choose( [...nodes] )\n    let id    = Cell.fromString(start)\n    let stack = [id]\n    let track = [id]\n    let end   = true\n    mazes.ends[start] = maze.ends[start] = maze\n    while (stack.length) {\n      let node, [nodeX, nodeY] = node = stack.pop()\n      nodes.delete( node.toString() )\n      mazes.cells[node] = maze.cells[node] = maze\n      let neighbors = Cell.getNeighbors(node, false, 2).filter(function (neighbor) {\n        if (World.getAt(data, neighbor) !== WALL || neighbor in mazes.cells)\n          return false\n        let nonwalls = Cell.getNeighbors(neighbor, true).filter(neighbor => World.getAt(data, neighbor) !== WALL)\n        return !nonwalls.length\n      })\n      if (neighbors.length) {\n        let neighbor = rng.choose(neighbors)\n        let [neighborX, neighborY] = neighbor\n        let [distX, distY] = [neighborX - nodeX, neighborY - nodeY]\n        let [stepX, stepY] = [ distX / (Math.abs(distX) || 1), distY / (Math.abs(distY) || 1) ]\n        let midpoint = [nodeX + stepX, nodeY + stepY]\n        mazes.cells[midpoint] = maze.cells[midpoint] = maze\n        stack.push(neighbor)\n        track.push(neighbor)\n        end = false\n      } else {\n        if (!end) {\n          mazes.ends[node] = maze.ends[node] = maze\n          end = true\n        }\n        if (track.length)\n          stack.push( track.pop() )\n      }\n    }\n    mazes.list.push(maze)\n  }\n  return mazes\n}\n\nfunction findConnectors(data, rooms, mazes) {\n  let connectors = {}\n  for (let id in rooms.edges) {\n    let cell = Cell.fromString(id)\n    let neighbors = Cell.getNeighbors(cell)\n    let regions = []\n    for (let neighbor of neighbors) {\n      let [x, y] = neighbor\n      if (x % 2 && y % 2 && World.getAt(data, neighbor) === FLOOR) {\n        let region = rooms.cells[neighbor] || mazes.cells[neighbor]\n        if (region)\n          regions.push(region)\n      }\n    }\n    if (regions.length === 2)\n      connectors[cell] = regions\n  }\n  return connectors\n}\n\nfunction findDoors(data, rooms, mazes) {\n\n  let connectorRegions = findConnectors(data, rooms, mazes)\n  let start = rng.choose(rooms.list)\n  let stack = [start]\n  let track = [start]\n  let doorRegions = {}\n\n  let disconnected = new Set(rooms.list)\n  let connected = new Map\n\n  for (let room of rooms.list)\n    room.connections = new Set\n\n  for (let maze of mazes.list)\n    maze.connections = new Set\n\n  while (stack.length) {\n    let node = stack.pop()\n    if ( rooms.list.includes(node) && disconnected.has(node) )\n      disconnected.delete(node)\n    let connectors = getConnectors(node)\n    let connectorKeys = Object.keys(connectors)\n    if (connectorKeys.length) {\n      let connector = rng.choose(connectorKeys)\n      let next = connectors[connector]\n      if (next) {\n        // Remove extraneous connectors\n        for (let id in next.cells) {\n          let cell = Cell.fromString(id)\n          let neighbors = Cell.getNeighbors(cell)\n          for (let neighbor of neighbors) {\n            if ( neighbor in connectorRegions && connectorRegions[neighbor].includes(node) )\n              delete connectorRegions[neighbor]\n          }\n        }\n\n        doorRegions[connector] = [node, next]\n\n        stack.push(next)\n        track.push(next)\n\n        node.connections.add(next)\n        next.connections.add(node)\n      }\n    } else {\n      if (node.type === 'maze' && node.connections.length === 1) {\n        let last = node.connections.entries().next().value\n        last.connections.delete(node)\n        connected.delete(node)\n      }\n      while (track.length) {\n        let next = track.pop()\n        if (next && next !== node) {\n          stack.push(next)\n          track.push(next)\n          // console.log('Backtracking to', next.type)\n          break\n        }\n      }\n    }\n  }\n\n  // for (let connector in connectorRegions)\n  //   World.setAt(data, Cell.fromString(connector), DOOR_OPEN)\n\n  return doorRegions\n\n  // Connectors store the `regions` they connect; get the one that's not `node`\n  function getNext(regions, node) {\n    for (let region of regions)\n      if (region !== node)\n        return region\n    return null\n  }\n\n  // Get the valid connectors of the specified `node`\n  function getConnectors(node) {\n    let connectors = {}\n    let prospects = []\n    // Normalize based on type\n    if (node.type === 'room') {\n      for (let id in node.edges)\n        if (id in connectorRegions)\n          prospects.push(id)\n    } else if (node.type === 'maze') {\n      for (let id in node.cells) {\n        let cell = Cell.fromString(id)\n        let neighbors = Cell.getNeighbors(cell)\n        for (let neighbor of neighbors) {\n          if (neighbor in connectorRegions)\n            prospects.push(neighbor.toString())\n        }\n      }\n    }\n    for (let id of prospects) {\n      let cell = Cell.fromString(id)\n      let regions = connectorRegions[id]\n      let next = getNext(regions, node)\n      if (next) {\n        let lucky = rng.choose(5)\n        let isIncluded  = id in doorRegions\n        let isConnected = node.connections.has(next)\n        let isMain      = connected.has(next) && !lucky\n        let nearby      = !!Cell.getNeighbors(cell, true).filter(neighbor => neighbor in doorRegions).length\n        if (!isIncluded && !isConnected && !isMain && !nearby)\n          connectors[id] = next\n      }\n    }\n    return connectors\n  }\n\n}\n\nfunction fillEnds(data, mazes, doors) {\n  let stack = Object.keys(mazes.ends).map(Cell.fromString)\n  let ends = []\n  while (stack.length) {\n    let cell = stack.pop()\n    let escapes = Cell.getNeighbors(cell).filter( neighbor => World.getTileAt(data, neighbor).walkable || neighbor in doors )\n    if (escapes.length <= 1) {\n      delete mazes.cells[cell]\n      World.setAt(data, cell, WALL)\n      if (escapes.length)\n        stack.push( escapes[0] )\n    } else {\n      ends.push(cell)\n    }\n  }\n  ends = ends.filter(end => World.getAt(data, end) === FLOOR && Cell.getNeighbors(end).filter( neighbor => World.getTileAt(data, neighbor).walkable ).length === 1)\n  return ends\n}\n\nfunction generate(size, seed) {\n\n  let data = World.fill( World.create(size) )\n\n  let rooms = findRooms(data)\n  for (let room of rooms.list)\n    for (let cell of room.cells)\n      World.setAt(data, cell, FLOOR)\n\n  let mazes = findMazes(data)\n  for (let maze of mazes.list)\n    for (let id in maze.cells)\n      World.setAt(data, Cell.fromString(id), FLOOR)\n\n  let doors = findDoors(data, rooms, mazes)\n\n  let ends = fillEnds(data, mazes, doors)\n  let endKeys = ends.map(Cell.toString)\n\n  for (let id in doors) {\n    let cell = Cell.fromString(id)\n    let regions = doors[id]\n    let room = regions.filter(region => region.type !== 'maze')[0]\n    let type = DOOR\n    let neighbors = Cell.getNeighbors(cell).filter( neighbor => endKeys.includes( neighbor.toString() ) )\n    if ( !neighbors.length && rng.choose() ) {\n      type = DOOR_SECRET\n      rooms.normal.delete(room)\n      rooms.secret.add(room)\n    } else if ( rng.choose(5) )\n      type = FLOOR\n    World.setAt(data, cell, type)\n  }\n\n  return {data, rooms}\n\n}\n\nfunction create(size, seed) {\n\n  if (!size % 2)\n    throw new RangeError(`Cannot create dungeon of even size ${size}`)\n\n  if (typeof seed === 'object') {\n    rng = seed\n    seed = rng.seed()\n  } else if ( isNaN(seed) ) {\n    seed = rng.get()\n    rng.seed(seed)\n  }\n\n  console.log('Seed:', seed)\n\n  let {data, rooms} = generate(size, seed)\n\n  function spawn(element, cell) {\n    if (!world.rooms)\n      return null\n    if (typeof cell !== 'object') {\n      let valid\n      do {\n        let room = rng.choose( [...world.rooms.normal] )\n        if (cell !== 'center')\n          cell = rng.choose(room.cells)\n        else\n          cell = room.center\n      } while (elementsAt(cell).length && getAt(cell) === FLOOR)\n    }\n    if ( !isNaN(element) )\n      setAt(cell, element)\n    else if (typeof element === 'object') {\n      element.world = world\n      element.cell  = cell\n      getList(element).push(element)\n    }\n    return cell\n  }\n\n  function getList(element) {\n    switch (element.type) {\n      case 'entity':\n        return world.entities\n      case 'item':\n        return world.items\n      default:\n        return null\n    }\n  }\n\n  function kill(element) {\n    let list = getList(element)\n    if (!list)\n      return false\n    let index = list.indexOf(element)\n    if (index < 0)\n      return false\n    list.splice(index, 1)\n    return true\n  }\n\n  function elementsAt(cell) {\n    return entitiesAt(cell).concat(itemsAt(cell))\n  }\n\n  function entitiesAt(cell) {\n    return world.entities.filter( entity => Cell.isEqual(entity.cell, cell) )\n  }\n\n  function itemsAt(cell) {\n    return world.items.filter(   item => Cell.isEqual(  item.cell, cell) )\n  }\n\n\n  function getAt(cell) {\n    return World.getAt(world.data, cell)\n  }\n\n  function getTileAt(cell) {\n    return World.tiles[ getAt(cell) ]\n  }\n\n  function setAt(cell, value) {\n    return World.setAt(world.data, cell, value)\n  }\n\n  function findPath(start, goal) {\n    let entity = null\n    if (!Array.isArray(start) && typeof start === 'object') {\n      entity = start\n      start = entity.cell\n    }\n    let cells = {}\n    if (!entity) {\n      for (let entity of world.entities)\n        cells[entity.cell] = Infinity\n    } else {\n      let world = entity.world\n      world.data.forEach((id, index) => {\n        let cell = Cell.fromIndex(index, world.size)\n        if ( !entity.known[cell] || world.entitiesAt(cell).filter(entity => !entity.walkable).length )\n          cells[cell] = Infinity\n      })\n    }\n    let costs = { tiles: World.costs, cells }\n    let path = World.findPath(world.data, start, goal, costs)\n    return path\n  }\n\n  function openDoor(cell) {\n    let data = world.data.slice()\n    let id = getAt(cell)\n    if (World.tiles[id].door)\n      World.setAt(data, cell, DOOR_OPEN)\n    world.data = data\n    return world\n  }\n\n  function closeDoor(cell) {\n    let data = world.data.slice()\n    let id = getAt(cell)\n    if (World.tiles[id].door)\n      World.setAt(data, cell, DOOR)\n    world.data = data\n    return world\n  }\n\n  function toggleDoor(cell) {\n    let data = world.data.slice()\n    let oldId = getAt(cell)\n    let newId = DOOR_OPEN\n    let tile = World.tiles[id]\n    if (tile.door) {\n      if (tile.walkable)\n        newId = DOOR\n      World.setAt(data, cell, newId)\n    }\n    world.data = data\n    return world\n  }\n\n  let props   = { size, data, rooms, entities: [], items: [] }\n  let methods = { spawn, kill, elementsAt, entitiesAt, itemsAt, getAt, getTileAt, setAt, findPath, openDoor, closeDoor, toggleDoor }\n\n  let world = Object.assign({}, props, methods)\n  return world\n\n}\n","// High-contrast shades\nconst RED     = [255,   0,   0]\nconst YELLOW  = [255, 255,   0]\nconst LIME    = [  0, 255,   0]\nconst CYAN    = [  0, 255, 255]\nconst BLUE    = [  0,   0, 255]\nconst MAGENTA = [255,   0, 255]\n\n// Darker ones\nconst MAROON = [128,   0,   0]\nconst OLIVE  = [128, 128,   0]\nconst GREEN  = [  0, 128,   0]\nconst TEAL   = [  0, 128, 128]\nconst NAVY   = [  0,   0, 128]\nconst PURPLE = [128,   0, 128]\n\n// Monochromes\nconst WHITE = [255, 255, 255]\nconst GRAY  = [128, 128, 128]\nconst BLACK = [  0,   0,   0]\n\nlet lighter = {\n  [MAROON]: RED,\n   [OLIVE]: YELLOW,\n   [GREEN]: LIME,\n    [TEAL]: CYAN,\n    [NAVY]: BLUE,\n  [PURPLE]: MAGENTA,\n    [GRAY]: WHITE,\n   [BLACK]: GRAY\n}\nlet darker  = {\n      [RED]: MAROON,\n   [YELLOW]: OLIVE,\n     [LIME]: GREEN,\n     [CYAN]: TEAL,\n     [BLUE]: NAVY,\n  [MAGENTA]: PURPLE,\n    [WHITE]: GRAY,\n     [GRAY]: BLACK\n}\n\nfunction lighten(color) {\n  return lighter[color]\n}\n\nfunction darken(color) {\n  return darker[color]\n}\n\nconst constants = { RED, YELLOW, LIME, CYAN, BLUE, MAGENTA, MAROON, OLIVE, GREEN, TEAL, NAVY, PURPLE, WHITE, GRAY, BLACK }\nconst methods   = { lighten, darken }\nexport default Object.assign( {}, constants, methods )\n","import { Dungeon, World, Entity, Item, Cell, Rect, RNG, Colors } from './utils/index'\n\nconst WORLD_SIZE = 25\nconst { FLOOR, WALL, DOOR, DOOR_OPEN, DOOR_HIDDEN, STAIRS, TRAP } = World\nconst { RED, MAROON, YELLOW, OLIVE, LIME, GREEN, CYAN, TEAL, BLUE, NAVY, MAGENTA, PURPLE, WHITE, GRAY, BLACK } = Colors\n\nconst sprites = {\n\n  // Tiles\n  floor:       [String.fromCharCode(183), TEAL],\n  wall:        ['#', OLIVE],\n  door:        ['+', MAROON],\n  door_open:   ['/', MAROON],\n  door_secret: ['#', OLIVE],\n  stairs:      ['>', WHITE],\n  trap:        ['^', MAGENTA],\n\n  // Entities\n  human:       ['@', WHITE],\n  wyrm:        ['w', LIME],\n  replica:     ['J', BLUE],\n\n  // Items\n  gold:        ['$', YELLOW],\n  silver:      ['$', WHITE],\n  copper:      ['$', MAROON]\n\n}\n\n// TODO: Change these to key/value pairs with data on each enemy\nconst enemies = ['wyrm', 'replica']\n\n// Use `RNG.create(seed)` to seed the RNG, where `seed` is some\n// number like `9820.083045702477`. Seeding the RNG allows you\n// to achieve the same dungeon multiple times for debugging.\n//\n// Leave empty for a random seed.\n//\nconst rng = RNG.create()\n\nfunction spawnEnemies(world) {\n  let i = 10\n  while (i--) {\n    let kind = rng.choose(enemies)\n    let options = { entityType: 'enemy', kind }\n    let enemy = Entity.create(options)\n    world.spawn(enemy)\n  }\n}\n\nlet money = {\n  copper: {\n    range: [4, 16]\n  },\n  silver: {\n    range: [32, 128],\n    chance: 0.10\n  },\n  gold: {\n    range: [256, 1024],\n    chance: 0.01\n  }\n}\nfunction spawnMoney(world) {\n\n  let i = 10\n\n  while (i--) {\n\n    let num = rng.get(100) + 1\n    let lowest = 1\n    let rarest = null\n    for (let kind in money) {\n      let { range, chance } = money[kind]\n      if (!chance)\n        chance = 1\n      if (chance <= lowest && num <= chance * 100) {\n        lowest = chance\n        rarest = kind\n      }\n    }\n\n    let kind  = rarest\n    let value = rng.get(money[kind].range)\n\n    let options = { itemType: 'money', kind, value }\n    let item = Item.create(options)\n\n    world.spawn(item)\n\n  }\n\n}\n\nfunction generate() {\n  let world = Dungeon.create(WORLD_SIZE, rng)\n  let hero = Entity.create( { entityType: 'hero', kind: 'human' } )\n  world.spawn(hero)\n  world.spawn(STAIRS, 'center')\n  world.spawn(TRAP)\n  spawnEnemies(world)\n  spawnMoney(world)\n  for (let entity of world.entities)\n    entity.look()\n  return {world, hero}\n}\n\nnew Vue({\n  el: '#app',\n  data: function () {\n    return Object.assign(generate(), { log: [], debug: false })\n  },\n  methods: {\n    onclick: function (index) {\n      let {world, hero, debug} = this\n      let cell = hero.cell\n      let targetX = index % WORLD_SIZE\n      let targetY = (index - targetX) / WORLD_SIZE\n      let target = [targetX, targetY]\n\n      if ( Cell.isEqual(cell, target) ) {\n        if (world.getAt(cell) === STAIRS)\n          this.descend()\n        return\n      }\n\n      if ( !hero.known[target] && !debug )\n        return\n\n      function move() {\n        let moved = hero.moveTo(target)\n        if (moved)\n          window.requestAnimationFrame(move)\n      }\n      move()\n\n    },\n    ascend: function () {\n\n    },\n    descend: function () {\n      let generation = generate()\n      this.world = generation.world\n      this.hero  = generation.hero\n    }\n  },\n  computed: {\n    view: function () {\n      let {world, hero, debug} = this\n      let view = []\n      world.data.forEach((id, index) => {\n        let cell = Cell.fromIndex(index, WORLD_SIZE)\n        let char = ' ', color\n        let type = hero.known[cell]\n        if (!type && debug)\n          type = World.tiles[ world.getAt(cell) ].name\n        if (type) {\n          [char, color] = sprites[type]\n          if ( !hero.seeing[cell] )\n            color = GRAY\n          if ( Array.isArray(color) )\n            color = `rgb(${color.join(', ')})`\n        }\n        view.push( {char, color} )\n      })\n      return view\n    }\n  },\n  mounted: function () {\n    let vue = this\n    vue.$el.style.fontSize = `calc(100vmin / ${WORLD_SIZE})`\n    function handleKeys(event) {\n      let flag = event.type === 'keydown'\n      if (event.code === 'Space' && vue.debug !== flag) {\n        vue.debug = flag\n      }\n    }\n    window.addEventListener('keydown', handleKeys)\n    window.addEventListener('keyup',   handleKeys)\n  },\n  components: {\n    game: {\n      template: '#game-template',\n      props: ['view', 'onclick']\n    }\n  }\n})\n"],"names":["RNG","create","initialSeed","isNaN","Math","random","currentSeed","get","choose","seed","min","max","a","arguments","length","x","sin","floor","Array","isArray","array","newSeed","DIRECTIONS","LEFT","UP_LEFT","UP","UP_RIGHT","RIGHT","DOWN_RIGHT","DOWN","DOWN_LEFT","DIRECTIONS_CARDINAL","constants","methods","toString","fromString","toIndex","fromIndex","isEqual","isEdge","isInside","getNeighbors","getManhattan","Object","assign","cell","string","split","map","Number","size","y","index","b","rect","rectX","rectY","rectWidth","rectHeight","diagonals","step","TypeError","neighbors","directions","direction","dx","dy","current","cx","cy","push","ax","ay","bx","by","abs","isIntersecting","getCorners","getEdges","getBorder","getCenter","getCells","i","exclusive","aw","ah","bw","bh","w","h","edges","r","concat","cells","FLOOR","WALL","DOOR","DOOR_OPEN","DOOR_SECRET","STAIRS","TRAP","tiles","costs","tile","cost","walkable","door","Infinity","secret","fill","clear","getAt","getTileAt","setAt","getSize","findPath","World","sqrt","cache","num","cached","result","Uint8ClampedArray","data","id","Rect","Cell","value","start","goal","path","startKey","goalKey","opened","closed","scores","f","g","parent","reduce","sort","cellKey","pop","unshift","neighbor","key","tileCost","cellCost","includes","range","getOctant","octant","shadows","fullShadow","row","transformOctant","transformX","transformY","col","projection","getProjection","visible","find","shadow","end","opaque","prev","next","overPrev","overNext","splice","options","entity","props","look","FOV","world","seeing","kind","name","other","elementsAt","known","move","moved","cellX","cellY","distX","distY","target","entities","entitiesAt","items","itemsAt","enemy","item","collect","openDoor","moveTo","some","nextX","nextY","dist","attack","health","kill","itemType","console","log","rng","findRoom","worldSize","Diamond","cellsFromObject","obj","keys","cacheDiamond","diamond","radius","stack","doors","node","nexts","filter","steps","center","getCached","findDiamondRoom","nodes","findNodes","findRooms","maxRatio","area","valid","rooms","rects","diamonds","normal","Set","list","total","fails","validate","getData","shape","matrix","room","type","edge","sharedEdges","add","offset","half","nodeX","nodeY","findMazes","mazes","ends","maze","track","delete","nonwalls","neighborX","neighborY","stepX","stepY","midpoint","findConnectors","connectors","regions","region","findDoors","connectorRegions","doorRegions","disconnected","connected","Map","connections","has","getConnectors","connectorKeys","connector","last","entries","getNext","prospects","lucky","isIncluded","isConnected","isMain","nearby","fillEnds","escapes","generate","endKeys","RangeError","spawn","element","getList","indexOf","forEach","slice","closeDoor","toggleDoor","oldId","newId","RED","YELLOW","LIME","CYAN","BLUE","MAGENTA","MAROON","OLIVE","GREEN","TEAL","NAVY","PURPLE","WHITE","GRAY","BLACK","lighter","darker","lighten","color","darken","WORLD_SIZE","Colors","sprites","String","fromCharCode","enemies","spawnEnemies","entityType","Entity","money","spawnMoney","lowest","rarest","chance","Item","Dungeon","hero","Vue","debug","targetX","targetY","descend","window","requestAnimationFrame","generation","view","char","join","vue","$el","style","fontSize","handleKeys","event","flag","code","addEventListener"],"mappings":"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"}